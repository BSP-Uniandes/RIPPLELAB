%   RIPPLELAB Multi Analysis EEG Project
%   Assisted tool for classification of HFO Events

%   Description:
%   A computing platform for processing continuous local field potentials
%   (LFP). The interface, additional to implement different documented 
%   algorithms for HFO detection, it provides several tools for signal 
%   visualization and manipulation, among which are found:
%   - Channel(s) selection.
%   - Display of multiple signal at the same time.
%   - Several zoom and grid options (time, amplitude, etc.)
%   - Possibility to make time and amplitude measurements directly on the 
%     signals.
%   - Adjustable filter options (notch, band-pass, etc.)
% 
%   The sections to modify when a new method is included are marked with a 
%   [**INSERT!**] comment
% 
% ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Please, cite the following publication when using RIPPLELAB
% Navarrete M, Alvarado-Rojas C, Le Van Quyen M, Valderrama M (2016) 
% RIPPLELAB: A Comprehensive Application for the Detection, Analysis and 
% Classification of High Frequency Oscillations in Electroencephalographic 
% Signals. PLoS ONE 11(6): e0158276. doi:10.1371/journal.pone.0158276
% ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

%   Written by:
%   Miguel G. Navarrete Mejia
%   Chtrical Engineering MS 
%   UNIVERSIDAD DE LOS ANDES
%   Colombia, 2012
%   mnavarretem@gmail.com
%   $Version: 0.19.8$ || $Date: 2019/08/20 09:15$
%   This file is part of the HFO-EEG project.
%
%     Copyright (C) 2015, Miguel Navarrete
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

function p_RippleLab
%% Intro Header - Inizialize App
st_Path = [];
f_Ini(1,[]);

%% Hide Warnings

warning('off','MATLAB:hg:gltexture:TextureDataTooLargeForDevice')

%% [Variable] Global

% --- Icons ---
st_Icons        = f_GetIcons();
% --- Letter Size ---
st_Letter       = f_GetLetterSize();
% --- Colors ---
% Figure Background Color
v_FigColor      = [212 208 200]/255;
% Axes Background Color
v_AxeColor      = [255 255 255]/255;
% Default waitbar color
v_WBarColor     = [0.2902 0.5294 0.1529];  
% Colormaps
v_Colormap      = {'autumn';'bone';'colorcube';'cool';'copper';'flag';...
                'gray';'hot';'hsv';'jet';'lines';'pink';'prism';...
                'spring';'summer';'white';'winter'};
                
v_TFVisMethod   = {'Original';'Relative';'Normalized';'Z-Score'};
% Signal Lines Color
v_SigColor      = [20  43  140]/255;
% Patch Time Color
v_PatchColor    = [149 99  99 ]/255;
% HFO Cluster color
v_ClusterColor  = [255 0   0  ]/255;
% --- Controls ---
% Scale factors of signal amplitude
v_AmpliScales   = [0.01;0.02;0.03;0.05;0.08;...
                0.1;0.2;0.25;0.5;0.6;0.8;...
                1;1.1;1.2;1.25;1.5;1.6;1.8;...
                2;2.2;2.5;3;4;5;6;8;10;20;30;50;80;100];
% Sections quantity in grid view
v_GridSections  = vertcat((2:10)',(15:5:100)');

%% [Variable] --- Axes Handle ---

st_hAxes	= struct;
    % st_hAxes.Main      = Main Figure
    % st_hAxes.TimeScope = Time position axes
    
st_hAxes.Main       = [];
st_hAxes.TimeScope  = [];
st_hAxes.Cursor     = [];
st_hAxes.TimeFreq   = [];
st_hAxes.Filter     = [];

st_hLines.MainLines = [];
st_hLines.PatchTime = [];
st_hLines.TFImage   = [];
st_hLines.FiltLines = [];

% --- Error Variables ---

s_GlobalCheck       = 0;

%% [Variable] --- Reading Variables ---
st_FilePath.nativepath  = './Signals/';
st_FilePath.path        = [];
st_FilePath.name        = [];

st_Memory   = struct;
st_FileInfo = struct;
    % st_FileInfo.s_Check       = Ckeck if signal has been read;
    % st_FileInfo.str_SigPath   = Full Path of signal file
    % st_FileInfo.str_FileName  = File Name;
    % st_FileInfo.str_SigExt    = File extention for signal type;
    % st_FileInfo.s_Start       = Absolute start time
    % st_FileInfo.s_Time        = Time length of record in mins;
    % st_FileInfo.s_Samples     = Number of Samples for signal;
    % st_FileInfo.v_SampleRate  = Sample rate for signal;
    % st_FileInfo.s_NumbRec     = Number of records;
    % st_FileInfo.v_Labels      = Label of records;
    % st_FileInfo.s_TotalSamples= Label of records;
    % st_FileInfo.s_Scale       = Amplitude scale;
    % st_FileInfo.s_error       = Reading Error;
    % st_FileInfo.v_AmpScaleRec = Amplitude scale for record;
    % st_FileInfo.v_MinMaxRec   = min value and max value per record;
    % st_FileInfo.st_Custom     = Custom Info
                
st_FileInfo.s_Check	= 0; 

st_ChInfo	= struct;
%     st_ChInfo.str_DispName   = []; % Channel's Display Name
    
    st_ChInfo.str_ChName	= []; % Channel's Name   
    st_ChInfo.str_ChLoad    = []; % Channel's Name     
    st_ChInfo.str_Montage   = []; % Channel's Source File
    st_ChInfo.str_MtgeLoad  = []; % Channel's Source File
    st_ChInfo.s_Sampling    = []; % Channel's FreqSampling
    st_ChInfo.s_TotalTime   = []; % Channel's Source File
    
    st_ChInfo.str_MemoFile  = []; % Channel's Memory File
    st_ChInfo.str_CommonCh  = []; % Channel's Source File
    st_ChInfo.str_CommMont  = []; % Channel Montage 
    st_ChInfo.st_FileInfo   = []; %
    st_ChInfo.st_FileIdxLoad= []; %
%     st_ChInfo.str_TmpPath   = './Temp/'; %
    
% --- Data Variables ---
str_TempFolder      = './Temp/';
str_TempFile        = [];

st_Data         = struct;
    % st_Data.m_Data            = Matrix with the data plotted
    % st_Data.v_Time            = Time vector
    % st_Data.v_Labels          = Vector with the labels selected
    % st_Data.s_Sampling        = Sampling frequency of time line
    % st_Data.s_TotalTime       = Value of total time selected
    % st_Data.v_TimeLims        = Limits of time interval loaded
    % st_Data.v_TimeStart       = Data start time vector [HH MM SS.SSS] 

% --- Offset Values ---

st_Offset.Value         = 100;
st_Offset.Vector        = [];
st_Offset.SelectedVals  = [];

%% [Variable] --- TF Display ---

st_Spectrum.st_FilterData.v_NewChIdx    = [];
st_Spectrum.v_FreqLims  = [];
st_Spectrum.s_FreqBins  = [];
st_Spectrum.v_WindLims  = [-1 -1];
st_Spectrum.s_Exists    = false;

% --- TF Tools Variables ---
st_SpectrumOpt.s_TimeFreqScale  = 1;
st_SpectrumOpt.s_PlotOK         = 0;      
st_SpectrumOpt.s_PanelChk       = 1;

%% [Variable] --- Filter Values ---

st_FilterData.s_isAllFiltered	= false;
st_FilterData.m_ChFilter        = [];
st_FilterData.v_ChIdx           = [];
st_FilterData.v_FiltCutFr       = [];
st_FilterData.v_NewChIdx        = false;
st_FilterData.s_Exists      	= false;

%% [Variable] --- Positioning Variables ---
st_Position       = struct;
    % st_Position.s_TimeIni       = Start Time displayed
    % st_Position.s_Timelength    = Length of time displayed
    % st_Position.s_ChSelected	  = Number of signals selected
    % st_Position.s_NumChSel      = Number of signals selected
    % st_Position.v_VerticalPos   = v(1) The First Pos, v(2) Channel Qty 
    % st_Position.s_FirstChDispl  = First Signal Dispayed
    % st_Position.s_IdxIni        = Start Index displayed
    % st_Position.s_IdxEnd        = End Index displayed
    % st_Position.s_MaxDispSampl  = Maximum display samples 
    
st_Position.s_TimeIni       = 0;
st_Position.s_AddIniTime    = false;
st_Position.s_Timelength    = inf;
st_Position.s_ChSelected    = [];           
st_Position.s_NumChSel      = 0;
st_Position.v_VerticalPos   = [];
st_Position.s_FirstChDispl  = 1;
st_Position.s_IdxIni        = [];
st_Position.s_IdxEnd        = [];
st_Position.s_MaxDispSampl  = 1e5;
st_Position.v_IdxDisplay    = [];
st_Position.s_TFdisplayTime	= tic;

%% [Variable] --- Cursor Variables ---
st_Cursors.s_hCursor1   = [];
st_Cursors.s_hCursor2   = [];
st_Cursors.v_hCurLine1  = [];
st_Cursors.v_hCurLine2  = [];
st_Cursors.s_SizeCur1   = 0.005;
st_Cursors.s_SizeCur2   = 0.005;
st_Cursors.s_PosCur1    = 0.3;
st_Cursors.s_PosCur2    = 0.7;
st_Cursors.s_ColorCur1  = [.749 0 .749];
st_Cursors.s_ColorCur2  = [1 .4 0];
st_Cursors.s_CurrentCur = [];
st_Cursors.s_ChCursor   = [];
st_Cursors.s_IdxCur1    = [];
st_Cursors.s_IdxCur2    = [];
st_Cursors.s_ValXCur1   = [];
st_Cursors.s_ValXCur2   = [];
st_Cursors.s_ValYCur1   = [];
st_Cursors.s_ValYCur2   = [];

%% [Variable] --- HFO Analysis ---

s_IsMulFileHFO  = 0;


st_WaitOutput   = struct;
st_AdvancedHFO  = struct;
st_HFOSettings  = struct;
st_HFOAnalysis  = struct;

% st_HFOAnalysis.str_ChLabel
% st_HFOAnalysis.s_Sampling
% st_HFOAnalysis.str_DetMethod
% st_HFOAnalysis.m_EvtLims
% st_HFOAnalysis.m_Rel2IntLims
% st_HFOAnalysis.m_IntervLims

st_HFOData.s_FreqIni        = 80;
st_HFOData.s_FreqEnd        = Inf;
st_HFOData.s_EpochTime      = 1;
st_HFOData.str_FileName     = [];
st_HFOData.v_TimeLims       = [];
st_HFOData.str_ChtLabels	= [];
st_HFOData.v_ChHFOInfo      = [];
st_HFOData.v_EvtInterv      = [];

st_HFOControl.IsVisualMrk	= 0;
st_HFOControl.s_CurrChIdx   = [];
st_HFOControl.v_ChannelIdx  = [];
st_HFOControl.m_EvtLimDisp  = [];
st_HFOControl.v_hCluster    = [];
st_HFOControl.v_hLines      = [];
st_HFOControl.str_SavePath  = [];

v_BandLimits                = [40 120 240];

%% [Variable] --- HFO Analysis Methods Variable --- [**INSERT!**]
% Modify this list to include your new method

v_HFOMethodsList	= [{'Visual Marking'},...
                    {'Short Time Energy (RMS)'},...
                    {'Short Line Length'},...
                    {'Hilbert Detector'},...
                    {'MNI Detector'},...
                    {'Modify for your new method'}];
                
% Example:

% v_HFOMethodsList	= [{'Visual Marking'},{'Short Time Energy'},...
%                     {'Short Line Length'},{'Hilbert Detector'},...
%                     {'MNI Detector'},{'XXX Detector'}];
                
%% [GUI] Initialize GUI Building

s_BuildingSteps = 22;
hw_Bar          = waitbar(0,'Building GUI ...');
hw_Patch        = findobj(hw_Bar,'Type','Patch');
set(hw_Patch,'EdgeColor',v_WBarColor,'FaceColor',v_WBarColor)

%% - [Building] Main Figure
% Build main figure
st_hFigure.main     = figure(...                         
                    'MenuBar','None', ...
                    'ToolBar','None', ...
                    'NumberTitle','off', ...
                    'Name','RIPPLELAB', ...
                    'Color',v_FigColor,...
                    'Units','normalized',...
                    'Position',[.05 .05 .9 .8],...
                    'Visible','on',...
                    'Renderer','OpenGL',...
                    'CloseRequestFcn',@f_FigureClose,...
                    'WindowButtonUpFcn',@f_CursorStopDrag,...
                    'KeyPressFcn',@f_FigureKeyPress,...
                    'KeyReleaseFcn',@f_FigureKeyRelease);
               
waitbar(1/s_BuildingSteps)

%% - [Building] Auxiliary Figures (Figures)
%Select Channels Figure

st_hFigure.SelCh	= figure(...
                    'WindowStyle','modal',...
                    'Resize','off',...
                    'IntegerHandle','off',...
                    'NumberTitle','off', ...
                    'Name','Select Channels', ...
                    'Color',v_FigColor,...
                    'Units','normalized',...
                    'Position',[.1 .3 .4 .5],...
                    'Visible','off',...
                    'CloseRequestFcn',@f_FigureAuxCloseAction);
                
%Channel Assembly Figure

st_hFigure.MontageCh = figure(...   
                    'WindowStyle','modal',...
                    'Resize','off',...
                    'IntegerHandle','off',...
                    'NumberTitle','off', ...
                    'Name','Assembly Channels', ...
                    'Color',v_FigColor,...
                    'Units','normalized',...
                    'Position',[.15 .35 .15 .2],...
                    'Visible','off',...
                    'CloseRequestFcn',@f_FigureAuxCloseAction);

%HFO Method Options Figure

st_hFigure.HFOMethods	= figure(...   
                        'WindowStyle','modal',...
                        'Resize','off',...
                        'IntegerHandle','off',...
                        'NumberTitle','off', ...
                        'Name','HFO - Detection Methods', ...
                        'Color',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.27 .4 .35 .4],...
                        'Visible','off',...
                        'CloseRequestFcn',@f_FigureAuxCloseAction);
                
waitbar(2/s_BuildingSteps)
  
%% - [Building] Top Menus
% Top Menus Building

%Menu File
st_hMenu.File   = uimenu(...
                'Label','&File',...
                'Parent', st_hFigure.main);

%Menu Edit 
st_hMenu.Edit   = uimenu(...
                'Label','&Edit',...
                'Parent', st_hFigure.main);

%Menu Panels 
st_hMenu.Panels = uimenu(...
                'Label','&Panels',...
                'Parent', st_hFigure.main);

%Menu Tools        
st_hMenu.Tools  = uimenu(...
                'Label','&Tools',...
                'Parent', st_hFigure.main);

%Menu Help        
st_hMenu.Help   = uimenu(...
                'Label','&Help',...
                'Parent', st_hFigure.main);

waitbar(3/s_BuildingSteps)                

%% - [Building] Submenus - File
% File Submenus

%SubMenu Open
st_hMenu.FileOpen    = uimenu(st_hMenu.File,...
                    'Label','Open Data',...
                    'Accelerator','O',...
                    'CallBack',@f_FigureAuxShowHiden);
                
% %SubMenu Save
% st_hMenu.FileSave    = uimenu(st_hMenu.File,...
%                     'Label','Save Channels',...
%                     'Accelerator','S',...
%                     'CallBack',@f_SaveChannels);
  
%SubMenu Save
st_hMenu.FileSave    = uimenu(st_hMenu.File,...
                    'Label','Save Interval',...
                    'Accelerator','I',...
                    'CallBack',@f_SaveChannels);
                
%SubMenu Clear
st_hMenu.ClearData   = uimenu(st_hMenu.File,...
                    'Label','Erase Data',...
                    'Accelerator','E',...
                    'CallBack',@f_DataClear);
                
%SubMenu Exit
st_hMenu.FileExit    = uimenu(st_hMenu.File,...
                    'Label','Exit',...
                    'Accelerator','Q',...
                    'Separator','on',...
                    'CallBack',@f_FigureClose);

waitbar(4/s_BuildingSteps)                
                
%% - [Building] Submenus - Edit
% File Submenus

%SubMenu Background Color
st_hMenu.EditBColor = uimenu(st_hMenu.Edit,...
                    'Label','Background Color',...
                    'Enable','off',...
                    'CallBack',{});

%SubMenu Plot Color
st_hMenu.EditPColor = uimenu(st_hMenu.Edit,...
                    'Label','Line Color',...
                    'Enable','off',...
                    'CallBack',{});

waitbar(5/s_BuildingSteps) 

%% - [Building] Submenus - Panels
% File Submenus

%SubMenu Background Color
st_hMenu.ViewFilt    = uimenu(st_hMenu.Panels,...
                    'Label','Filter',...
                    'Checked','off',...
                    'CallBack',@f_PanelConfig);
                
st_hMenu.ViewTF     = uimenu(st_hMenu.Panels,...
                    'Label','Time-Frequency',...
                    'Checked','off',...
                    'CallBack',@f_PanelConfig); 
                
waitbar(6/s_BuildingSteps)                

%% - [Building] Submenus - Tools
% File Submenus

%SubMenu Background Color
st_hMenu.ToolsHFOMethods    = uimenu(st_hMenu.Tools,...
                            'Label','HFO Detection Methods',...
                            'Checked','off',...
                            'CallBack',@f_FigureAuxShowHiden);
                
st_hMenu.ToolsHFOAnalysis   = uimenu(st_hMenu.Tools,...
                            'Label','HFO Analysis Tool',...
                            'Checked','off',...
                            'CallBack',@f_FigureAuxShowHiden); 
                
waitbar(7/s_BuildingSteps)                
                
%% - [Building] Submenus - Help
% File Submenus
                
st_hMenu.UserManual	= uimenu(st_hMenu.Help,...
                    'Label','Open User Manual',...
                    'Checked','off',...
                    'CallBack',...
                    'open(''.\Documents\Help\RIPPLELAB_User_Manual.pdf'')');
                        
st_hMenu.About      = uimenu(st_hMenu.Help,...
                    'Label','About RIPPLELAB',...
                    'Checked','off',...
                    'CallBack',@f_DisplayAbout);
                
waitbar(8/s_BuildingSteps)                
                
%% - [Building] Toolbars
% Toolbars

% Button Toolbar
st_hToolbar.Icons   = uitoolbar(st_hFigure.main,...
                    'Visible','on');
                
% Selection Toolbar
st_hToolbar.Select  = uipanel(st_hFigure.main,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 .95 .25 .05],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);    
                                
% Tool Panels Selection
st_hToolbar.Visualize = uipanel(st_hFigure.main,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.25 .95 .2 .05],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);                    
                
% Options Toolbar
st_hToolbar.Options = uipanel(st_hFigure.main,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.45 .95 .55 .05],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);
                
% Visual marking Tool Panel
st_hToolbar.VisualMark   = uipanel(st_hFigure.main,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.75 0 .25 .95],...
                    'BorderType','none',...
                    'Visible','off',...
                    'BorderWidth',1);                

% Axes Tool Panel
st_hToolbar.Panel   = uipanel(st_hFigure.main,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 0 1 .95],...
                    'BorderType','none',...
                    'BorderWidth',1);
                
waitbar(9/s_BuildingSteps)   

%% - [Building] ToolPanels
% Option Toolbar's Panels 
                
% Filter Panel                
st_hToolPanel.Filter = uipanel(st_hToolbar.Options,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 0 1 1],...
                    'Visible','on',...
                    'BorderType','none',...
                    'BorderWidth',1);  
          
% TimeFreq Panel                
st_hToolPanel.TimeFreq = uipanel(st_hToolbar.Options,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 0 1 1],...
                    'Visible','off',...
                    'BorderType','none',...
                    'BorderWidth',1);       
                
% Segment Analysis Panel
st_hToolPanel.Segment = uipanel(st_hToolbar.Options,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 0 1 1],...
                    'Visible','off',...
                    'BorderType','none',...
                    'BorderWidth',1);                  

waitbar(10/s_BuildingSteps)                
                
%% - [Building] Button Toolbar (Icons) 

st_hIcons.open      = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.open,...
                    'TooltipString','Open Signal',...
                    'ClickedCallback',@f_FigureAuxShowHiden);

st_hIcons.save      = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.save,...
                    'TooltipString','Save Channels',...
                    'ClickedCallback',@f_SaveChannels);     
                
st_hIcons.saveInt   = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.saveInt,...
                    'TooltipString','Save Interval Dispayed',...
                    'ClickedCallback',@f_SaveInterval);
            
st_hIcons.clear     = uitoggletool(st_hToolbar.Icons,...
                    'Separator','on',...
                    'CData',st_Icons.clear,...
                    'TooltipString','Clear Data',...
                    'ClickedCallback',@f_DataClear);
  
st_hIcons.zoominH   = uitoggletool(st_hToolbar.Icons,...
                    'Separator','on',...
                    'CData',st_Icons.zoominH,...
                    'TooltipString','Horizontal Zoom In',...
                    'ClickedCallback',@f_ZoomSelect);
                
st_hIcons.zoomoutH  = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.zoomoutH,...
                    'TooltipString','Horizontal Zoom Out',...
                    'ClickedCallback',@f_ZoomSelect);        
                
st_hIcons.pan       = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.hand,...
                    'TooltipString','Move',...
                    'ClickedCallback',@f_ZoomSelect);
                
st_hIcons.grid      = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.grid,...
                    'Separator','on',...
                    'State','on',...
                    'TooltipString','Activate Grid',...
                    'ClickedCallback',@f_GridSet);   
                                                
st_hIcons.HFODetect = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.HFODetect,...
                    'Separator','on',...
                    'TooltipString','HFO Detection Methods',...
                    'ClickedCallback',@f_FigureAuxShowHiden);                 
                
st_hIcons.HFOAnalys = uitoggletool(st_hToolbar.Icons,...
                    'CData',st_Icons.HFOAnalys,...
                    'TooltipString','HFO Analysis Tool',...
                    'ClickedCallback',@f_FigureAuxShowHiden);

v_IncompatibleZoomButtons	= [st_hIcons.zoominH;st_hIcons.zoomoutH;st_hIcons.pan];               
         
waitbar(11/s_BuildingSteps)                                      
                                      
%% - [Building] Axes Display Panels (Panels)
%Panels for axes

% Panel for Signal Visualization
st_hAxesPanel.Signal    = uipanel(st_hToolbar.Panel,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[0 0 1 1],...
                        'BorderType','etchedin',...
                        'BorderWidth',1);  

waitbar(12/s_BuildingSteps)                    
                    
%% - [Controls] Selection Toolbar (Controls)
%Building of selection controls
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Window Width Selection
st_Select.windowLabel   = uicontrol(st_hToolbar.Select,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Window (Secs)',...
                        'Units','normalized',...
                        'Position',[.02 .5 .225 .4]);

st_Select.windowText   = uicontrol(st_hToolbar.Select,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol*.9,...
                        'String',mat2str(st_Position.s_Timelength),...
                        'Units','normalized',...
                        'Position',[.02 .01 .195 .5],...
                        'CallBack',@f_WindWidthChange);

st_Select.windowBup     = uicontrol(st_hToolbar.Select,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.SmallButtUp,...
                        'String',[],...
                        'Position',[.22 .25 .03 .25],...
                        'CallBack',@f_WindWidthUP);        
                    
st_Select.windowBdown   = uicontrol(st_hToolbar.Select,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.SmallButtDown,...
                        'String',[],...
                        'Position',[.22 0 .03 .25],...
                        'CallBack',@f_WindWidthDOWN);                     
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Amplitude Scale Selection             
st_Scale.scaleLabel   = uicontrol(st_hToolbar.Select,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toollabel*.7,...
                    'String','% Amp',...
                    'Units','normalized',...
                    'Position',[.265 .5 .225 .4]);

st_Scale.scaleList   = uicontrol(st_hToolbar.Select,...
                    'Style','popupmenu',...
                    'BackgroundColor','w',...
                    'FontSize',.8*st_Letter.toolcontrol,...
                    'String',num2str(100*v_AmpliScales),...
                    'Value',12,...
                    'Units','normalized',...
                    'Position',[.265 .15 .225 .4],...
                    'CallBack',@f_LinesScaleChange);
                                        
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Grid Sections Selection
st_Select.gridLabel	= uicontrol(st_hToolbar.Select,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toollabel*.7,...
                    'String','GridSects ',...
                    'Units','normalized',...
                    'Position',[.51 .5 .225 .4]);

st_Select.gridList 	= uicontrol(st_hToolbar.Select,...
                    'Style','popupmenu',...
                    'BackgroundColor','w',...
                    'FontSize',.8*st_Letter.toolcontrol,...
                    'String',num2str(v_GridSections),...
                    'Value',9,...
                    'Units','normalized',...
                    'Position',[.51 .15 .225 .4],...
                    'CallBack',@f_AxeMainSetXTick);
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Cannels Displayed Selection
st_Select.ChLabel   = uicontrol(st_hToolbar.Select,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toollabel*.7,...
                    'String','Channels',...
                    'Units','normalized',...
                    'Position',[.755 .5 .225 .4]);

st_Select.ChList    = uicontrol(st_hToolbar.Select,...
                    'Style','popupmenu',...
                    'BackgroundColor','w',...
                    'FontSize',.8*st_Letter.toolcontrol,...
                    'String','1',...
                    'Value',1,...
                    'Units','normalized',...
                    'Position',[.755 .15 .225 .4],...
                    'CallBack',@f_AxeSetVertPosition);

waitbar(13/s_BuildingSteps)                

%% - [Controls] << Selection Panels >> (Panel Selection)
% Building of filter controls
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

st_Select.FilterPanel    = uicontrol(st_hToolbar.Visualize,...
                        'Style','checkbox',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Filter Channel Panel',...
                        'Value',0,...
                        'Units','normalized',...
                        'Position',[.05 .51 .45 .4],...
                        'CallBack',@f_PanelConfig);    
                    
st_Select.TimFrqPanel    = uicontrol(st_hToolbar.Visualize,...
                        'Style','checkbox',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Time-Frequency Panel',...
                        'Value',0,...
                        'Units','normalized',...
                        'Position',[.05 .01 .45 .4],...
                        'CallBack',@f_PanelConfig);                      

st_Select.ToolsLabel    = uicontrol(st_hToolbar.Visualize,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Tools Panel',...
                        'Units','normalized',...
                        'Position',[.55 .5 .4 .4]);

st_Select.ToolList      = uicontrol(st_hToolbar.Visualize,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','Filter|Time-Frequency|Cursor-Segment Analysis',...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.55 .15 .4 .4],...
                        'CallBack',@f_PanelsViewControls);
                    
waitbar(14/s_BuildingSteps)                    

%% - [Controls] << Selection Panels >> - (Filter)
% Controls for auxiliary panel: Filter
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Notch Filter Selection
st_Filter.notchLabel   = uicontrol(st_hToolPanel.Filter,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','NotchFilt ',...
                        'Units','normalized',...
                        'Position',[.01 .5 .08 .4]);

st_Filter.notchList    = uicontrol(st_hToolPanel.Filter,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','Off|50 Hz|60 Hz|50 Hz & Harm|60 Hz & Harm',...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.01 .15 .08 .4],...
                        'CallBack',@f_FilterNotch);

%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Filter Frequency Selection

% Notch Separator
st_Filter.SeparatorNotch = uipanel(st_hToolPanel.Filter,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.1 0 .001 1],...
                        'BorderType','etchedin',...
                        'BorderWidth',1);
                    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Channel Selection

st_Filter.ChButt        = uicontrol(st_hToolPanel.Filter,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...     
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','Select Ch',...
                        'Units','normalized',...
                        'Position',[.11 .0 .08 1],...
                        'CallBack',@f_FilterAddCht);
                    
st_Filter.AllChk        = uicontrol(st_hToolPanel.Filter,...
                        'Style','checkbox',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','All Ch',...
                        'Value',0,...
                        'Units','normalized',...
                        'Position',[.2 .15 .07 .4],...
                        'CallBack',@f_FilterSelectAll);                      
                    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                   
% Left Separator
st_Filter.SeparatorLeft  = uipanel(st_hToolPanel.Filter,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.28 0 .001 1],...
                        'BorderType','etchedin',...
                        'BorderWidth',1);
                    
% Type Filter Selection
st_Filter.FiltTypLabel   = uicontrol(st_hToolPanel.Filter,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Type ',...
                        'Units','normalized',...
                        'Position',[.29 .5 .08 .4]);

st_Filter.FiltTyp       = uicontrol(st_hToolPanel.Filter,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol*.8,...
                        'String','IIR|FIR',...
                        'Units','normalized',...
                        'Position',[.29 .15 .08 .4],...
                        'CallBack',{});
                    
% Low Frequency Selection
st_Filter.FiltLowLabel   = uicontrol(st_hToolPanel.Filter,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','LowFreq ',...
                        'Units','normalized',...
                        'Position',[.38 .5 .08 .4]);

st_Filter.FiltLowText   = uicontrol(st_hToolPanel.Filter,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol*.9,...
                        'String',[],...
                        'Units','normalized',...
                        'Position',[.38 .01 .08 .5],...
                        'CallBack',{});
                    
% High Frequency Selection
st_Filter.FiltHighLabel   = uicontrol(st_hToolPanel.Filter,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','HighFreq ',...
                        'Units','normalized',...
                        'Position',[.47 .5 .08 .4]);

st_Filter.FiltHighText   = uicontrol(st_hToolPanel.Filter,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol*.9,...
                        'String',[],...
                        'Units','normalized',...
                        'Position',[.47 .01 .08 .5],...
                        'CallBack',{});
                    
% Set Filter button
st_Filter.FiltSetButton  = uicontrol(st_hToolPanel.Filter,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'HorizontalAlignment','center',...  
                        'String','Set',...
                        'FontSize',st_Letter.toolcontrol*.8,...
                        'Position',[.57 .0 .1 1],...
                        'CallBack',@f_FilterProcess);   
                    
% Rigth Separator
st_Filter.SeparatorRigth = uipanel(st_hToolPanel.Filter,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.68 0 .001 1],...
                        'BorderType','etchedin',...
                        'BorderWidth',1);                    
                    

% Filter Panel controls
st_Filter.FiltAmpLabel   = uicontrol(st_hToolPanel.Filter,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','AmpScale',...
                        'Units','normalized',...
                        'Position',[.69 .5 .09 .4]);
                    
st_Filter.FiltAmpScale   = uicontrol(st_hToolPanel.Filter,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String',num2str(v_AmpliScales),...
                        'Value',5,...
                        'Units','normalized',...
                        'Position',[.69 .15 .09 .4],...
                        'CallBack',@f_FilterScaleChange);
                                        
% Last Separator
st_Filter.SeparatorLast = uipanel(st_hToolPanel.Filter,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.79 0 .001 1],...
                        'BorderType','etchedin',...
                        'BorderWidth',1);   
                    

% Reset Filter button
st_Filter.FiltResetButt  = uicontrol(st_hToolPanel.Filter,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'HorizontalAlignment','center',...  
                        'String','Reset',...
                        'FontSize',st_Letter.toolcontrol*.8,...
                        'Position',[.8 0 .095 1],...
                        'CallBack',@f_FilterReset); 
                    
% Remove Channel Filter button
st_Filter.FiltRemoveButt  = uicontrol(st_hToolPanel.Filter,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'HorizontalAlignment','center',...  
                        'String','Remove Channels',...
                        'FontSize',st_Letter.toolcontrol*.8,...
                        'Position',[.895 0 .095 1],...
                        'CallBack',@f_FilterRemoveChannel);              
waitbar(15/s_BuildingSteps)                    

%% - [Controls] << Selection Panels >> - (Time - Frequency)
% Controls for auxiliary panel: Visualize Time - Frequency
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% --- Select Channel ---

st_TimeFreq.ChLabel  = uicontrol(st_hToolPanel.TimeFreq,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toollabel*.7,...
                    'String','Channel',...
                    'Units','normalized',...
                    'Position',[.01 .5 .1 .4]);
                    
st_TimeFreq.ChList   = uicontrol(st_hToolPanel.TimeFreq,...
                    'Style','popupmenu',...
                    'BackgroundColor','w',...
                    'FontSize',.8*st_Letter.toolcontrol,...
                    'Units','normalized',...
                    'String',' ',...
                    'Position',[.01 .15 .1 .4]);
                    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Time-Frequency Selection

% Left Separator
st_TimeFreq.SeparatorLeft	= uipanel(st_hToolPanel.TimeFreq,...
                            'BackgroundColor',v_FigColor,...
                            'Position',[.12 0 .001 1],...
                            'BorderType','etchedin',...
                            'BorderWidth',1);
                    
% Low Frequency Selection  
st_TimeFreq.FreqLabIni	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','LowFreq',...
                        'Units','normalized',...
                        'Position',[.13 .5 .07 .4]);

st_TimeFreq.FreqTxtIni  = uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','0',...
                        'Units','normalized',...
                        'Position',[.13 .01 .07 .5]);
                    
% High Frequency Selection
st_TimeFreq.FreqLabEnd	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','HighFreq',...
                        'Units','normalized',...
                        'Position',[.21 .5 .07 .4]);
                    
st_TimeFreq.FreqTxtEnd	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','Inf',...
                        'Units','normalized',...
                        'Position',[.21 .01 .07 .5]);
                    
% High Frequency Selection
st_TimeFreq.FreqLabRes	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','ResFreq',...
                        'Units','normalized',...
                        'Position',[.29 .5 .07 .4]);
                    
st_TimeFreq.FreqTxtRes	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','64',...
                        'Units','normalized',...
                        'Position',[.29 .01 .07 .5]); 
                    
% Anti-Aliasing               
st_TimeFreq.AliasingChk	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','checkbox',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Aliasing Filter',...
                        'Value',0,...
                        'Units','normalized',...
                        'Position',[.37 .15 .11 .4]);                     
                            
% Compute Button                    
st_TimeFreq.SetButton    = uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Compute',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.49 0 .1 1],...
                        'CallBack',@f_TimeFreqProcess);     

% Rigth Separator
st_TimeFreq.SeparatorRigth  = uipanel(st_hToolPanel.TimeFreq,...
                            'BackgroundColor',v_FigColor,...
                            'Position',[.6 0 .001 1],...
                            'BorderType','etchedin',...
                            'BorderWidth',1);        
                    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Time-Frequency Visualization Options

st_TimeFreq.LabMetName	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','ViewMethod',...
                        'Units','normalized',...
                        'Position',[.61 .5 .07 .4]);
                    
st_TimeFreq.MethodMenu	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'Units','normalized',...
                        'String',v_TFVisMethod,...
                        'Value',1,...
                        'Position',[.61 .15 .07 .4]);
                    
st_TimeFreq.LabColormap	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Colormap',...
                        'Units','normalized',...
                        'Position',[.69 .5 .07 .4]);
                    
st_TimeFreq.Colormap	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'Units','normalized',...
                        'Value',10,...       
                        'String',v_Colormap,...
                        'Position',[.69 .15 .07 .4]);  
                    
                    
st_TimeFreq.LabScale	= uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Scale[0-1]',...
                        'Units','normalized',...
                        'Position',[.77 .5 .07 .4]);

st_TimeFreq.Scale       = uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String','1',...
                        'Units','normalized',...
                        'Position',[.77 .01 .07 .5]);

% Calculate Button   
st_TimeFreq.AcceptButton = uicontrol(st_hToolPanel.TimeFreq,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Set',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.85 0 .1 1],...
                        'CallBack',@f_TimeFreqSetOptions);                    

waitbar(16/s_BuildingSteps) 

%% - [Controls] << Selection Panels >> - (Cursors - Segment Analysis)
% Controls for auxiliary panel: Cursors - Segment Analysis
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% --- Select Channel ---

st_SegmAnalys.LabChName	= uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Channel',...
                        'Units','normalized',...
                        'Position',[.01 .5 .1 .4]);     
                    
st_SegmAnalys.ChList	= uicontrol(st_hToolPanel.Segment,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.8*st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.01 .15 .1 .4],...
                        'CallBack',@f_CursorSelectCh);  
                    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% % Cursor Selection

% Left Separator
st_SegmAnalys.SeparatorLeft = uipanel(st_hToolPanel.Segment,...
                            'BackgroundColor',v_FigColor,...
                            'Position',[.12 0 .001 1],...
                            'BorderType','etchedin',...
                            'BorderWidth',1);
                    
% Cursor_1 Button  
st_SegmAnalys.Cur1Button    = uicontrol(st_hToolPanel.Segment,...
                            'Style','togglebutton',...
                            'BackgroundColor',v_FigColor,...       
                            'FontSize',st_Letter.toolcontrol,...
                            'String','Cursor_1',...
                            'Units','normalized',...
                            'Position',[.13 0 .07 1],...
                            'CallBack',@f_CursorPlaceCur1);
                    
% Cursor_2 Button  
st_SegmAnalys.Cur2Button    = uicontrol(st_hToolPanel.Segment,...
                            'Style','togglebutton',...
                            'BackgroundColor',v_FigColor,...       
                            'FontSize',st_Letter.toolcontrol,...
                            'String','Cursor_2',...
                            'Units','normalized',...
                            'Position',[.2 0 .07 1],...
                            'CallBack',@f_CursorPlaceCur2);

% Right Separator
st_SegmAnalys.SeparatorRight = uipanel(st_hToolPanel.Segment,...
                            'BackgroundColor',v_FigColor,...
                            'Position',[.28 0 .001 1],...
                            'BorderType','etchedin',...
                            'BorderWidth',1);

% Individual Cursor Info
st_SegmAnalys.Cur1PosXLab    = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','Cur1_x',...
                            'Units','normalized',...
                            'Position',[.29 .5 .05 .4]);   
                    
st_SegmAnalys.Cur2PosXLab    = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','Cur2_x',...
                            'Units','normalized',...
                            'Position',[.29 .01 .05 .4]);  
                    
st_SegmAnalys.Cur1PosX      = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'ForegroundColor','b',...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','-',...
                            'Units','normalized',...
                            'Position',[.35 .5 .07 .4]);   
                    
st_SegmAnalys.Cur2PosX      = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'ForegroundColor','b',...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','-',...
                            'Units','normalized',...
                            'Position',[.35 .01 .07 .4]);  
                    
st_SegmAnalys.Cur1PosYLab    = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','Cur1_y',...
                            'Units','normalized',...
                            'Position',[.43 .5 .05 .4]);   
                    
st_SegmAnalys.Cur2PosYLab    = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','Cur2_y',...
                            'Units','normalized',...
                            'Position',[.43 .01 .05 .4]);  
                    
st_SegmAnalys.Cur1PosY	= uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.49 .5 .07 .4]);   
                    
st_SegmAnalys.Cur2PosY	= uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.49 .01 .07 .4]);                             
                    
% Dual Cursor Info
st_SegmAnalys.TimeIntLab	= uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','TimeInt',...
                            'Units','normalized',...
                            'Position',[.57 .5 .05 .4]);   
                    
st_SegmAnalys.AvgValLab     = uicontrol(st_hToolPanel.Segment,...
                            'Style','text',...
                            'BackgroundColor',v_FigColor,...
                            'HorizontalAlignment','left',...      
                            'FontSize',st_Letter.toollabel*.7,...
                            'String','AvgVal',...
                            'Units','normalized',...
                            'Position',[.57 .01 .05 .4]);  
                    
st_SegmAnalys.TimeInt    = uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.63 .5 .07 .4]);   
                    
st_SegmAnalys.AvgVal    = uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.63 .01 .07 .4]);  
                    
st_SegmAnalys.MinValLab	 = uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','MinVal',...
                        'Units','normalized',...
                        'Position',[.71 .5 .05 .4]);   
                    
st_SegmAnalys.MaxValLab	= uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','MaxVal',...
                        'Units','normalized',...
                        'Position',[.71 .01 .05 .4]);  
                    
st_SegmAnalys.MinVal    = uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.77 .5 .07 .4]);   
                    
st_SegmAnalys.MaxVal    = uicontrol(st_hToolPanel.Segment,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','0',...
                        'Units','normalized',...
                        'Position',[.77 .01 .07 .4]);                   

% Button Separator
st_SegmAnalys.SeparatorButt = uipanel(st_hToolPanel.Segment,...
                            'BackgroundColor',v_FigColor,...
                            'Position',[.85 0 .001 1],...
                            'BorderType','etchedin',...
                            'BorderWidth',1);
                    
% Calculate Button   
st_SegmAnalys.PowerSpectButton = uicontrol(st_hToolPanel.Segment,...
                            'Style','togglebutton',...
                            'BackgroundColor',v_FigColor,...       
                            'FontSize',st_Letter.toolcontrol,...
                            'String','Power Spectrum',...
                            'Units','normalized',...
                            'Enable','On',...
                            'Position',[.86 0 .12 1],...
                            'CallBack',@f_CursorPSD);

waitbar(17/s_BuildingSteps)

%% - [Controls] Main Panel Objects
% Controls and panels for Signal Visualization Panel

%Panel for Signal Background
st_hPanelObj.Panel      = uipanel(st_hAxesPanel.Signal,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 .04 1 .94],...
                        'BorderType','beveledin',...
                        'BorderWidth',2);
                
st_hPanelObj.SigPanel   = uipanel(st_hPanelObj.Panel,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 .25 1 .75],...
                        'BorderType','none',...
                        'BorderWidth',0);

st_hPanelObj.TFPanel    = uipanel(st_hPanelObj.Panel,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 0 1 .25],...
                        'Visible','off',...
                        'BorderType','none',...
                        'BorderWidth',0);
                
st_hPanelObj.FiltPanel  = uipanel(st_hPanelObj.Panel,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 .75 1 .25],...
                        'Visible','off',...
                        'BorderType','none',...
                        'BorderWidth',0);                

st_hPanelObj.PSD        = uipanel(st_hPanelObj.Panel,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.7 .7 .3 .3],...
                        'BorderType','etchedout',...
                        'BorderWidth',1,...
                        'Visible','off');
                                
% Vertical Controls (Buttons)
st_hPanelObj.PanelB     = uipanel(st_hAxesPanel.Signal,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.97 0 .03 .04],...
                        'BorderType','line',...
                        'BorderWidth',.7);
                
st_hPanelObj.LinesBup	= uicontrol(st_hPanelObj.PanelB,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.ButtomUp,...
                        'String',[],...
                        'Position',[0 .5 1 .5],...
                        'CallBack',@f_LinesUpDown);        
                    
st_hPanelObj.LinesBdown	= uicontrol(st_hPanelObj.PanelB,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.ButtomDown,...
                        'String',[],...
                        'Position',[0 0 1 .5],...
                        'CallBack',@f_LinesUpDown); 

% Cursor Controls
st_hPanelObj.PanelCur   = uipanel(st_hAxesPanel.Signal,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 .98 1 .02],...
                        'BorderType','beveledin',...
                        'BorderWidth',1);
                                                
% Horizontal slider
st_hPanelObj.SliderH    = uicontrol(st_hAxesPanel.Signal,...
                        'Style','slider',...
                        'Units','normalized',...
                        'Value',0,...
                        'Enable','off',...
                        'Interruptible','off',... 
                        'Position',[.1 0 .87 .02],...
                        'CallBack',@f_ObjectHorSliderVal);

% Panel for position of axe scope                
st_hPanelObj.AxeScope   = uipanel(st_hAxesPanel.Signal,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[.1 .02 0.87 .02],...
                        'BorderType','beveledin',...
                        'Clipping','on',...
                        'Visible','on');  
                
% Panel for position Info Text                
st_hPanelObj.PanelTxt   = uipanel(st_hAxesPanel.Signal,...
                        'BackgroundColor',v_AxeColor,...
                        'Position',[0 0 .1 .04],...
                        'BorderType','beveledin',...
                        'BorderWidth',1);  
                
% Text for position Info
st_hPanelObj.TextInfo   = uicontrol(st_hPanelObj.PanelTxt,...
                        'Style','pushbutton',...
                        'Units','normalized',...
                        'BackgroundColor',v_AxeColor,...
                        'HorizontalAlignment','center',...           
                        'FontSize',st_Letter.signalpos,...
                        'FontWeight','bold',...
                        'String','00:00:00.00',...
                        'Position',[0 0 1 1],...
                        'CallBack',@f_AxeSetIniTime);

waitbar(18/s_BuildingSteps)

%% - [Controls] << Auxiliary Figures >> - (Channel Montage)
% Controls and panels for auxiliary figure: Channel Assembly

st_MontageCh.MontageLab  = uicontrol(st_hFigure.MontageCh,...  
                        'Style','text',...                  
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Montage  ',...
                        'Units','normalized',...
                        'Position',[.05 .83 .4 .1]);
                    
st_MontageCh.Montage    = uicontrol(st_hFigure.MontageCh,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Bipolar|Averaged|Load',...
                        'Units','normalized',...
                        'Position',[.48 .85 .47 .1],...
                        'CallBack',@f_MontageSelect); 

st_MontageCh.Ch1Lab     = uicontrol(st_hFigure.MontageCh,...  
                        'Style','text',...                  
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Ch_1 ',...
                        'Units','normalized',...
                        'Position',[.05 .65 .4 .1]);
                    
st_MontageCh.Ch2Lab     = uicontrol(st_hFigure.MontageCh,...  
                        'Style','text',...                  
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Ch_2 ',...
                        'Units','normalized',...
                        'Position',[.5 .65 .4 .1]);    
                    
st_MontageCh.SelCh1     = uicontrol(st_hFigure.MontageCh,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Channel',...
                        'Units','normalized',...
                        'Position',[.05 .55 .44 .1]);   
                    
st_MontageCh.SelCh2     = uicontrol(st_hFigure.MontageCh,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Channel',...
                        'Units','normalized',...
                        'Position',[.51 .55 .44 .1]);  
                    
st_MontageCh.ListCh2     = uicontrol(st_hFigure.MontageCh,...
                        'Style','listbox',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Channel',...
                        'Visible','off',...
                        'Min',0,'Max',10,...
                        'Units','normalized',...
                        'Position',[.51 .05 .44 .6]); 
                    
st_MontageCh.OkButt 	= uicontrol(st_hFigure.MontageCh,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','OK',...
                        'Units','normalized',...
                        'Position',[.05 .35 .45 .15],...
                        'CallBack',@f_MontageOK); 
                    

st_MontageCh.SaveButt	= uicontrol(st_hFigure.MontageCh,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Save',...
                        'Units','normalized',...
                        'Position',[.05 .2 .45 .15],...
                        'CallBack',@f_MontageSave);                     
                    
st_MontageCh.CancelButton = uicontrol(st_hFigure.MontageCh,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Cancel',...
                        'Units','normalized',...
                        'Position',[.05 .05 .45 .15],...
                        'CallBack',@f_FigureAuxCloseAction); 

waitbar(19/s_BuildingSteps)                    
                    
%% - [Controls] << Auxiliary Figures >> - (Select Channels)
% Controls and panels for auxiliary figure: Select Channels

% Info Panel -----------                
st_SelCht.ChtPanel      = uipanel(st_hFigure.SelCh,...
                        'BackgroundColor',v_FigColor,...
                        'Title','',...
                        'Position',[0 0.2 1 0.8],...
                        'BorderType','none');
  
st_SelCht.FileListLab   = uicontrol(st_SelCht.ChtPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','File to display: ',...
                        'Units','normalized',...
                        'Position',[.05 .9 .18 .05]);                   
                        
st_SelCht.FileList      = uicontrol(st_SelCht.ChtPanel,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.2 .9 .6 .05],...
                        'CallBack',{});  
                        
st_SelCht.AddFiles      = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','+ Files',...
                        'Units','normalized',...
                        'Position',[.8 .88 .075 .07],...
                        'CallBack',@f_FileAdd);  
                        
st_SelCht.DeleteFiles   = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','- Files',...
                        'Units','normalized',...
                        'Position',[.875 .88 .075 .07],...
                        'CallBack',@f_FileDelete); 
                
st_SelCht.ChListLab     = uicontrol(st_SelCht.ChtPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Channels: ',...
                        'Units','normalized',...
                        'Position',[.05 .8 .25 .05]);                   
                      
st_SelCht.ChList        = uicontrol(st_SelCht.ChtPanel,...
                        'Style','listbox',...
                        'BackgroundColor','w',...
                        'Units','normalized',...
                        'Max',10,...
                        'Min',0,...
                        'Value',[],...
                        'Position',[.05 .1 .25 .7]);

st_SelCht.MontageButt	= uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','+ Montage',...
                        'Units','normalized',...
                        'Position',[.15 .05 .15 .05],...
                        'CallBack',@f_MontageAdd);

st_SelCht.SelChLab      = uicontrol(st_SelCht.ChtPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Selected Channels',...
                        'Units','normalized',...
                        'Position',[.32 .8 .3 .05]);
                    
st_SelCht.AddCh         = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Add',...
                        'Units','normalized',...
                        'Position',[.32 .75 .15 .05],...
                        'CallBack',@f_InfoChAdd);    
                    
st_SelCht.RmvCh         = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Remove',...
                        'Units','normalized',...
                        'Position',[.47 .75 .15 .05],...
                        'CallBack',@f_InfoChRemove);  
                    
st_SelCht.UpCh          = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Up',...
                        'Units','normalized',...
                        'Position',[.65 .75 .15 .05],...
                        'CallBack',@f_InfoChUp);       
                    
st_SelCht.DownCh        = uicontrol(st_SelCht.ChtPanel,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Down',...
                        'Units','normalized',...
                        'Position',[.80 .75 .15 .05],...
                        'CallBack',@f_InfoChDown);                      
                    
% Individual signal info --------------------------------
                    
st_SelCht.InfoTable     = uitable(st_SelCht.ChtPanel,...
                        'BackgroundColor',[1 1 1],...
                        'ColumnEditable',[],...
                        'ColumnName',{'Channel','Sampling',...
                                        'Time(min)','Montage'},...
                        'RowName','numbered',...
                        'FontSize',st_Letter.toolcontrol,...
                        'Units','normalized',...
                        'Position',[.32 .05 .63 .67],...
                        'CellSelectionCallback',...
                        @(hObj,stEvnt)set(hObj,'UserData',stEvnt.Indices));

% Time Panel -----------                    
st_SelCht.TimePanel     = uipanel(st_hFigure.SelCh,...
                        'BackgroundColor',v_FigColor,...
                        'FontWeight','Bold',...
                        'TitlePosition','centertop',...
                        'Title','Load Time (min)',...
                        'Position',[.05 .05 .45 .15],...
                        'BorderType','line',...
                        'BorderWidth',1);
                    
st_SelCht.TimeLoad      = uicontrol(st_SelCht.TimePanel,...
                        'Style','togglebutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Load Segment',...
                        'Units','normalized',...
                        'Position',[.02 .05 .3 .85],...
                        'CallBack',@f_ObjectTimeLoad);

                    
% Time Labels ----------  
st_SelCht.TimeLabIni    = uicontrol(st_SelCht.TimePanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Start Time',...
                        'Units','normalized',...
                        'Position',[.34 .5 .3 .4]);
                    
st_SelCht.TimeLabEnd    = uicontrol(st_SelCht.TimePanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','End Time',...
                        'Units','normalized',...
                        'Position',[.66 .5 .3 .4]);
                    
% Time Texts -----------  
st_SelCht.TimeTxtIni    = uicontrol(st_SelCht.TimePanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','0',...
                        'Enable','off',...
                        'Units','normalized',...
                        'Position',[.34 .05 .3 .5]);
                    
st_SelCht.TimeTxtEnd    = uicontrol(st_SelCht.TimePanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Inf',...
                        'Enable','off',...
                        'Units','normalized',...
                        'Position',[.66 .05 .3 .5]);

% Buttons --------------   
st_SelCht.DisplayButt    = uicontrol(st_hFigure.SelCh,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Display Ch',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.55 .12 .2 .07],...
                        'CallBack',@f_ChannelDisplay);       
                    
st_SelCht.ClearButton    = uicontrol(st_hFigure.SelCh,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Clear Info',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.55 .05 .2 .07],...
                        'CallBack',@f_InfoClear);    
                                    
st_SelCht.ApplyButton    = uicontrol(st_hFigure.SelCh,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Apply',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.75 .12 .2 .07],...
                        'CallBack',@f_ChannelApply);
                    
st_SelCht.CancelButton  = uicontrol(st_hFigure.SelCh,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Cancel',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.75 .05 .2 .07],...
                        'CallBack',@f_FigureAuxCloseAction);    

waitbar(20/s_BuildingSteps)       

%% - [Controls] << Auxiliary Figures >> - (PSD Cursors)
% Controls and panels for auxiliary figure: Welch PSD

st_PSDCursor.Label  = uicontrol(st_hPanelObj.PSD,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'ForegroundColor','b',...
                    'HorizontalAlignment','center',...
                    'FontSize',1.2*st_Letter.toolcontrol,...
                    'String',' - ',...
                    'Units','normalized',...
                    'Position',[.02 .85 .15 .1]);

st_PSDCursor.PSDContr = uipanel(st_hPanelObj.PSD,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 0 .2 1],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);
                
st_PSDCursor.TxMaxFrq = uicontrol(st_PSDCursor.PSDContr,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','MaxFreq',...
                    'Units','normalized',...
                    'Position',[.01 .7 .98 .08]);
                
st_PSDCursor.MaxFrq = uicontrol(st_PSDCursor.PSDContr,...
                    'Style','edit',...
                    'BackgroundColor','w',...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','inf',...
                    'Units','normalized',...
                    'Position',[.01 .6 .98 .1]);                


st_PSDCursor.TxMinFrq = uicontrol(st_PSDCursor.PSDContr,...
                    'Style','text',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','MinFreq',...
                    'Units','normalized',...
                    'Position',[.01 .45 .98 .08]);
                
st_PSDCursor.MinFrq = uicontrol(st_PSDCursor.PSDContr,...
                    'Style','edit',...
                    'BackgroundColor','w',...
                    'HorizontalAlignment','center',...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','0',...
                    'Units','normalized',...
                    'Position',[.01 .35 .98 .1]);    
                
st_PSDCursor.LogCont= uicontrol(st_PSDCursor.PSDContr,...
                    'Style','checkbox',...
                    'BackgroundColor',v_FigColor,...
                    'HorizontalAlignment','left',...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','Log10',...
                    'Value',0,...
                    'Units','normalized',...
                    'Position',[.01 .20 .98 .1]);

st_PSDCursor.SetButt	= uicontrol(st_PSDCursor.PSDContr,...
                    'Style','pushbutton',...
                    'BackgroundColor',v_FigColor,...
                    'FontSize',st_Letter.toolcontrol,...
                    'String','Set',...
                    'Units','normalized',...
                    'Position',[.01 .01 .98 .15],...
                    'CallBack',@f_CursorPSDSet);
                    
st_PSDCursor.Axes   = axes('Parent',st_hPanelObj.PSD,... 
                    'FontSize',0.9*st_Letter.toolcontrol,...
                    'Position',[.3 .2 .67 .77]);
                
set(get(st_PSDCursor.Axes,'XLabel'),...
    'FontSize',0.9*st_Letter.toolcontrol,...
    'String','Frequency (Hz)')

set(get(st_PSDCursor.Axes,'YLabel'),...
    'FontSize',0.9*st_Letter.toolcontrol,...
    'String','Power Spectrum Density')

%% - [Controls] << Auxiliary Figures >> - (HFO Detection Methods) - [**INSERT!**]
% Controls and panels for auxiliary figure: Detection Methods
% For a new method insert the new panel at the end of this cell 

% Selection Controls -----------

st_HFOMethod.ChannelLab = uicontrol(st_hFigure.HFOMethods,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Select Channels: ',...
                        'Units','normalized',...
                        'Position',[.05 .9 .3 .06]);

st_HFOMethod.ChannelList  = uicontrol(st_hFigure.HFOMethods,...
                        'Style','list',...
                        'BackgroundColor','w',...     
                        'FontSize',st_Letter.toolcontrol,...
                        'String','',...
                        'Max',10,...
                        'Min',0,...
                        'Value',0,...
                        'Units','normalized',...
                        'Position',[.05 .25 .3 .65],...
                        'CallBack',{});
                                        
% Save Panel -----------         
st_HFOMethod.SavePanel = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'Title','Save',...
                        'HighlightColor',[.9 .9 .9],...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Position',[.05 .05 .65 .18]);      
                    
st_HFOMethod.SaveFileLab = uicontrol(st_HFOMethod.SavePanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','File: ',...
                        'Units','normalized',...
                        'Position',[.03 .55 .1 .45]);
                    
st_HFOMethod.SaveFile   = uicontrol(st_HFOMethod.SavePanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...     
                        'FontSize',st_Letter.toolcontrol,...
                        'String','*_VIS',...
                        'TooltipString',['Type * in any place to mantain' ...
                                        ' the original file name'],...
                        'HorizontalAlignment','left',... 
                        'Units','normalized',...
                        'Position',[.13 .55 .84 .45]);    
                         
st_HFOMethod.SavePathLab = uicontrol(st_HFOMethod.SavePanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Path: ',...
                        'Units','normalized',...
                        'Position',[.03 .05 .1 .45]);
                    
st_HFOMethod.SavePath   = uicontrol(st_HFOMethod.SavePanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...     
                        'FontSize',st_Letter.toolcontrol,...
                        'String','./Analysis/',...
                        'HorizontalAlignment','left',... 
                        'Units','normalized',...
                        'Position',[.13 .05 .79 .45]);    
                    
st_HFOMethod.SavePathB = uicontrol(st_HFOMethod.SavePanel,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','...',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.92 .05 .05 .45],...
                        'CallBack',@f_HFOSavePath);                   
                    
% Buttons --------------                      
st_HFOMethod.HFOAnalysB = uicontrol(st_hFigure.HFOMethods,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Analyze HFO',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.72 .13 .23 .08],...
                        'CallBack',@f_HFORunAnalysis);                

st_HFOMethod.CancelButton = uicontrol(st_hFigure.HFOMethods,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Cancel',...
                        'Units','normalized',...
                        'Enable','On',...
                        'Position',[.72 .05 .23 .08],...
                        'CallBack',@f_FigureAuxCloseAction);   
                    
% Selection Panels -----------         
st_HFOMethod.MethodLab  = uicontrol(st_hFigure.HFOMethods,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Select analysis method ',...
                        'Units','normalized',...
                        'Position',[.37 .9 .25 .06]);
                    
st_HFOMethod.MethodList  = uicontrol(st_hFigure.HFOMethods,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',st_Letter.toolcontrol,...
                        'String',v_HFOMethodsList,...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.37 .8 .25 .1],...
                        'CallBack',@f_HFOSelectMethod);
                    
st_HFOMethod.CommonInfo = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Frequency Limits (Hz)',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Position',[.65 .8 .3 .16]); 
                                                         
% Common Panel Labels ----------  
st_HFOMethod.FreqLabIni = uicontrol(st_HFOMethod.CommonInfo,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Min',...
                        'Units','normalized',...
                        'Position',[.05 .65 .425 .3]);
                    
st_HFOMethod.FreqLabEnd = uicontrol(st_HFOMethod.CommonInfo,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Max',...
                        'Units','normalized',...
                        'Position',[.525 .65 .425 .3]);
                                        
% Common Panel Controls -----------  
st_HFOMethod.FreqTxtMin = uicontrol(st_HFOMethod.CommonInfo,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',num2str(st_HFOData.s_FreqIni),...
                        'Units','normalized',...
                        'Position',[.05 .075 .425 .5],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.FreqTxtMax = uicontrol(st_HFOMethod.CommonInfo,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',num2str(st_HFOData.s_FreqEnd),...
                        'Units','normalized',...
                        'Position',[.525 .075 .425 .5],...
                        'CallBack',@f_CheckIsNumber);
                                        
% HFO Setting Panel Controls -----------  
st_HFOMethod.VISPanel    = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Detection Parameters',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Visible','on',...
                        'Position',[.37 .25 .58 .55]);   
                    
st_HFOMethod.STEPanel    = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Detection Parameters',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Visible','off',...
                        'Position',[.37 .25 .58 .55]);   
                    

st_HFOMethod.SLLPanel   = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Detection Parameters',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Visible','off',...
                        'Position',[.37 .25 .58 .55]);

st_HFOMethod.HILPanel   = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Detection Parameters',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Visible','off',...
                        'Position',[.37 .25 .58 .55]);
                    
st_HFOMethod.MNIPanel   = uipanel(st_hFigure.HFOMethods,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Detection Parameters',...
                        'BorderType','etchedin',...
                        'BorderWidth',1,...
                        'Visible','off',...
                        'Position',[.37 .25 .58 .55]);

% Insert a new m=panel to add setting for a new method
% Example: 
% st_HFOMethod.NMTPanel    = uipanel(st_hFigure.HFOMethods,...
%                         'BackgroundColor',v_FigColor,...
%                         'HighlightColor',[.9 .9 .9],...
%                         'Title','Detection Parameters',...
%                         'BorderType','etchedin',...
%                         'BorderWidth',1,...
%                         'Visible','off',...
%                         'Position',[.37 .25 .58 .55]);                    
 
%% - [Controls] || HFO DETECTION - PANEL || VIS ||
% Sub-Panels <<Visual Marking>> ||||||||||||||||||||||||||||||||||||||||                    
% Labels ------
  
st_HFOMethod.VIS_Message  = uicontrol(st_HFOMethod.VISPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',st_Letter.toollabel,...
                        'String',[{'Consideretions for visual marking:'};...
                        {' '};...
                        {'- Channels must been displayed'};....
                        {'- Select only an electrode'};....
                        {['- For navigate through the signals use '...
                        'controls normally']};....
                        {['- Active filter of electrode analyzed ' ,...
                        'in frequencies required']};....
                        {['- Active time-frequency plot of electrode '...
                        'analyzed in frequencies required']}],...
                        'Units','normalized',...
                        'Position',[.05 .05 .9 .9]);   
                 
%% - [Controls] || HFO DETECTION - PANEL || STE ||
% Sub-Panels <<Short-Time Energy >> |||||||||||||||||||||||||||||||||||||||
% Labels ------

st_HFOMethod.STE_EpoTimLab     = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Epoch (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .85 .2667 .1]);
                    
st_HFOMethod.STE_RMSwindLab     = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...    
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','RMS_Window (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .85 .2667 .1]);
                    
st_HFOMethod.STE_RMSsdThresLab  = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...    
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','RMS SD_Threshold',...
                        'Units','normalized',...
                        'Position',[.6834 .85 .2667 .1]);
                    
st_HFOMethod.STE_MinWinTimeLab  = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...    
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','MinWindow (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .55 .2667 .1]);
                    
st_HFOMethod.STE_MinTimeDelLab  = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Min GapTime (ms)',...
                        'Units','normalized',...
                        'Position',[.6834 .55 .2667 .1]);
                    
st_HFOMethod.STE_MinOscLab      = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Min Oscillations',...
                        'Units','normalized',...
                        'Position',[.3667 .25 .2667 .1]);
                    
st_HFOMethod.STE_SDPeakThrLab   = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Peak SD_Threshold',...
                        'Units','normalized',...
                        'Position',[.6834 .25 .2667 .1]);
                    
% Controls ---------

st_HFOMethod.STE_EpoTim  = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','600',...
                        'Units','normalized',...
                        'Position',[.05 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);                    

st_HFOMethod.STE_RMSwind = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','3',...
                        'Units','normalized',...
                        'Position',[.3667 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.STE_RMSsdThres = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','5',...
                        'Units','normalized',...
                        'Position',[.6834 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
 
st_HFOMethod.STE_MinWinTime = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','6',...
                        'Units','normalized',...
                        'Position',[.3667 .4 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.STE_MinTimeDel = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','10',...
                        'Units','normalized',...
                        'Position',[.6834 .4 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.STE_MinOsc     = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','6',...
                        'Units','normalized',...
                        'Position',[.3667 .1 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.STE_SDPeakThr  = uicontrol(st_HFOMethod.STEPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','3',...
                        'Units','normalized',...
                        'Position',[.6834 .1 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
%% - [Controls] || HFO DETECTION - PANEL || SLL ||
% Sub-Panels <<Short-Line Length>> ||||||||||||||||||||||||||||||||||||||||                    
% Labels ------

st_HFOMethod.SLL_EpoTimLab      = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Epoch (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .85 .2667 .1]);
                    
st_HFOMethod.SLL_FiltwindLab    = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Filter Window (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .85 .2667 .1]);
                    
st_HFOMethod.SLL_ThresPercLab   = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Threshold Percentil',...
                        'Units','normalized',...
                        'Position',[.3667 .55 .2667 .1]);
                    
st_HFOMethod.SLL_MinEvenTimeLab = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Event MinTime (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .25 .2667 .1]);
                    
% Controls ---------
st_HFOMethod.SLL_EpoTim  = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','180',...
                        'Units','normalized',...
                        'Position',[.05 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.SLL_Filtwind   = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','5',...
                        'Units','normalized',...
                        'Position',[.3667 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.SLL_ThresPerc  = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','97.5',...
                        'Units','normalized',...
                        'Position',[.3667 .4 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
 
st_HFOMethod.SLL_MinEvenTime = uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','12',...
                        'Units','normalized',...
                        'Position',[.3667 .1 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.SLL_CheckEq	= uicontrol(st_HFOMethod.SLLPanel,...
                        'Style','checkBox',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','HF Equalization',...
                        'Units','normalized',...
                        'Position',[.6667 .75 .2667 .1]);
                    

%% - [Controls] || HFO DETECTION - PANEL || HIL ||
% Sub-Panels <<Hilbert Detector>> ||||||||||||||||||||||||||||||||||||||||                    
% Labels ------

st_HFOMethod.HIL_EpoTimLab      = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Epoch (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .85 .2667 .1]);
                    
st_HFOMethod.HIL_SDThresLab    = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','SD Threshold',...
                        'Units','normalized',...
                        'Position',[.3667 .85 .2667 .1]);
                    
st_HFOMethod.HIL_MinTimeLab  = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Min EventTime (ms)',...
                        'Units','normalized',...
                        'Position',[.6834 .85 .2667 .1]);                    
                                        
% Controls ---------
st_HFOMethod.HIL_EpoTim  = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','3600',...
                        'Units','normalized',...
                        'Position',[.05 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.HIL_SDThres   = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','5',...
                        'Units','normalized',...
                        'Position',[.3667 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.HIL_MinTime = uicontrol(st_HFOMethod.HILPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','10',...
                        'Units','normalized',...
                        'Position',[.6834 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);

%% - [Controls] || HFO DETECTION - PANEL || MNI ||
% Sub-Panels <<MNI Detector>> ||||||||||||||||||||||||||||||||||||||||                    
% Labels ------

st_HFOMethod.MNI_EpoTimLab      = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Epoch (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .85 .2667 .1]);
                    
st_HFOMethod.MNI_EpoCHFLab      = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','CHF_Epoch (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .55 .2667 .1]);               
                    
st_HFOMethod.MNI_PerCHFLab      = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','CHF_Percentil',...
                        'Units','normalized',...
                        'Position',[.05 .25 .2667 .1]);
                    
st_HFOMethod.MNI_MinWinLab    = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','MinWindow (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .85 .2667 .1]);
                    
st_HFOMethod.MNI_MinGapLab    = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Min GapTime (ms)',...
                        'Units','normalized',...
                        'Position',[.3667 .55 .2667 .1]);
                    
st_HFOMethod.MNI_ThresPercLab   = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Threshold Percentil',...
                        'Units','normalized',...
                        'Position',[.3667 .25 .2667 .1]);

st_HFOMethod.MNIBaseline   = uipanel(st_HFOMethod.MNIPanel,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Baseline',...
                        'BorderType','line',...
                        'BorderWidth',1,...
                        'Visible','on',...
                        'Position',[.6834 .1 .2667 .9]);  

st_HFOMethod.MNI_BaseSegLab   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Segment (Sec)',...
                        'Units','normalized',...
                        'Position',[.05 .9 .9 .1]); 
                    
st_HFOMethod.MNI_BaseOveLab   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Shift',...
                        'Units','normalized',...
                        'Position',[.05 .65 .9 .1]); 
                    
st_HFOMethod.MNI_BaseThrLab   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','Threshold',...
                        'Units','normalized',...
                        'Position',[.05 .4 .9 .1]); 

st_HFOMethod.MNI_BaseMinLab   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','minBaseline (Sec/min)',...
                        'Units','normalized',...
                        'Position',[.05 .15 .9 .1]);                     
                    
% Controls ---------
st_HFOMethod.MNI_EpoTim  = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','10',...
                        'Units','normalized',...
                        'Position',[.05 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.MNI_EpoCHF   = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','60',...
                        'Units','normalized',...
                        'Position',[.05 .4 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.MNI_PerCHF   = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','95',...
                        'Units','normalized',...
                        'Position',[.05 .1 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);
                    
st_HFOMethod.MNI_MinWin  = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','10',...
                        'Units','normalized',...
                        'Position',[.3667 .7 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.MNI_MinGap   = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','10',...
                        'Units','normalized',...
                        'Position',[.3667 .4 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);        
                    
st_HFOMethod.MNI_ThresPerc = uicontrol(st_HFOMethod.MNIPanel,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','99.9999',...
                        'Units','normalized',...
                        'Position',[.3667 .1 .2667 .15],...
                        'CallBack',@f_CheckIsNumber);

st_HFOMethod.MNI_BaseSeg   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','125',...
                        'Units','normalized',...
                        'Position',[.05 .8 .9 .1]); 
                    
st_HFOMethod.MNI_BaseShift	= uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','0.5',...
                        'Units','normalized',...
                        'Position',[.05 .55 .9 .1]); 
                    
st_HFOMethod.MNI_BaseThr   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','0.67',...
                        'Units','normalized',...
                        'Position',[.05 .3 .9 .1]);                     

st_HFOMethod.MNI_BaseMin   = uicontrol(st_HFOMethod.MNIBaseline,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...     
                        'FontSize',0.7*st_Letter.toollabel,...
                        'String','5',...
                        'Units','normalized',...
                        'Position',[.05 .05 .9 .1]);      
                    
%% - [Controls] || HFO DETECTION - PANEL || New Method Objects || [**INSERT!**]

% Example:
% %% - [Controls] || HFO DETECTION - PANEL || XXX ||
% % Sub-Panels <<Time-Frequency Energy-Entropy >> |||||||||||||||||||||||||||
% % Labels ------
% 
% st_HFOMethod.XXX_EpoTimLab = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','text',...
%                         'BackgroundColor',v_FigColor,...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',0.7*st_Letter.toollabel,...
%                         'String','Epoch (Sec)',...
%                         'Units','normalized',...
%                         'Position',[.05 .85 .2667 .1]);
%                     
% st_HFOMethod.XXX_FreqResLb = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','text',...
%                         'BackgroundColor',v_FigColor,...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',0.7*st_Letter.toollabel,...
%                         'String','FreqResolution (Hz)',...
%                         'Units','normalized',...
%                         'Position',[.3667 .85 .2667 .1]);
%                     
% st_HFOMethod.XXX_ShftWndLb = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','text',...
%                         'BackgroundColor',v_FigColor,...
%                         'HorizontalAlignment','center',...    
%                         'FontSize',0.7*st_Letter.toollabel,...
%                         'String','Shift Epoch',...
%                         'Units','normalized',...
%                         'Position',[.6834 .85 .2667 .1]);
%                     
% st_HFOMethod.XXX_CoefThrLb  = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','text',...
%                         'BackgroundColor',v_FigColor,...
%                         'HorizontalAlignment','center',...
%                         'FontSize',0.7*st_Letter.toollabel,...
%                         'String','Coef Threshold',...
%                         'Units','normalized',...
%                         'Position',[.3667 .55 .2667 .1]);
%                     
% st_HFOMethod.XXX_minOscLb  = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','text',...
%                         'BackgroundColor',v_FigColor,...
%                         'HorizontalAlignment','center',...
%                         'FontSize',0.7*st_Letter.toollabel,...
%                         'String','Min Oscillations',...
%                         'Units','normalized',...
%                         'Position',[.6834 .55 .2667 .1]);
%                     
% % Controls ---------
% st_HFOMethod.XXX_EpoTim  = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','edit',...
%                         'BackgroundColor','w',...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',st_Letter.toolcontrol,...
%                         'String','0.7',...
%                         'Units','normalized',...
%                         'Position',[.05 .7 .2667 .15],...
%                         'CallBack',@f_CheckIsNumber);           
%                     
% st_HFOMethod.XXX_FreqRes    = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','edit',...
%                         'BackgroundColor','w',...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',st_Letter.toolcontrol,...
%                         'String','10',...
%                         'Units','normalized',...
%                         'Position',[.3667 .7 .2667 .15],...
%                         'CallBack',@f_CheckIsNumber);
%                     
% st_HFOMethod.XXX_ShftWnd = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','edit',...
%                         'BackgroundColor','w',...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',st_Letter.toolcontrol,...
%                         'String','0.2',...
%                         'Units','normalized',...
%                         'Position',[.6834 .7 .2667 .15],...
%                         'CallBack',@f_CheckIsNumber);
%  
% st_HFOMethod.XXX_CoefThr = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','edit',...
%                         'BackgroundColor','w',...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',st_Letter.toolcontrol,...
%                         'String','0.5',...
%                         'Units','normalized',...
%                         'Position',[.3667 .4 .2667 .15],...
%                         'CallBack',@f_CheckIsNumber);
%                     
% st_HFOMethod.XXX_minOsc = uicontrol(st_HFOMethod.NMTPanel,...
%                         'Style','edit',...
%                         'BackgroundColor','w',...
%                         'HorizontalAlignment','center',...      
%                         'FontSize',st_Letter.toolcontrol,...
%                         'String','4',...
%                         'Units','normalized',...
%                         'Position',[.6834 .4 .2667 .15],...
%                         'CallBack',@f_CheckIsNumber);

%% - [Controls] || VISUAL MARKING - PANEL || VIS ||  
% Controls and axes for visual marking method

st_VisualMark.ChannelLab     = uipanel(st_hToolbar.VisualMark,...
                        'BackgroundColor',v_FigColor,...
                        'HighlightColor',[.9 .9 .9],...
                        'Title','Channel',...
                        'BorderType','line',...
                        'BorderWidth',1,...
                        'Visible','on',...
                        'Position',[.05 .9 .9 .05]);

st_VisualMark.Channel     = uicontrol(st_VisualMark.ChannelLab,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'ForegroundColor','b',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]); 

%--------------------------------------------------------------------------  
st_VisualMark.EvFrame   = uipanel(st_hToolbar.VisualMark,...
                        'BackgroundColor',v_FigColor,...
                        'BorderType','none',...
                        'Units','normalized',...
                        'Position',[.05 .775 .9 .1]); 

st_VisualMark.EvIdxLabFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.333 .75 .333 .25]);   
                                        
st_VisualMark.EvFrqLabFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.666 .75 .333 .25]);   
%--------------------------------------------------------------------------                        
st_VisualMark.EvGamLabFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[0 .5 .333 .25]);   
                                        
st_VisualMark.EvRipLabFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[0 .25 .333 .25]);   
                                        
st_VisualMark.EvFRipLabFrame  = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[0 0 .333 .25]);  
%--------------------------------------------------------------------------      
st_VisualMark.EvGamIdxFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.333 .5 .333 .25]);   
                                        
st_VisualMark.EvRipIdxFrame   = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.333 .25 .333 .25]);   
                                        
st_VisualMark.EvFRipIdxFrame  = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.333 0 .333 .25]);  
%--------------------------------------------------------------------------                     
st_VisualMark.EvGamFreqFrame  = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.666 .5 .333 .25]);   
                                        
st_VisualMark.EvRipFreqFrame  = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.666 .25 .333 .25]);   
                                        
st_VisualMark.EvFRipFreqFrame = uipanel(st_VisualMark.EvFrame,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.666 0 .333 .25]);    
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                                         
st_VisualMark.EvLabIdx       = uicontrol(st_VisualMark.EvIdxLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Idx_Value',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_VisualMark.EvLabFrqIdx    = uicontrol(st_VisualMark.EvFrqLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','MaxFreq',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]); 
                                        
st_VisualMark.EvLabGamIdx    = uicontrol(st_VisualMark.EvGamLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Gamma: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_VisualMark.EvLabRipIdx    = uicontrol(st_VisualMark.EvRipLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Ripple: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_VisualMark.EvLabFRipIdx    = uicontrol(st_VisualMark.EvFRipLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','FastRipple: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);                      
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
st_VisualMark.EvGamIdx       = uicontrol(st_VisualMark.EvGamIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_VisualMark.EvRipIdx       = uicontrol(st_VisualMark.EvRipIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_VisualMark.EvFRipIdx       = uicontrol(st_VisualMark.EvFRipIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
%--------------------------------------------------------------------------                     
st_VisualMark.EvGamFreq       = uicontrol(st_VisualMark.EvGamFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_VisualMark.EvRipFreq        = uicontrol(st_VisualMark.EvRipFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_VisualMark.EvFRipFreq        = uicontrol(st_VisualMark.EvFRipFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor','b',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]); 
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

st_VisualMark.EvLabType = uicontrol(st_hToolbar.VisualMark,...
                        'Style','text',...
                        'BackgroundColor','k',...
                        'ForegroundColor','w',...      
                        'HorizontalAlignment','center',...      
                        'FontSize',.8*st_Letter.toollabel,...
                        'String','EventType',...
                        'Units','normalized',...
                        'Position',[.05 .725 .9 .025]); 
                    
st_VisualMark.EvType    = uicontrol(st_hToolbar.VisualMark,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'HorizontalAlignment','right',...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',['None|Gamma|Ripple|FastRipple|Spike|'...
                                'Artifact|Other'],...
                        'Units','normalized',...
                        'Position',[.05 .7 .9 .025]); 
                    
st_VisualMark.SetHFO = uicontrol(st_hToolbar.VisualMark,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Set HFO Event',...
                        'Units','normalized',...
                        'Position',[.05 .6 .9 .08],...
                        'CallBack',@f_HFOVisualSetEvent);                                          

st_VisualMark.FinishButton = uicontrol(st_hToolbar.VisualMark,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Finish',...
                        'Units','normalized',...
                        'Position',[.05 .025 .45 .08],...
                        'CallBack',@f_VisualFinishMarking);   
                    
st_VisualMark.CancelButton = uicontrol(st_hToolbar.VisualMark,...
                        'Style','pushbutton',...
                        'FontWeight','bold',...
                        'BackgroundColor',v_FigColor,...       
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Cancel',...
                        'Units','normalized',...
                        'Position',[.5 .025 .45 .08],...
                        'CallBack',@f_VisualCancel);  
                    
st_VisualMark.PSD   = axes('Parent',st_hToolbar.VisualMark,... 
                    'FontSize',0.7*st_Letter.toolcontrol,...
                    'Position',[.15 .18 .8 .4]);
                
set(get(st_VisualMark.PSD,'XLabel'),'String','Frequency (Hz)') 
set(get(st_VisualMark.PSD,'YLabel'),'String','Amplitude Mean Time-Freq') 

waitbar(21/s_BuildingSteps)
             
%% [GUI] End GUI Building
waitbar(22/s_BuildingSteps)                    
close(hw_Bar)
pause(1)
set(st_hFigure.main,'Visible','on')                    

%% [Functions] Figure - General Functions
% In this section are indicated the nested functions for Auxliary Figures
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FigureAuxCloseAction(h_Object,~)
        %The auxiliary figures are not closed until the main figure is
        %closed, in this section these figure are hiden and aditional actions
        %are carried out
        
        % Change the handle if the callback was originated in a control 
        % different of a figure
        switch h_Object
            case st_MontageCh.CancelButton
                % If the callback is from the cancel control of auxiliary
                % figure: Select Channels 
                h_Object    = st_hFigure.MontageCh;
                
            case st_SelCht.CancelButton
                % If the callback is from the cancel control of auxiliary
                % figure: Select Channels 
                h_Object    = st_hFigure.SelCh;
                
            case st_HFOMethod.CancelButton
                % If the callback is from the cancel control of auxiliary
                % figure: HFO Detection Method 
                h_Object    = st_hFigure.HFOMethods;
                                                
            otherwise
        end
        
        set(h_Object,'Visible','off')
        % Select the respective actions
        switch h_Object
            case st_hFigure.SelCh
                set(st_hIcons.open,'state','off')
            case st_hFigure.HFOMethods
                set(st_hIcons.HFODetect,'state','off')
            otherwise
                    
        end
        
        return
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_Ini(s_Indicator,pst_Path)
        % Set Paths for all the folders
        
        if isempty(pst_Path)
            st_Path = struct;
        end
        
        if s_Indicator
            dbstop if error
            clc;clear;close all
            %     warning off all
            st_Path.path    = which('p_RippleLab');
            st_Path.path    = fileparts(st_Path.path);
            st_Path.pathold = cd(st_Path.path);
            
            addpath(genpath(fullfile('.','Functions')));
            addpath(genpath(fullfile('.','Auxiliar-GUI')));
            addpath(genpath(fullfile('.','Icons')));
            addpath(genpath(fullfile('.','External')));
            addpath(genpath(fullfile('.','Memory')));
            addpath(genpath(fullfile('.','Temp')));
        else
            rmpath(genpath(fullfile('.','Functions')));
            rmpath(genpath(fullfile('.','Auxiliar-GUI')));
            rmpath(genpath(fullfile('.','Icons')));
            rmpath(genpath(fullfile('.','External')));
            rmpath(genpath(fullfile('.','Memory')));
            rmpath(genpath(fullfile('.','Temp')));
            
            st_Path.pathold = cd(st_Path.pathold);
            
        end
    end

%% [Functions] Auxiliary Figure - Assembly Channels -
% In this section are indicated the nested functions for Auxliary Figure
% Select Channel
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_MontageSelect(~,~)
        % View and hide channel assembly controls
        
        switch get(st_MontageCh.Montage,'Value')
            case 1
                set(st_MontageCh.ListCh2,'Visible','off')
            case 2
                set(st_MontageCh.ListCh2,'Visible','on')
            case 3
                f_MontageLoad()
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_MontageOK(~,~)
        % Select Montage
        
        if ~isfield(st_FileInfo,'v_Labels')            
            f_FigureAuxCloseAction(st_hFigure.MontageCh);
            return
        end
        if ismember('',st_FileInfo.v_Labels)            
            v_NumChanStr    = cellstr(strcat(repmat('chan',...
                            numel(st_FileInfo.s_Samples),1),...
                            num2str((1:numel(st_FileInfo.s_Samples))')));
                                    
            st_FileInfo.v_Labels	= v_NumChanStr;         
        end
        
        % Build new montages
        st_Montage  = f_MontageBuild();
        
        if isempty(st_Montage)
            return
        end
            
        % Check if number of samples are the same
        if any(st_ChInfo.v_CommonNel(1) ~= st_ChInfo.v_CommonNel)
            
            if any(st_ChInfo.v_CommonNel(st_Montage.s_Ch1Idx) ~= ...
                    st_ChInfo.v_CommonNel(st_Montage.v_Ch2Idx))
                errordlg('Register times do not match to build a montage',...
                    'Register time mismatch')
                return
            else
                warndlg(...
                    [{'Some channels of your data do not have the same number of elements'};...
                    {'Montage can not be applied if sample number is not equal'}],...
                    'Register time mismatch')
            end
        end
        
        % Append new montages
        st_FileInfo.v_SampleRate(end+1) = st_ChInfo.v_CommonFs(...
                                        get(st_MontageCh.SelCh1,...
                                        'Value'));
        st_ChInfo.v_CommonFs(end+1)     = st_ChInfo.v_CommonFs(...
                                        get(st_MontageCh.SelCh1,...
                                        'Value'));
        st_ChInfo.v_CommonNel(end+1)	= st_ChInfo.v_CommonNel(...
                                        get(st_MontageCh.SelCh1,...
                                        'Value'));
        st_ChInfo.str_CommonCh(end+1)	= st_Montage.str_MontageName;
        st_ChInfo.str_CommMont(end+1)	= {[st_Montage.str_Ch1Montag ...
                                        st_Montage.str_Ch2Montag]};
                                    
        f_PlaceSelChanInfo()
        f_FigureAuxCloseAction(st_hFigure.MontageCh);
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_MontageSave(~,~)
        % Save selected montage
        
        if ~isfield(st_FileInfo,'v_Labels')            
            f_FigureAuxCloseAction(st_hFigure.MontageCh);
            return
        end       
        
        st_Montage	= f_MontageBuild(); %#ok<NASGU>
        
        if diff(st_ChInfo.v_CommonFs(...
                [get(st_MontageCh.SelCh1,'Value') ...
                get(st_MontageCh.SelCh2,'Value')])) ~= 0
            errordlg('Sampling frequencies do not match to build a montage',...
                'Sampling frequency mismatch')
            return
        end
        
        if ismember('',st_FileInfo.v_Labels)            
            v_NumChanStr	= cellstr(strcat(repmat('chan',...
                            numel(st_FileInfo.s_Samples),1),...
                            num2str((1:numel(st_FileInfo.s_Samples))')));
                    
            st_FileInfo.v_Labels	= v_NumChanStr;         
        end
        
        str_FileName                        = ['mtg_' st_FileInfo.str_FileName];
        str_FileName(str_FileName == '.')   = [];
        
        [str_IntFileName,str_IntFilePath]   =...
                                            uiputfile('*.rmtg','Save Montage',...
                                            str_FileName);
        
        if isnumeric(str_IntFileName)
            return
        end
        
        str_IntFile	= fullfile(str_IntFilePath,str_IntFileName);
        save(str_IntFile,'st_Montage')
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_MontageLoad()
        % Load saved montage
        if ~isfield(st_Memory,'str_MtgPath')
            st_Memory.str_MtgPath = st_FilePath.nativepath;
        end
        [str_IntFileName,str_IntFilePath]   = uigetfile('*.rmtg',...
                                            'Select montage to load',...
                                            st_Memory.str_MtgPath);
        if isnumeric(str_IntFileName)
            return
        end
        
        st_Memory.str_MtgPath	= str_IntFilePath;
        save('./Memory/LastSessionMemory','st_Memory')
        
        st_Montage  = load(str_IntFileName, '-mat');
        st_Montage  = st_Montage.st_Montage;
        
        set(st_MontageCh.Montage,'Value',st_Montage.s_Type)
        
        switch get(st_MontageCh.Montage,'Value')
            case 1
                v_Idx   = find(ismember(get(st_MontageCh.SelCh2,'String'),...
                        st_Montage.str_Ch2Montag{1,1}));
                set(st_MontageCh.SelCh2,'Value',v_Idx)
            case 2
                v_Idx   = find(ismember(get(st_MontageCh.ListCh2,'String'),...
                        st_Montage.str_Ch2Montag{1,1}));
                set(st_MontageCh.ListCh2,'Value',v_Idx)
            otherwise
        end
        
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function st_Montage = f_MontageBuild()
        % Load saved montage
        
        s_Ch1Idx        = get(st_MontageCh.SelCh1,'Value');
        str_Ch1Montag   = get(st_MontageCh.SelCh1,'String');
        str_Ch1Montag   = str_Ch1Montag(s_Ch1Idx);
                
        switch get(st_MontageCh.Montage,'Value')
            case 1
                v_Ch2Idx        = get(st_MontageCh.SelCh2,'Value');
                str_Ch2Montag   = get(st_MontageCh.SelCh2,'String');
                str_Ch2Montag   = str_Ch2Montag(v_Ch2Idx);
                
                str_MontageName	= {[cell2mat(str_Ch1Montag)...
                                                '_Bip_' ...
                                                cell2mat(str_Ch2Montag)]};
                str_Ch2Montag   = {str_Ch2Montag};
            case 2
                v_Ch2Idx      = get(st_MontageCh.ListCh2,'Value');
                v_Ch2Idx      = v_Ch2Idx(v_Ch2Idx <= ...
                                numel(st_ChInfo.st_FileInfo{1}.v_SampleRate));
                str_Ch2Montag   = get(st_MontageCh.ListCh2,'String');
                str_Ch2Montag   = {str_Ch2Montag(v_Ch2Idx)};
                
                str_MontageName = {[cell2mat(str_Ch1Montag)...
                                                '_xAverage']};
            case 3            
        end
        
        if ~exist('str_Ch1Montag','var') || ~exist('str_Ch2Montag','var')
            st_Montage  = [];
            return
        end
        
        % Check if sampling frequencies are the same
        if any(st_ChInfo.v_CommonFs(s_Ch1Idx) ~= st_ChInfo.v_CommonFs(v_Ch2Idx))
            errordlg('Sampling frequencies do not match to build a montage',...
                'Sampling frequency mismatch')
            st_Montage  = [];
            return
        end
        
        st_Montage.s_Type           = get(st_MontageCh.Montage,'Value');
        st_Montage.str_Ch1Montag    = str_Ch1Montag;
        st_Montage.str_Ch2Montag    = str_Ch2Montag;
        st_Montage.s_Ch1Idx         = s_Ch1Idx;
        st_Montage.v_Ch2Idx         = v_Ch2Idx;
        st_Montage.str_MontageName	= str_MontageName;
        
    end        

%% [Functions] Auxiliary Figure - Select Channels -
% In this section are indicated the nested functions for Auxliary Figure
% Select Channel
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FileAdd(~,~)
    % File selection for analysis    
        set(st_hIcons.open,'State','off')
        %Function to get Signal Path
        v_FileTypes     = {...
                        '*.*',...
                        'All Files (*.*) - FieldTrip supported data formats';...
                        '*.rec, *.edf,*.gdf' , ...
                        'Generic standard formats(*.rec, *.edf,*.gdf)';...
                        '*.data' , 'EPILEPSIAE file format (*.data)';...
                        '*.eeg' , 'Nicolet Files (*.eeg)';...
                        '*.ncs' , 'Neuralynx Files (*.ncs)';...
                        '*.mat' , 'Customized MATLAB Files (*.mat)';...
                        '*.plx' , 'Plexon Files (*.ncs)';...
                        '*.abf' , 'Axon binary files (*.mat)';...
                        '*.set' , 'EEGLAB files (*.set)'};

        st_Memory = load('./Memory/LastSessionMemory','st_Memory');
        st_Memory = st_Memory.st_Memory;
                        
        [str_FileName, str_FilePath,~]  = uigetfile(v_FileTypes,...
                                        'Open Signals', st_Memory.str_NativePath,...
                                        'MultiSelect','on');
                                    
        if ~ischar(str_FilePath)
            return
        end
        
        delete('./Memory/LastSessionMemory.mat');
        st_Memory.str_NativePath = str_FilePath;
        save('./Memory/LastSessionMemory','st_Memory')
        
        st_FilePath.nativepath  = str_FilePath;
        
        % Check if any file was selected
        if ~ischar(str_FileName) && ~iscell(str_FileName)
            return
        elseif ischar(str_FileName)
            str_FileName    = {str_FileName};
        end
        
        str_FileName    = sort(str_FileName);
        str_FileName    = str_FileName(:);
            
        if isempty(st_FilePath.name)
            st_FilePath.name        = str_FileName;
            st_FilePath.path        = cell(size(str_FileName));
            st_FilePath.path(:,1)   = {str_FilePath};
        else
            st_FilePath.name(end+1:end+numel(str_FileName),1) = str_FileName;
            st_FilePath.path(end+1:end+numel(str_FileName),1) = {str_FilePath};
        end
        
        f_FileRead()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FileDelete(~,~)
        % Delete File from selection to read
        
        if isempty(st_FilePath.path)
            return
        end
        
        [v_Idx,s_Selection]	= listdlg(...
                            'ListString',st_FilePath.full,...
                            'SelectionMode','multiple',...
                            'PromptString','Select files:',...
                            'Name','Delete Files',...
                            'OKString','Delete');
            
        if s_Selection
            st_FilePath.path(v_Idx)     = [];
            st_FilePath.name(v_Idx)     = [];
            
            f_FileRead()
        else
            return
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FileRead(~,~)
    % Read signal header for analysis   
    
        st_FilePath.full            = cell(size(st_FilePath.name));
            
        for kk = 1:numel(st_FilePath.name)
            st_FilePath.full(kk,1)  = {[st_FilePath.path{kk} ...
                                	st_FilePath.name{kk}]};
        end
                
        [st_FilePath.full,v_Idx]    = unique(st_FilePath.full);
        
        st_FilePath.name            = st_FilePath.name(v_Idx);
        st_FilePath.path            = st_FilePath.path(v_Idx);
        
        if isempty(st_FilePath.name)
            set(st_SelCht.FileList,'String',' ')
        else
            set(st_SelCht.FileList,'String',st_FilePath.full)
        end
        
        m_CellStr	= cell(1,numel(st_FilePath.path));
        
        st_ChInfo.st_FileInfo	= cell(size(st_FilePath.name));
                
        for kk=1:numel(st_FilePath.name)
        
            st_readfile.path    = st_FilePath.path{kk};
            st_readfile.name    = st_FilePath.name{kk};
        
            % Read file Header
            st_FileInfo         = f_GetHeader(st_readfile);
            
            if ~(st_FileInfo.s_error || st_FileInfo.s_Check)
                
                st_FilePath.name    = [];
                st_FilePath.path	= [];
                st_FilePath.full	= [];
                
                set(st_SelCht.FileList,'String',' ')
                return
            end
            
            % Check if the file is a valid file
            if st_FileInfo.s_error && st_FileInfo.s_Check
                
                st_FilePath.name    = [];
                st_FilePath.path	= [];
                st_FilePath.full	= [];
                
                set(st_SelCht.FileList,'String',' ')
                errordlg(st_FileInfo.st_Custom,'Reading Warning');
%                 errordlg('Unsupported file format','Reading Error')
                return
            end
            
            if numel(st_FileInfo.v_Labels) ~= numel(st_FileInfo.s_Samples)
                st_FileInfo.s_Samples   = repmat(st_FileInfo.s_Samples,...
                                        size(st_FileInfo.v_Labels));
            end
            
            if numel(st_FileInfo.v_Labels) ~= numel(st_FileInfo.v_SampleRate)
                st_FileInfo.v_SampleRate	= repmat(st_FileInfo.v_SampleRate,...
                                            size(st_FileInfo.v_Labels));
            end
            
            st_FileInfo.s_Time	= str2double(...
                                mat2str(st_FileInfo.s_Time(1)));
            
            st_ChInfo.st_FileInfo(kk)	= {st_FileInfo};
            
            if ismember('',st_FileInfo.v_Labels)            
                v_NumChanStr            = cellstr(strcat(repmat('chan',...
                                        numel(st_FileInfo.s_Samples),1),...
                                        num2str((...
                                        1:numel(st_FileInfo.s_Samples))')));
                st_FileInfo.v_Labels	= v_NumChanStr;                
            end
            
            m_CellStr{1,kk} = st_FileInfo.v_Labels;
            m_CellStr{2,kk} = st_FileInfo.v_SampleRate(:);
            
            if numel(st_FileInfo.s_Samples) == 1
                st_FileInfo.s_Samples   = repmat(st_FileInfo.s_Samples,...
                                        size(st_FileInfo.v_SampleRate(:)));
            else
                st_FileInfo.s_Samples   = st_FileInfo.s_Samples(:);
                
            end
            
            m_CellStr{3,kk} = st_FileInfo.s_Samples;
        end
             
        v_CommonCh  = cell(1);
        v_CommonFs  = cell(1);
        v_CommonNel	= cell(1);
        
        for kk=1:numel(st_FilePath.name)
            v_CommonCh	= vertcat(v_CommonCh,m_CellStr{1,kk}); %#ok<AGROW>
            v_CommonFs	= vertcat(v_CommonFs,m_CellStr{2,kk}); %#ok<AGROW> 
            v_CommonNel = vertcat(v_CommonNel,m_CellStr{3,kk}); %#ok<AGROW> 
        end
        
        v_CommonCh	= v_CommonCh(2:end);
        v_CommonFs	= cell2mat(v_CommonFs);
        v_CommonNel	= cell2mat(v_CommonNel);
        
        [v_CommonCh,v_Id]	= unique(v_CommonCh);
        v_CommonFs          = v_CommonFs(v_Id);
        v_CommonNel         = v_CommonNel(v_Id);
        [~,v_Id]            = sort(v_Id);
        v_CommonCh          = v_CommonCh(v_Id);
        v_CommonFs          = v_CommonFs(v_Id);
        v_CommonNel         = v_CommonNel(v_Id);
        
        m_CommonTable       = zeros(numel(v_CommonCh),numel(st_FilePath.name));
        
        for kk=1:numel(st_FilePath.name)
            m_CommonTable(:,kk) = ismember(v_CommonCh,m_CellStr{1,kk});
        end
        
        m_CommonTable = sum(m_CommonTable,2);  
        
        st_ChInfo.str_CommonCh	= v_CommonCh(m_CommonTable == ...
                                    numel(st_FilePath.name));
        st_ChInfo.v_CommonFs      = v_CommonFs(m_CommonTable == ...
                                    numel(st_FilePath.name));
        st_ChInfo.v_CommonNel     = v_CommonNel(m_CommonTable == ...
                                    numel(st_FilePath.name));
                                
        if numel(m_CommonTable) ~= numel(st_ChInfo.str_CommonCh)
            warndlg(['There are channels not common' ...
                    ', these channels will be ignored'],'!! Warning !!');
        end
                
        st_ChInfo.str_CommMont = st_ChInfo.str_CommonCh;
        
        % Place Header Info in Select Channel Auxiliary Figure
        f_PlaceSelChanInfo()
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_MontageAdd(~,~)
        set(st_hFigure.MontageCh,'Visible','on')
    end    
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoChAdd(~,~)
        % Add a channel to read or load
        
        v_ListIdx   = get(st_SelCht.ChList,'Value');
                
        str_File    = cell(numel(v_ListIdx),1);
        s_TotalTime = cell(numel(v_ListIdx),1);
        s_Sampling  = cell(numel(v_ListIdx),1);
                
        for kk=1:numel(v_ListIdx)
            str_File(kk,1)      = {st_FileInfo.str_FileName};
            s_Sampling(kk,1)    = {st_ChInfo.v_CommonFs(v_ListIdx(kk))};
            s_TotalTime(kk,1)   = {st_ChInfo.v_CommonNel(v_ListIdx(kk))/...
                                (s_Sampling{kk,1} * 60)};
        end
        
        if  isempty(st_ChInfo.str_ChName)
            st_ChInfo.str_ChName    = st_ChInfo.str_CommonCh(v_ListIdx);
        else
            st_ChInfo.str_ChName	= vertcat(st_ChInfo.str_ChName,...
                                    st_ChInfo.str_CommonCh(v_ListIdx));
        end
        
        if isempty(st_ChInfo.str_Montage)
            st_ChInfo.str_Montage	= st_ChInfo.str_CommMont(v_ListIdx);
        else
            st_ChInfo.str_Montage	= vertcat(st_ChInfo.str_Montage,...
                                    st_ChInfo.str_CommMont(v_ListIdx));
        end
               
        if isempty(st_ChInfo.s_Sampling)
            st_ChInfo.s_Sampling	= s_Sampling; 
        else
            st_ChInfo.s_Sampling	= vertcat(st_ChInfo.s_Sampling,...
                                    s_Sampling);
        end
                
        if isempty(st_ChInfo.s_TotalTime)
            st_ChInfo.s_TotalTime	= s_TotalTime;        
        else                                        
            st_ChInfo.s_TotalTime	= vertcat(st_ChInfo.s_TotalTime,...
                                    s_TotalTime);
        end
        
        if ismember('',st_FileInfo.v_Labels)            
            v_NumChanStr = cellstr(strcat(repmat(...
                        'chan',numel(st_FileInfo.s_Samples),1),...
                        num2str((1:numel(st_FileInfo.s_Samples))')));
            st_FileInfo.v_Labels = v_NumChanStr;         
        end
        
        [~,v_Idx]	= unique(st_ChInfo.str_ChName);
        v_Idx       = sort(v_Idx,'ascend');
        
        st_ChInfo.str_ChName    = st_ChInfo.str_ChName(v_Idx); 
        st_ChInfo.s_Sampling    = st_ChInfo.s_Sampling(v_Idx);
        st_ChInfo.str_Montage   = st_ChInfo.str_Montage(v_Idx);
        st_ChInfo.s_TotalTime   = st_ChInfo.s_TotalTime(v_Idx);
        
        f_InfoWriteTable()
                
    end  
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoChRemove(~,~)
        % Remove a channel to read or load
        
        v_RowSelected   = get(st_SelCht.InfoTable,'UserData');
       
        if isempty(v_RowSelected)
            return
        end
        
        v_RowSelected   = v_RowSelected(:,1);
        
        if ~isempty(st_ChInfo.str_ChName)
            st_ChInfo.str_ChName(v_RowSelected)	= [];
        end
        
        if ~isempty(st_ChInfo.str_ChLoad)
            st_ChInfo.str_ChLoad(v_RowSelected)	= [];
        end
        
        if ~isempty(st_ChInfo.s_Sampling)
            st_ChInfo.s_Sampling(v_RowSelected)	= [];
        end
        
        if ~isempty(st_ChInfo.s_TotalTime)
            st_ChInfo.s_TotalTime(v_RowSelected)	= [];
        end
        
        if ~isempty(st_ChInfo.str_Montage)
            st_ChInfo.str_Montage(v_RowSelected)	= [];
        end
        
        f_InfoWriteTable()
        
    end  
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoChUp(~,~)
        % Move Up a channel to read or load
        
        v_RowSelected   = get(st_SelCht.InfoTable,'UserData');
        v_RowSelected   = v_RowSelected(:,1);
        
        if isempty(v_RowSelected)
            return
        end
        
        v_RowSelected   = v_RowSelected(1);
        
        if v_RowSelected == 1
            return
        end
                                                                    
        st_ChInfo.str_ChName([v_RowSelected - 1, v_RowSelected])    = ...
            st_ChInfo.str_ChName([v_RowSelected, v_RowSelected - 1]);
        
        st_ChInfo.s_Sampling([v_RowSelected - 1, v_RowSelected])	= ...
            st_ChInfo.s_Sampling([v_RowSelected, v_RowSelected - 1]);
                
        st_ChInfo.s_TotalTime([v_RowSelected - 1, v_RowSelected])   = ...
            st_ChInfo.s_TotalTime([v_RowSelected, v_RowSelected - 1]) ;
                
        st_ChInfo.str_Montage([v_RowSelected - 1, v_RowSelected])   = ...
            st_ChInfo.str_Montage([v_RowSelected, v_RowSelected - 1]) ;
        
        f_InfoWriteTable()
         
    end  
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoChDown(~,~)
        % Move Down a channel to read or load
        
        v_RowSelected   = get(st_SelCht.InfoTable,'UserData');
        v_RowSelected   = v_RowSelected(:,1);
        
        if isempty(v_RowSelected)
            return
        end
        
        v_RowSelected   = v_RowSelected(1);
        
        if v_RowSelected == numel(st_ChInfo.str_ChName)
            return
        end
        
        st_ChInfo.str_ChName([v_RowSelected, v_RowSelected + 1])    = ...
            st_ChInfo.str_ChName([v_RowSelected + 1, v_RowSelected]);
        
        st_ChInfo.s_Sampling([v_RowSelected, v_RowSelected + 1])	= ...
            st_ChInfo.s_Sampling([v_RowSelected + 1, v_RowSelected]);
                
        st_ChInfo.s_TotalTime([v_RowSelected, v_RowSelected + 1])	= ...
            st_ChInfo.s_TotalTime([v_RowSelected + 1, v_RowSelected]) ;
        
         st_ChInfo.str_Montage([v_RowSelected, v_RowSelected + 1])  = ...
            st_ChInfo.str_Montage([v_RowSelected + 1, v_RowSelected]) ;
        
        
        f_InfoWriteTable()
    end  
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoClear(~,~)
        % Remove a channel Info
        
        st_ChInfo.str_ChName    = [];
        st_ChInfo.s_Sampling	= [];      
        st_ChInfo.s_TotalTime   = [];
        st_ChInfo.str_Montage   = [];
        st_ChInfo.str_CommonCh  = [];
        st_ChInfo.str_CommMont	= []; 
        st_ChInfo.str_MtgeLoad	= [];
        
        st_FilePath.name        = [];
        st_FilePath.path        = [];
        st_FilePath.full        = [];
        st_FilePath.nativepath  = ' ';
        
        st_FileInfo.v_Labels        = [];
        st_FileInfo.str_FileName    = [];
        st_FileInfo.s_NumbRec       = [];
        st_FileInfo.s_Time          = [];
        st_FileInfo.str_FileType    = 'none';
        
        set(st_SelCht.FileList,'String',st_FilePath.nativepath,'Value',1)        
        set(st_SelCht.InfoTable,'Data',[])
              
        f_PlaceSelChanInfo()
        f_DataClear('all')  
    end 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ChannelApply(~,~)
        %Memorize the channels selected
       
        %Check if a channel is selected
        if isempty(st_ChInfo.str_ChName)
            st_ChInfo.FlagError  = true;  
            return
        end
                       
        [st_Data.v_TimeLims, s_Check]    = f_CheckTextNumbers(...
                                        get(st_SelCht.TimeTxtIni,'string'),...
                                        get(st_SelCht.TimeTxtEnd,'string'),...
                                        st_FileInfo.s_Time);    
                                
        if s_Check == -1
            uicontrol(st_SelCht.TimeTxtIni)
            st_ChInfo.FlagError  = true;
            return
        elseif s_Check == -2 || numel(st_Data.v_TimeLims) == 1
            uicontrol(st_SelCht.TimeTxtEnd)
            st_Data.v_TimeLims(2)   = st_FileInfo.s_Time;
            st_ChInfo.FlagError 	= true;
            return
        end
                
        
        if any(st_ChInfo.s_Sampling{1}~=cell2mat(st_ChInfo.s_Sampling))
            errordlg('Different sampling rates in data not supported',...
                'Sampling frequency mismatch')
            return
        end
        
        if any(st_ChInfo.s_TotalTime{1}~=cell2mat(st_ChInfo.s_TotalTime))
            errordlg('Different register times in data not supported',...
                'Register time mismatch')
            return
        end
        
        st_Data.v_Labels	= st_ChInfo.str_ChName;
        st_Data.s_Sampling	= st_ChInfo.s_Sampling{1};
        
        % Clear old data if exist
        f_DataClearAnalysis()

        % Set Controls data
        f_PlaceAuxControlData()
        
        % Close the auxiliary figure
        f_FigureAuxCloseAction(st_SelCht.CancelButton)
        pause(0.5)
        
    end 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ChannelDisplay(~,~)
        %Load and Print the channels selected
        if isempty(st_ChInfo.s_Sampling)
            return
        end
        
        if any(st_ChInfo.s_Sampling{1}~=cell2mat(st_ChInfo.s_Sampling))
            errordlg('Different sampling rates in data not supported',...
                'Sampling frequency mismatch')
            return
        end
        
        if any(st_ChInfo.s_TotalTime{1}~=cell2mat(st_ChInfo.s_TotalTime))
            errordlg('Different register times in data not supported',...
                'Register time mismatch')
            return
        end
        st_FileInfo.s_Time      = st_ChInfo.s_TotalTime{1};
        st_ChInfo.str_ChLoad    = st_ChInfo.str_ChName;
        st_ChInfo.str_MtgeLoad  = st_ChInfo.str_Montage;
       
        f_InfoReadTable()
        f_ChannelLoad()
        
        %Check if there is a error
        if st_ChInfo.FlagError
            return
        end
        
        % Close the auxiliary figure
        f_FigureAuxCloseAction(st_SelCht.CancelButton)
        pause(0.5)
        
        % Set Offset Values
        
        st_Position.s_NumChSel	= numel(st_Data.v_Labels);
        st_Offset.Vector        = st_Offset.Value * ...
                                (st_Position.s_NumChSel:-1:1)';
        st_Position.s_TimeIni	= st_Data.v_Time(1);
        
        % Set number of channels available

        set(st_Select.ChList,...
            'String',num2str((1:st_Position.s_NumChSel)'),...
            'Value',st_Position.s_NumChSel)

        % Clear old data if exist
        f_DataClearAnalysis()

        % Set Controls data
        f_PlaceAuxControlData()

        % Asign Vertical Position
        st_Position.v_VerticalPos   = [1;st_Position.s_NumChSel];

        % Set Signal Axes
        f_AxeBuildSignalAxes()
        
        % Set Time Freq Specs
        st_Spectrum.s_TFSampling   = st_Data.s_Sampling;
        
%         set(st_TimeFreq.SmpFreqTxt,...
%             'string',num2str(st_Spectrum.s_TFSampling));
        
        if logical(get(st_Select.TimFrqPanel,'Value'))
            f_TimeFreqSetDisplay() 
        else
            
            st_SpectrumOpt.s_FromDisplay	= 0;
            f_PanelSituate()
        end        
        
        % Set Slider value
        set(st_hPanelObj.SliderH,'Value',st_Position.s_TimeIni)

        % Set Signal Lines, patch time and window display
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ChannelLoad(~,~)
        %Load the channels selected        
        
        %Check if a channel is selected
        if isempty(st_ChInfo.str_ChLoad)
            st_ChInfo.FlagError  = true;  
            return
        end     
        
        st_ChInfo.st_FileIdxLoad	= get(st_SelCht.FileList,'Value');
        st_FileInfo                 = st_ChInfo.st_FileInfo{...
                                    st_ChInfo.st_FileIdxLoad};
                       
        [st_Data.v_TimeLims, s_Check]	= f_CheckTextNumbers(...
                                        get(st_SelCht.TimeTxtIni,'string'),...
                                        get(st_SelCht.TimeTxtEnd,'string'),...
                                        st_FileInfo.s_Time);    
                                
        if s_Check == -1
            uicontrol(st_SelCht.TimeTxtIni)
            st_ChInfo.FlagError  = true;
            return
        elseif s_Check == -2 || numel(st_Data.v_TimeLims) == 1
            uicontrol(st_SelCht.TimeTxtEnd)
            st_Data.v_TimeLims(2)= st_FileInfo.s_Time;
            st_ChInfo.FlagError  = true;
            return
        end
                        
        % Select channels to load
        
        v_IsMt  = cellfun(@iscell,st_ChInfo.str_MtgeLoad);
        v_IsCh  = ~v_IsMt;
        v_NumCh = find(v_IsCh);
        v_NumMt = find(v_IsMt);
        
        if any(v_IsMt)
                    
            str_ChMtg   = {' '};
            
            for kk = 1:numel(v_NumMt)
                str_ChLoad	= st_ChInfo.str_MtgeLoad{v_NumMt(kk),:};
                str_ChMtg	= vertcat(str_ChMtg,str_ChLoad{1},...
                            str_ChLoad{2}); %#ok<AGROW>
            end
            
            str_ChLoad  = vertcat(st_ChInfo.str_MtgeLoad{v_IsCh,:},str_ChMtg);
            
        else
            str_ChLoad  = st_ChInfo.str_MtgeLoad(v_IsCh,:);
        end
        
        [~,v_ChIdx] = ismember(deblank(str_ChLoad),...
                    deblank(st_FileInfo.v_Labels));
                                
        v_ChIdx     = unique(v_ChIdx(v_ChIdx~=0));
        
        % Check data size to load
        % DataSize: [Time(Sec)x #Ch x Samples(1Sec) x 2bytes] in Kb
        s_SystemMemory	= memoryInfo;
        s_SystemMemory	= s_SystemMemory.free; 	
        
        if ~isnan(s_SystemMemory)
            s_DataMemory    = round((diff(st_Data.v_TimeLims*60)*...
                            numel(v_ChIdx)*st_ChInfo.s_Sampling{1} * 8)/2^10);  
        end
        if isnan(s_SystemMemory)
            warndlg(sprintf('%s %s %s %s %s %s',...
                    'The system you are using does not allow MATLAB',...
                    'the acces to memory information. ',...
                    'Therefore, RIPPLELAB is going to try open the data',...
                    'with all resources available.',...
                    'If the data you are opening is too large,',...
                    'you may have a OUT OF MEMORY error.'),...
                    'Memory Warning!')
                
        elseif s_DataMemory > 0.5*s_SystemMemory
            str_Answer	= questdlg(sprintf('%s %s %s %s %s\n%s',...
            'You are trying to load a data matrix greater than 50% of the',...
            'computer free memory. If you want to load a shorter interval,',...
            'please select the start and the end times (in minutes) of the',...
            'signal interval in the ''Load Time'' section.',...
            'Would you like to load a shorter interval?.',...
            'If you want to continue, please select <NO>'),...
            'Memory Warning!','Yes','No','Yes');
        
            switch str_Answer
                case 'Yes'
                    % Change Cursor Icon to arrow
                    set(st_hFigure.SelCh,'Pointer','arrow');
                    pause(0.5)
                    st_ChInfo.FlagError  = true;
                    return
                case 'No'
                    if s_DataMemory > 0.95*s_SystemMemory
                        warndlg(sprintf('%s %s',...
                            'Data size is too big to be loaded,',...
                            'please select a shorter interval'),...
                            'Memory Warning!')
                        % Change Cursor Icon to arrow
                        set(st_hFigure.SelCh,'Pointer','arrow');
                        pause(0.5)
                        st_ChInfo.FlagError  = true;
                        return
                    else
                        str_SymBytes = 'KB';
                        
                        if s_DataMemory > 2^20
                            str_SymBytes = 'GB';
                            s_DataMemory = round(s_DataMemory/2^10)/1024;
                        elseif s_DataMemory > 2^10
                            str_SymBytes = 'MB';
                            s_DataMemory = round(s_DataMemory/2^10);
                        end
                        str_Answer	= questdlg(...
                            sprintf('%s ~ %6.2f%s. %s %s\n %s',...
                            'RIPPLELAB is going to load',...
                            s_DataMemory,str_SymBytes,...
                            'Depending on the computer characteristics,',...
                            'this process may take a while',...
                            'Are you sure you want to load this data?'),...
                            'Memory Warning!','Yes','No','No');
                        
                        switch str_Answer
                            case 'Yes'
                            case 'No'
                                % Change Cursor Icon to arrow
                                set(st_hFigure.SelCh,'Pointer','arrow');
                                pause(0.5)
                                st_ChInfo.FlagError  = true;
                                return
                        end
                    end
            end
        elseif s_DataMemory > 2100000
            
            str_SymBytes = 'KB';
            
            if s_DataMemory > 2^20
                str_SymBytes = 'GB';
                s_DataMemory = round(s_DataMemory/2^10)/1024;
            elseif s_DataMemory > 2^10
                str_SymBytes = 'MB';
                s_DataMemory = round(s_DataMemory/2^10);
            end
            
            str_Answer	= questdlg(...
                sprintf('RIPPLELAB is going to load ~ %6.2f%s. %s %s',...
                s_DataMemory,str_SymBytes,...
                'Depending on the computer characteristics,',...
                'this process can take some time'),...
                'Memory Warning!','Ok','Cancel','Ok');
            
            switch str_Answer
                case 'Ok'
                case 'Cancel'
                    % Change Cursor Icon to arrow
                    set(st_hFigure.SelCh,'Pointer','arrow');
                    pause(0.5)
                    st_ChInfo.FlagError  = true;
                    return
            end
        end
        
        % Change cursor icon to wait
        set(st_hFigure.SelCh,'Pointer','watch');
        pause(0.5)
        
        % Display wait figure
        st_HandFig = p_LoadFigure();
        pause(0.5)
        s_ticID = tic;
        
        % Load selected channels        
        st_Dat	= f_GetData(st_FileInfo,st_Data.v_TimeLims,v_ChIdx);
        
        if isempty(st_Dat.m_Data)
            disp('Error Loading Data:')
            toc(s_ticID)
            
            close(st_HandFig.s_hFig)
            st_ChInfo.FlagError = true;
            
            % Change Cursor Icon to arrow
            set(st_hFigure.SelCh,'Pointer','arrow')
            return
        end
        
        set(st_HandFig.s_hText,'String','Applying last settings to data')
        
        if any(v_IsMt)
            m_Data	= zeros(size(st_Dat.m_Data,1),numel(v_NumMt));
            
            for kk = 1:numel(st_ChInfo.str_MtgeLoad)      
                
                [s_IsMt,s_IdMt]	= ismember(kk,v_NumMt);
                
                if s_IsMt                    
                    str_ChLoad	= st_ChInfo.str_MtgeLoad{v_NumMt(s_IdMt),:};
                    [~,v_RfIdx] = ismember(str_ChLoad{2},st_Dat.v_Labels);
                    [~,v_ChIdx] = ismember(str_ChLoad{1},st_Dat.v_Labels);

                    m_Data(:,kk)= single(st_Dat.m_Data(:,v_ChIdx) -  ...
                                 mean(st_Dat.m_Data(:,v_RfIdx),2));
                else
                    
                    [~,s_IdMt]	= ismember(kk,v_NumCh);
                    str_ChLoad	= st_ChInfo.str_MtgeLoad{v_NumCh(s_IdMt),:};
                    [~,v_ChIdx] = ismember(str_ChLoad,st_Dat.v_Labels);
                    m_Data(:,kk)= single(st_Dat.m_Data(:,v_ChIdx));
                end
            end            
            
        else 
            [~,v_ChIdx] = ismember(st_ChInfo.str_MtgeLoad,st_Dat.v_Labels);
            m_Data      = single(st_Dat.m_Data(:,v_ChIdx));
        end
        
        st_Dat	= rmfield(st_Dat, [{'m_Data'},{'v_Labels'}]);
        
        disp('Time Loading Data:')
        toc(s_ticID)
          
        close(st_HandFig.s_hFig)
                
        st_Data.m_Data      = m_Data;
        st_Data.v_Time      = st_Dat.v_Time;
        st_Data.v_Labels    = st_ChInfo.str_ChLoad;
        st_Data.s_Sampling  = st_Dat.s_Sampling;
        st_Data.s_TotalTime = str2double(num2str(st_Dat.s_TotalTime));
        st_Data.v_TimeLims  = st_Dat.v_TimeLims;
        st_Data.v_TimeStart = f_Secs2hms(f_HMS2Secs(st_FileInfo.s_Start)+...
                            f_HMS2Secs([0 st_Data.v_TimeLims(1) 0]));
        
        % Save Original Data
        str_TmpFName	= st_FilePath.name{st_ChInfo.st_FileIdxLoad};
        str_TmpFName(str_TmpFName=='.') = '-'; 
        str_TempFile	= [str_TempFolder  str_TmpFName '~tmp.mat'];
        
        if ~isempty(which(str_TempFile))
            delete(str_TempFile)
        end
        
        save(str_TempFile,'m_Data','-v7.3')
        
        clear m_Data st_Dat
        
                
        % Set other controls
        st_Position.s_Timelength    = st_Data.s_TotalTime;
        
        set(st_Select.windowText,...
            'string',num2str(st_Position.s_Timelength))
        
        st_ChInfo.FlagError = false;
       
        % Change Cursor Icon to arrow
        set(st_hFigure.SelCh,'Pointer','arrow');
        
        
    end
%% [Functions] Auxiliary Figure - Select and Run HFO Methods - % Method Options [**INSERT!**]
% In this section are indicated the nested functions for Auxliary Figure
% Select Channel
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSavePath(~,~)
        % Change the folder for saving analysis
        
        str_folder_name     = uigetdir(get(st_HFOMethod.SavePath,'string'),...
                            'Select folder for save HFO Analysis');
                    
        if ~ischar(str_folder_name)
            return
        elseif ~isdir(str_folder_name)
            return
        end
        
        str_folder_name     = [str_folder_name '\'];
        set(st_HFOMethod.SavePath,'string',str_folder_name)
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSelectMethod(hObject,~) % Insert here visibility Options[**INSERT!**]
        %Toogle visibility of controls panels
        %If a new method panel is inluded, please hide and show this panel accordingly
        
        switch get(hObject,'Value')
            case 1
                set(st_HFOMethod.STEPanel,'Visible','off')
                set(st_HFOMethod.SLLPanel,'Visible','off')
                set(st_HFOMethod.HILPanel,'Visible','off')
                set(st_HFOMethod.MNIPanel,'Visible','off')
                set(st_HFOMethod.VISPanel,'Visible','on')
                set(st_HFOMethod.SaveFile,'String','*_VIS')
                % Add New panel option:                
                % set(st_HFOMethod.NMTPanel,'Visible','off')
            case 2
                set(st_HFOMethod.VISPanel,'Visible','off')
                set(st_HFOMethod.SLLPanel,'Visible','off')
                set(st_HFOMethod.HILPanel,'Visible','off')
                set(st_HFOMethod.MNIPanel,'Visible','off')
                set(st_HFOMethod.STEPanel,'Visible','on')
                set(st_HFOMethod.SaveFile,'String','*_STE')
                % Add New panel option:                
                % set(st_HFOMethod.NMTPanel,'Visible','off')
            case 3
                set(st_HFOMethod.VISPanel,'Visible','off')
                set(st_HFOMethod.STEPanel,'Visible','off')
                set(st_HFOMethod.HILPanel,'Visible','off')
                set(st_HFOMethod.MNIPanel,'Visible','off')
                set(st_HFOMethod.SLLPanel,'Visible','on')
                set(st_HFOMethod.SaveFile,'String','*_SLL')
                % Add New panel option:                
                % set(st_HFOMethod.NMTPanel,'Visible','off')
            case 4
                set(st_HFOMethod.VISPanel,'Visible','off')
                set(st_HFOMethod.STEPanel,'Visible','off')
                set(st_HFOMethod.SLLPanel,'Visible','off')
                set(st_HFOMethod.MNIPanel,'Visible','off')
                set(st_HFOMethod.HILPanel,'Visible','on')
                set(st_HFOMethod.SaveFile,'String','*_HIL')
                % Add New panel option:                
                % set(st_HFOMethod.NMTPanel,'Visible','off')
            case 5
                set(st_HFOMethod.VISPanel,'Visible','off')
                set(st_HFOMethod.STEPanel,'Visible','off')
                set(st_HFOMethod.SLLPanel,'Visible','off')
                set(st_HFOMethod.HILPanel,'Visible','off')
                set(st_HFOMethod.MNIPanel,'Visible','on')
                set(st_HFOMethod.SaveFile,'String','*_MNI')
                % Add New panel option:                
                % set(st_HFOMethod.NMTPanel,'Visible','off')
                
%             case 6
%                 Add New panel option:
%                 set(st_HFOMethod.VISPanel,'Visible','off')
%                 set(st_HFOMethod.STEPanel,'Visible','off')
%                 set(st_HFOMethod.SLLPanel,'Visible','off')
%                 set(st_HFOMethod.HILPanel,'Visible','off')
%                 set(st_HFOMethod.MNIPanel,'Visible','off')
%                 set(st_HFOMethod.NMTPanel,'Visible','on')
%                 set(st_HFOMethod.SaveFile,'String','*_TFE')
        end
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFORunAnalysis(~,~)
        % Select the mode for analysis
        
        st_HFOAnalysis	= struct;
        
        st_HFOControl.v_ChannelIdx	= get(st_HFOMethod.ChannelList,'Value');
                   
        if sum(st_HFOControl.v_ChannelIdx) == 0
            return
        end
        
        if get(st_HFOMethod.MethodList,'Value') == 1                            
            if isempty(st_hAxes.Main)
                warndlg('Display channels is required','Warning')                
                f_FigureAuxCloseAction(st_HFOMethod.CancelButton)
                return
            end
                                      
            if numel(st_HFOControl.v_ChannelIdx) ~= 1
                warndlg('Please select only one electrode','Warning')
                uicontrol(st_HFOMethod.ChannelList)
                return
            end            
            
            st_HFOControl.IsVisualMrk   = 1;            
            f_HFORunVisualMarking()
            
        else            
            st_HFOControl.IsVisualMrk   = 0;
            if numel(st_FilePath.name) > 1
                f_RunMultiFileAnalysis()
            elseif numel(st_FilePath.name) == 1
                f_RunSingleFileAnalysis()
            else
                return
            end
        end
        
    end
%:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_RunSingleFileAnalysis()
        % Set Single File Options for analysis
        
        s_IsMulFileHFO  = 0;
        
        % Check if values of frequency are valid
        [v_Values, s_Check]	= f_CheckTextNumbers(...
                            get(st_HFOMethod.FreqTxtMin,'string'),...
                            get(st_HFOMethod.FreqTxtMax,'string'),...
                            st_Data.s_Sampling/2);
       
        if s_Check == -1
            uicontrol(st_HFOMethod.FreqTxtMin)
            return
        elseif s_Check == -2
            uicontrol(st_HFOMethod.FreqTxtMax)
            return
        end
        
        % Check if there are signals plotted 
        if ~isfield(st_Data,'m_Data')
            st_ChInfo.str_ChLoad    = st_ChInfo.str_ChName;
            st_ChInfo.str_MtgeLoad  = st_ChInfo.str_Montage;
            
            f_ChannelLoad()
            
            if st_ChInfo.FlagError
                st_ChInfo.FlagError = false;
            	return
            end
        end
        
        % Clear previous HFO data
        clear st_HFOData
        
        
        st_HFOSettings.s_FreqIni	= v_Values(1);
        st_HFOSettings.s_FreqEnd    = v_Values(2);
                      
        f_FigureAuxCloseAction(st_HFOMethod.CancelButton)
        
        pause(0.001)
        
        f_HFOCreateSaveFile(get(st_SelCht.FileList,'Value'))
        
        % Set Waiting Figure
        st_WaitOutput   = p_HFOWaitFigure();

        pause(0.001)
        
        p_HFOWaitFigure(st_WaitOutput,...
                        'FileString',st_FileInfo.str_FileName)
        p_HFOWaitFigure(st_WaitOutput,...
                        'FilePatch',0)
        p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Starting HFO Detection File: ',...
                        st_FileInfo.str_FileName))
        try
        f_HFORunMethod()            
        catch
            warndlg('HFO detection aborted!')
            return
        end
        p_HFOWaitFigure(st_WaitOutput,...
            'FilePatch',1)        
        
        if ~isfield(st_HFOData.v_ChHFOInfo{...
                st_HFOControl.s_IdxCycle},'m_EvtLims')
            
            close(st_WaitOutput.main)        
            return
        end
            
        if ~isempty(st_hLines.MainLines)
            
            for kk = 1:numel(st_HFOData.v_ChHFOInfo)
                
                st_HFOControl.s_IdxCycle   = kk;
                % Set Cluster in time scope axes
                f_HFOBuildCluster()
            end
            
            % Change window plotted
            f_DisplayProcess()
        end
        
        p_HFOWaitFigure(st_WaitOutput,...
            'SaveButt',1)
        p_HFOWaitFigure(st_WaitOutput,...
            'CloseButt',1)
        
    end
%:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_RunMultiFileAnalysis()
        % Set Mulit File Options for analysis
        
        
        s_IsMulFileHFO      = 1;
        st_Data.s_Sampling  = st_ChInfo.st_FileInfo{...
                              get(st_SelCht.FileList,'Value')...
                              }.v_SampleRate(1);
        
        % Check if values of frequency are valid
        [v_Values, s_Check]      = f_CheckTextNumbers(...
                                    get(st_HFOMethod.FreqTxtMin,'string'),...
                                    get(st_HFOMethod.FreqTxtMax,'string'),...
                                    st_Data.s_Sampling/2);    
       
        if s_Check == -1
            uicontrol(st_HFOMethod.FreqTxtMin)
            return
        elseif s_Check == -2
            uicontrol(st_HFOMethod.FreqTxtMax)
            return
        end
        
        clear st_HFOData
        
        st_HFOSettings.s_FreqIni    = v_Values(1);
        st_HFOSettings.s_FreqEnd    = v_Values(2);
                    
        if ~isfield(st_Data,'s_TotalTime')
            st_Data.s_TotalTime     = diff(st_Data.v_TimeLims)*60;
        end
        
        pause(0.001)    
        
        f_FigureAuxCloseAction(st_HFOMethod.CancelButton)
        
        % Clear data from previous analysis
        f_LinesClear()
        
        % Set Waiting Figure
        st_WaitOutput   = p_HFOWaitFigure();
        
        pause(0.001)
        
        st_HFOControl.str_ChLoad    = st_ChInfo.str_ChName(...
                                    st_HFOControl.v_ChannelIdx);
                                        
        for kk = 1:numel(st_FilePath.name)
                        
            set(st_SelCht.FileList,'Value',kk)
        
            f_HFOCreateSaveFile(kk)
            
            if ~isempty(str_TempFile)
                if ~isempty(which(str_TempFile))
                    delete(str_TempFile)
                end
            end
            
            p_HFOWaitFigure(st_WaitOutput,...
                        'FileString',st_FilePath.name{kk})
            p_HFOWaitFigure(st_WaitOutput,...
                        'FilePatch',(kk-1)/numel(st_FilePath.name))
            p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Starting HFO Detection File: ',...
                        st_FilePath.name{kk}))
            p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('At Time: ', datestr(now)))
                        
            for jj = 1:numel(st_HFOControl.str_ChLoad)
                                            
                st_HFOControl.v_ChannelIdx= 1;
                st_ChInfo.str_ChLoad  	= st_HFOControl.str_ChLoad(jj);
                st_ChInfo.str_MtgeLoad    = st_ChInfo.str_Montage(jj);
                
                f_ChannelLoad()
            
                %Check if a channel is selected
                if isempty(st_ChInfo.str_ChName)
                    st_ChInfo.FlagError  = true;
                    continue
                end
                
                s_Percentage 	= (jj-1)/numel(st_ChInfo.str_ChName);
                                    
                p_HFOWaitFigure(st_WaitOutput,...
                        'ChanString',st_ChInfo.str_ChLoad)
                p_HFOWaitFigure(st_WaitOutput,...
                        'ChanPatch',s_Percentage)
                    
                figure(st_WaitOutput.main)

                f_HFORunMethod() 
            end            
           
            p_HFOWaitFigure(st_WaitOutput,...
                        'ChanPatch',1)
        end
        
        p_HFOWaitFigure(st_WaitOutput,...
            'FilePatch',1)                       
        p_HFOWaitFigure(st_WaitOutput,...
            'SaveButt',1)
        p_HFOWaitFigure(st_WaitOutput,...
            'CloseButt',1)
        
    end
%:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	function f_HFORunVisualMarking()
        % Run Method for HFO Analysis
        
        % Check if there are previous clusters
        if ~isempty(st_HFOControl.v_hCluster)
            for kk = 1:numel(st_HFOControl.v_hCluster)
                for jj = 1:numel(st_HFOControl.v_hCluster{kk})
                    if ishandle(st_HFOControl.v_hCluster{kk}(jj))
                        delete(st_HFOControl.v_hCluster{kk}(jj))
                    end
                end
            end
        end        
        
        % Check if values of frequency are valid
        [v_Values, s_Check]      = f_CheckTextNumbers(...
                                    get(st_HFOMethod.FreqTxtMin,'string'),...
                                    get(st_HFOMethod.FreqTxtMax,'string'),...
                                    st_Data.s_Sampling/2);    
       
        if s_Check == -1
            uicontrol(st_HFOMethod.FreqTxtMin)
            return
        elseif s_Check == -2
            uicontrol(st_HFOMethod.FreqTxtMax)
            return
        end
        
        clear st_HFOData
        
        f_FigureAuxCloseAction(st_HFOMethod.CancelButton)
        
        st_HFOSettings.s_FreqIni    = v_Values(1);
        st_HFOSettings.s_FreqEnd    = v_Values(2);
        st_HFOControl.s_CurrChIdx = st_HFOControl.v_ChannelIdx;
        
        % Place Texts
        set(st_TimeFreq.FreqTxtIni,...
            'String',sprintf('%4.2f',st_HFOSettings.s_FreqIni))
        set(st_TimeFreq.FreqTxtEnd,...
            'String',sprintf('%4.2f',st_HFOSettings.s_FreqEnd))
        set(st_TimeFreq.FreqTxtRes,...
            'String',sprintf('%4.2f',64))
        
        % Resize main panel
        set(st_hToolbar.Panel,'Position',[0 0 .75 .95])
        set(st_hToolbar.VisualMark,'Visible','on')
        
        % Select controls to show
        set(st_VisualMark.Channel,...
            'String',st_ChInfo.str_ChLoad(st_HFOControl.s_CurrChIdx))
        set(st_TimeFreq.ChList,'Value',st_HFOControl.s_CurrChIdx)
        
        set(st_Select.TimFrqPanel,'Value',1)        
        
        f_TimeFreqProcess()
        
        set(st_SegmAnalys.Cur1Button,'Value',1)
        set(st_SegmAnalys.Cur2Button,'Value',1)
        f_CursorPlaceCur1(st_SegmAnalys.Cur1Button)
        f_CursorPlaceCur2(st_SegmAnalys.Cur2Button)
        
        % Select data to save in HFO file   :::::::::::::::::::::::::::::::           
        st_HFOData.str_FileName     = st_FileInfo.str_FileName;        
        st_HFOData.v_TimeLims       = st_Data.v_TimeLims;
        st_HFOData.str_ChtLabels  = st_Data.v_Labels(...
                                    st_HFOControl.v_ChannelIdx);                        
        st_HFOData.v_ChHFOInfo    = cell(numel(...
                                    st_HFOControl.v_ChannelIdx),1);
        
        st_HFOControl.v_hCluster    = cell(numel(...
                                    st_HFOControl.v_ChannelIdx),1);        
        
        st_HFOControl.s_CurrChIdx = st_HFOControl.v_ChannelIdx;
        st_HFOControl.s_IdxCycle    = 1;
        
        st_HFOAnalysis.str_ChLabel  = st_Data.v_Labels(...
                                    st_HFOControl.s_CurrChIdx);
                                
        st_HFOAnalysis.s_Sampling   = st_FileInfo.v_SampleRate(...
                                    st_HFOControl.s_CurrChIdx);
                                
        st_HFOAnalysis.str_DetMethod= 'Visual Marking';    
        st_HFOAnalysis.m_EvtLims    = [];
        
    end
%:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	function f_HFORunMethod() %  Insert here Selection Options[**INSERT!**]
        % Run Method for HFO Analysis
        
        % Check if there are previous clusters
        if ~isempty(st_HFOControl.v_hCluster)
            for kk = 1:numel(st_HFOControl.v_hCluster)
                for jj = 1:numel(st_HFOControl.v_hCluster{kk})
                    if ishandle(st_HFOControl.v_hCluster{kk}(jj))
                        delete(st_HFOControl.v_hCluster{kk}(jj))
                    end
                end
            end
        end
        
        % Select data to save in HFO file                            
        st_HFOData.str_FileName     = st_FileInfo.str_FileName;        
        st_HFOData.v_TimeLims       = st_Data.v_TimeLims;
        st_HFOData.str_ChtLabels  = st_Data.v_Labels(...
                                    st_HFOControl.v_ChannelIdx);
        st_HFOData.v_ChHFOInfo    = cell(numel(...
                                    st_HFOControl.v_ChannelIdx),1);        
        st_HFOControl.v_hCluster    = cell(numel(...
                                    st_HFOControl.v_ChannelIdx),1);
        
        for kk = 1:numel(st_HFOControl.v_ChannelIdx)
                                        
            st_HFOControl.s_CurrChIdx = st_HFOControl.v_ChannelIdx(kk);
            st_HFOControl.s_IdxCycle    = kk;
            st_HFOAnalysis.str_ChLabel  = st_Data.v_Labels(...
                                        st_HFOControl.s_CurrChIdx);
            st_HFOAnalysis.s_Sampling   = st_FileInfo.v_SampleRate(...
                                        st_HFOControl.s_CurrChIdx);
            if ~s_IsMulFileHFO
                s_Percentage 	= (kk-1)/numel(st_HFOControl.v_ChannelIdx);
                                    
                p_HFOWaitFigure(st_WaitOutput,...
                        'ChanString',st_HFOAnalysis.str_ChLabel)
                p_HFOWaitFigure(st_WaitOutput,...
                        'ChanPatch',s_Percentage)
            end
            
            p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Starting Detection Channel: ',...
                        cell2mat(st_HFOAnalysis.str_ChLabel)))
                        
            p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('At Time: ', datestr(now)))
                         
            s_ticID = tic;
            switch get(st_HFOMethod.MethodList,'Value')
                case 2
                    f_HFOSet_STE()
                case 3
                    f_HFOSet_SLL()
                case 4
                    f_HFOSet_HIL()
                case 5
                    f_HFOSet_MNI()
                %case 6     % [**INSERT!**] Insert here new case for the new method
                %   f_HFOSet-XXX()    
                %   Insert funtion for reading the settings for the new method implemented
                otherwise
                    disp('Method no implemented')
            end
            
            if ~isfield(st_HFOAnalysis,'m_EvtLims')
                return
            end
            
            disp('Time of channel processing:')
            toc(s_ticID)
            
            % Set Channel Info Cell
            f_HFOSetChInfo()
            
            % Save HFO Info per channel
            f_HFOSaveCh()
            
        end
        
        if ~s_IsMulFileHFO
            p_HFOWaitFigure(st_WaitOutput,...
                        'ChanPatch',1)
        end
        
    end

%% [Functions] Top Menu - File
% In this section are indicated the nested functions for Top Menu: FILE
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_DataClear(hObject,~)
    % Clear all data from Signals and Analysis
    
        if sum(ishandle(hObject)) || strcmpi(hObject,'all')
            str_mode    = 'all';
        else
            str_mode    = 'data';
        end
        
        set(st_hIcons.clear,'State','off')
        
        % Clear old data if exist
        
        clear st_Data
        
        f_DataClearAnalysis()
        
        st_Data.v_Labels        = ' ';
        
        clear st_Spectrum
        
        st_Spectrum.s_Exists	= false;
        
        clear st_FilterData
        st_FilterData.s_isAllFiltered	= false;
        st_FilterData.v_NewChIdx        = false;
        st_FilterData.s_Exists      	= false;        
        st_FilterData.m_ChFilter        = [];
        st_FilterData.v_ChIdx           = [];
        st_FilterData.v_FiltCutFr       = [];
        

        if strcmpi(str_mode,'all')
            clear st_AdvancedHFO
            st_AdvancedHFO.Files    = [];
        end
        
        f_PlaceAuxControlData()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_DataClearAnalysis(~,~)
    % Clear data from Analysis
    
        f_LinesClear()
        
        st_HFOData.str_FileName         = [];
        st_HFOData.str_ChtLabels      = [];
        st_HFOData.v_ChHFOInfo        = [];
        st_HFOControl.m_EvtLimDisp      = [];
        st_HFOControl.v_hCluster        = [];
        st_HFOControl.v_hLines          = [];
        st_HFOControl.s_CurrChIdx     = [];
        st_HFOControl.v_ChannelIdx    = [];
        st_HFOAnalysis                  = struct;
        st_Spectrum.v_WindLims          = [-1 -1];
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesClear()
    % Clear data Lines
        
        if ishandle(st_hAxes.Main)
            delete(st_hAxes.Main)
            clear st_hLines.Main
        end
        
        if ishandle(st_hAxes.Cursor)
            delete(st_hAxes.Cursor)
            clear st_hLines.Cursor
        end
        
        if ishandle(st_hAxes.TimeScope)
            delete(st_hAxes.TimeScope)
            clear st_hLines.TimeScope
        end
        
        if ishandle(st_hAxes.TimeFreq)
            delete(st_hAxes.TimeFreq)
            clear st_hLines.TimeFreq
        end
        
        if ishandle(st_hAxes.Filter)
            delete(st_hAxes.Filter)
            clear st_hLines.Filter
        end
        
        if ishandle(st_hLines.MainLines)
            delete(st_hLines.MainLines)
            clear st_hLines.MainLines
        end
        
        if ishandle(st_hLines.PatchTime)
            delete(st_hLines.PatchTime)
            clear st_hLines.PatchTime
        end
        
        if ishandle(st_Cursors.s_hCursor1)
            delete(st_Cursors.s_hCursor1)
            clear st_Cursors.s_hCursor1
        end
        
        if ishandle(st_Cursors.s_hCursor2)
            delete(st_Cursors.s_hCursor2)
            clear st_Cursors.s_hCursor2
        end
        
        if ~isempty(st_Cursors.v_hCurLine1)
            if ishandle(st_Cursors.v_hCurLine1(1))
                delete(st_Cursors.v_hCurLine1(1))
                delete(st_Cursors.v_hCurLine1(2))
                delete(st_Cursors.v_hCurLine1(3))
                clear st_Cursors.v_hCurLine1
            end
        end
        
        if ~isempty(st_Cursors.v_hCurLine2)            
            if ishandle(st_Cursors.v_hCurLine2(1))
                delete(st_Cursors.v_hCurLine2(1))
                delete(st_Cursors.v_hCurLine2(2))
                delete(st_Cursors.v_hCurLine2(3))
                clear st_Cursors.v_hCurLine2
            end
        end
        
        if ishandle(st_hLines.TFImage)
            delete(st_hLines.TFImage)
            clear st_hLines.TFImage
        end
        
        if ishandle(st_hLines.FiltLines)
            delete(st_hLines.FiltLines)
            clear st_hLines.FiltLines
        end
        
        if ishandle(st_HFOControl.v_hCluster)
            delete(st_HFOControl.v_hCluster)
            clear st_HFOControl.v_hCluster
        end
        
        if ishandle(st_HFOControl.v_hLines)
            delete(st_HFOControl.v_hLines)
            clear st_HFOControl.v_hLines
        end
        
        st_hAxes.Main           = [];
        st_hAxes.TimeScope      = [];
        st_hAxes.Cursor         = [];
        st_hAxes.TimeFreq       = [];
        st_hAxes.Filter         = [];
        st_hLines.MainLines     = [];
        st_hLines.PatchTime     = [];
        st_hLines.TFImage       = [];
        st_hLines.FiltLines     = [];
        st_Cursors.s_hCursor1   = [];
        st_Cursors.s_hCursor2   = [];
        st_Cursors.v_hCurLine1  = [];
        st_Cursors.v_hCurLine2  = [];
                            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SaveChannels(~,~)
    % Save analysis    
        set(st_hIcons.save,'State','off')
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SaveInterval (h_Object,~)
        % Save Plotted Signals
        
        set(h_Object,'State','off')
        if ~ishandle(st_hLines.MainLines(1))
            return
        end
        
        v_Event       = f_Secs2hms(st_Position.s_TimeIni + ...
                        f_HMS2Secs(st_Data.v_TimeStart));
                    
        [str_Name,~]    = strtok(st_FileInfo.str_FileName,'.');
        
        str_FileName    = sprintf('%s-Interval-Start_%ih-%im-%0.2gsec',...
                        str_Name,v_Event(1),v_Event(2),v_Event(3));
        
        [str_IntFileName,str_IntFilePath]=...
            uiputfile('*.mat','Save HFO Interval',str_FileName);
        
        if str_IntFileName == 0
            return
        end
           
        Data	= st_Data.m_Data(st_Position.s_IdxIni:st_Position.s_IdxEnd,:);
        
        if iscell(Data)
            Data   = cell2mat(Data); 
        end
                                   
        Header.Sampling	= st_Data.s_Sampling;  
        Header.Samples  = size(Data,1);
        Header.Labels   = st_Data.v_Labels;
        Header.IniTime	= st_Data.v_TimeStart; %#ok<STRNU>
        
        str_IntFile = fullfile(str_IntFilePath,str_IntFileName);    
        save(str_IntFile,'Data','Header')
        
        clear str_Name  v_SigInterval s_FreqSample v_List s_Pos
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_FigureClose(~,~)
        %close all figures
        str_CloseSel = questdlg('Are you sure you want to close all windows?',...
                    'Close Request Dialog','Yes','No','Yes');
                
        switch str_CloseSel, 
            case 'Yes',
                f_DataClear('all')
                delete(st_hFigure.main)
                delete(st_hFigure.MontageCh)
                delete(st_hFigure.SelCh)
                delete(st_hFigure.HFOMethods)
                delete([str_TempFolder '*.mat'])
                
                f_Ini(0,st_Path);
                
            case 'No'
                return
        end
    end

%% [Functions] Top Menu - View
% In this section are indicated the nested functions for Top Menu: VIEW
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PanelConfig(h_Object,~)
        % Hide and show panels    
        % Select the type of object which generates the callback
        switch get(h_Object,'type')
            case 'uimenu'
                %If the object is from the top menu
                if strcmp(get(h_Object,'Checked'),'on')
                    set(h_Object,'Checked','off')
                    s_Value = 0;
                elseif strcmp(get(h_Object,'Checked'),'off')
                    set(h_Object,'Checked','on')
                    s_Value = 1;
                end
                
                switch h_Object
                    case st_hMenu.ViewTF
                         set(st_Select.TimFrqPanel,'Value',s_Value)
                    case st_hMenu.ViewFilt
                         set(st_Select.FilterPanel,'Value',s_Value)
                end
                
            case 'checkbox'
                %If the object is from the selection menu
                str_Status  = get(h_Object,'Value'); 
                if logical(str_Status)
                    str_Status  = 'on';
                else
                    str_Status  = 'off';
                end
                switch h_Object
                    case st_Select.TimFrqPanel
                        set(st_hMenu.ViewTF,'Checked',str_Status);
                    case st_Select.FilterPanel
                        set(st_hMenu.ViewFilt,'Checked',str_Status);
                end
                
        end
        
        
        if st_HFOControl.IsVisualMrk && ...
                ~logical(get(st_Select.TimFrqPanel,'Value'))
            set(st_hMenu.ViewTF,'Checked','on');
            set(st_Select.TimFrqPanel,'Value',1);
        end
        
        st_SpectrumOpt.s_FromDisplay	= 0;
        f_PanelSituate()
        
    end
 %::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PanelSituate()
        % Hide and show panels   
                               
        v_PanelConfig   = [0 0];
        
        if st_Spectrum.s_Exists && logical(get(st_Select.TimFrqPanel,'Value'))
            v_PanelConfig(1)    = 1;
        end
        
        if st_FilterData.s_Exists && logical(get(st_Select.FilterPanel,'Value'))
            v_PanelConfig(2)    = 1;
        end
        
        v_PanelConfig   = mat2str(v_PanelConfig);
        switch v_PanelConfig
            case '[0 0]'
                
                set(st_hPanelObj.SigPanel,...
                    'Position',[0 0 1 1])

                set(st_hPanelObj.FiltPanel,...
                    'Visible','off')

                set(st_hPanelObj.TFPanel,...
                    'Visible','off')
                                
            case '[0 1]'
                
                set(st_hPanelObj.SigPanel,...
                    'Position',[0 .25 1 .75])

                set(st_hPanelObj.FiltPanel,...
                    'Visible','on',...
                    'Position',[0 0 1 .25])
                
                set(st_hPanelObj.TFPanel,...
                    'Visible','off')
                
            case '[1 0]'
                
                set(st_hPanelObj.SigPanel,...
                    'Position',[0 .25 1 .75])

                set(st_hPanelObj.FiltPanel,...
                    'Visible','off')
                
                set(st_hPanelObj.TFPanel,...
                    'Visible','on',...
                    'Position',[0 0 1 .25])
                
            case '[1 1]'
                
                set(st_hPanelObj.SigPanel,...
                    'Position',[0 .5 1 .5])
                                               
                set(st_hPanelObj.FiltPanel,...
                    'Visible','on',...
                    'Position',[0 .25 1 .25])
                
                set(st_hPanelObj.TFPanel,...
                    'Visible','on',...
                    'Position',[0 0 1 .25])
                                      
        end
        
        if strcmpi(get(st_hPanelObj.TFPanel,'Visible'),'on')
            st_SpectrumOpt.s_PlotOK     = 0;            
            st_SpectrumOpt.s_PanelChk	= 0;
            if ~st_SpectrumOpt.s_FromDisplay
                f_DisplayProcess()
            end
        end
        
    end

%% [Functions] Icons :: Toolbar :: File Functions 
% In this section are indicated the nested functions for Independent Icons 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FigureAuxShowHiden(hObject,~)
        %Visualize Auxiliary figure
        
        if hObject == st_hMenu.FileOpen
            hObject = st_hIcons.open;
            set(st_hIcons.open,'state','on')
        elseif hObject == st_hMenu.ToolsHFOMethods
            hObject = st_hIcons.HFODetect;
            set(st_hIcons.HFODetect,'state','on')
        elseif hObject == st_hMenu.ToolsHFOAnalysis
            hObject = st_hIcons.HFOAnalys;
        end
        
        switch hObject
            case st_hIcons.open
                set(st_hFigure.SelCh,'Visible','on')
            case st_hIcons.HFODetect
                set(st_hFigure.HFOMethods,'Visible','on')
            case st_hIcons.HFOAnalys
                set(hObject,'state','off')
                f_HFOOpenAnalysisTool()
            otherwise
        end
            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ZoomSelect(hObject,~)
        %Select Zoom Action or related
        
        s_SkipIdx   =  find(v_IncompatibleZoomButtons ~= hObject);
        
        if hObject == 0
            
            for kk = 1:numel(s_SkipIdx)
                set(v_IncompatibleZoomButtons(s_SkipIdx(kk)),'State','off')
            end
            
            h_zoom = zoom;
            h_pan = pan;
            h_DataCur = datacursormode(st_hAxes.Main);
            set(h_zoom,'Enable','off')
            set(h_pan,'Enable','off')
            set(h_DataCur,'Enable','off')
            return
            
        end
        
        for kk = 1:numel(s_SkipIdx)
            set(v_IncompatibleZoomButtons(s_SkipIdx(kk)),'State','off')
        end
        
        if strcmp('off',get(hObject,'State'))
            h_zoom = zoom;
            h_pan = pan;
            set(h_zoom,'Enable','off')
            pause(0.01)
            set(h_pan,'Enable','off')
            pause(0.01)
            return
        end
        
        set(st_hFigure.main,'CurrentAxes',st_hAxes.Main)
        
        switch hObject
            case st_hIcons.zoominH
                f_ZoomInH();
            case st_hIcons.zoomoutH 
                f_ZoomOutH();                
            case st_hIcons.pan
                f_ZoomPan();
        end
    end

%% [Functions] Icons :: Toolbar :: Zoom Functions
% In this section are indicated the nested functions Zoom Functions
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomInH()
    %Horizontal Zoom In Function
        h_zoom = zoom;
        set(h_zoom,...
            'Direction','in',...
            'Motion','Horizontal',...
            'Enable','on',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeScope,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Cursor,false)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeFreq,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Filter,false)
        
    end
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomOutH()
    %Horizontal Zoom Out Function
        h_zoom = zoom;
        set(h_zoom,...
            'Direction','out',...
            'Motion','Horizontal',...
            'Enable','on',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeScope,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Cursor,false)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeFreq,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Filter,false)
    end
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomPan()
    %Vertical Zoom Out Function
        h_pan = pan;
        set(h_pan,...
            'Enable','on',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesPan(h_pan,st_hAxes.TimeScope,false)
        setAllowAxesPan(h_pan,st_hAxes.Cursor,false)
        setAllowAxesPan(h_pan,st_hAxes.TimeFreq,false)
        setAllowAxesPan(h_pan,st_hAxes.Filter,false)
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ZoomPostZoom(~,~)
        %CallBack when an axis is Zoomed
    
        v_Xlim = get(st_hAxes.Main,'Xlim');
        if v_Xlim(1) < 0
            v_Xlim(1) = 0;
        end
        if v_Xlim(end) > st_Data.s_TotalTime
            v_Xlim(end) = st_Data.s_TotalTime;
        end        
        
        s_WTimeSelected         = v_Xlim(2) - v_Xlim(1);
        st_Position.s_TimeIni   = v_Xlim(1);
       
        set(st_Select.windowText,'String',num2str(s_WTimeSelected))
                
        f_DisplayProcess()
        
    end

%% [Functions] Selection Controls :: Toolbar ::
% In this section are indicated the nested functions for Independent 
% Controls 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_WindWidthChange(~,~)
        % Set Window width
        f_DisplayProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_WindWidthSet()
        % Set Window width

        if strcmp('all',get(st_Select.windowText,'string'))
            
            % Check if there are signals plotted 
            if isempty(st_hAxes.Main)
                return
            end
            
            s_Value = st_Data.s_TotalTime;
            s_Check = 0;
        else
            [s_Value, s_Check]    = f_CheckTextNumbers(...
                                    get(st_Select.windowText,'string'),[],[]);    
        end
        
        if s_Check == -1
            uicontrol(st_Select.windowText)
            s_GlobalCheck        = 1;
            return
        end
        
        % Check if there are signals plotted 
        if isempty(st_hAxes.Main)
            s_GlobalCheck        = 1;
            return
        end

        % Update window with data
        
        if s_Value == inf || s_Value >= st_Data.s_TotalTime
            s_Value	= st_Data.s_TotalTime;
            st_Position.s_TimeIni       = st_Data.v_Time(1);
            st_Position.s_Timelength    = st_Data.s_TotalTime;
            set(st_Select.windowText,'string',num2str(st_Position.s_Timelength))
        elseif s_Value <= 0
            st_Position.s_Timelength    = st_Data.s_TotalTime/10;
            set(st_Select.windowText,'string',num2str(st_Position.s_Timelength))
        else
            st_Position.s_Timelength    = s_Value; 
        end
               
        if ~st_FileInfo.s_Check
            return
        end
        
        if (st_Position.s_TimeIni + s_Value) > st_Data.v_Time(end)
            
            st_Position.s_TimeIni       = st_Data.v_Time(end) - s_Value;
            st_Position.s_Timelength    = s_Value;
            
            if st_Position.s_TimeIni < 0
                st_Position.s_TimeIni   = 0;
            end
                        
        end    
                        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_WindWidthUP(~,~)
        % Increments window width in 0.5  
        s_Value = str2double(get(st_Select.windowText,'string'));
        s_Value = s_Value + 0.5;
        set(st_Select.windowText,'string',num2str(s_Value));
        f_DisplayProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_WindWidthDOWN(~,~)
        % Decrements window width in 0.5  
        s_Value = str2double(get(st_Select.windowText,'string'));
        s_Value = s_Value - 0.5;
        if s_Value <= 0
            return
        end
        set(st_Select.windowText,'string',num2str(s_Value));
        f_DisplayProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesScaleChange(~,~)
        % Change Scale
        if isfield(st_Data,'m_Data')
            f_LinesBuildSignalLines()
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetVertPosition(h_Object,~)
        % Set Vertical Position
        st_Position.v_VerticalPos(2)    = get(h_Object,'Value');
        
        v_Idx                           = find(st_Offset.Vector ==...
                                              st_Offset.SelectedVals(end));
        
        st_Position.v_VerticalPos(1)    = v_Idx;
        
        if st_Position.v_VerticalPos(1) + st_Position.v_VerticalPos(2) >...
                numel(st_Offset.Vector)
            st_Position.v_VerticalPos(1) = numel(st_Offset.Vector) - ...
                                            st_Position.v_VerticalPos(2)+1;
        end
                
        % Set New Lines 
        f_LinesBuildSignalLines()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PanelsViewControls(h_Object,~)
        % Select Visualization Panel
        switch get(h_Object,'Value')
            case 1
                set(st_hToolPanel.Segment,'Visible','off')
                set(st_hToolPanel.Filter,'Visible','on')
                set(st_hToolPanel.TimeFreq,'Visible','off')
            case 2
                set(st_hToolPanel.Segment,'Visible','off')
                set(st_hToolPanel.Filter,'Visible','off')
                set(st_hToolPanel.TimeFreq,'Visible','on')
            case 3       
                set(st_hToolPanel.Segment,'Visible','on')
                set(st_hToolPanel.Filter,'Visible','off')
                set(st_hToolPanel.TimeFreq,'Visible','off')         
        end
    end

%% [Functions] Selection Controls :: Filter - Toolbar ::
% In this section are indicated the nested functions for Filter Controls 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterNotch(hObject,~)
        % Select Notch Filter option
        
        % Check if there are signals plotted 
        if isempty(st_hAxes.Main)
                return
        end
            
        % Select Options
        switch get(hObject,'Value')
            case 1
                f_FilterReset()
                return
            case 2
                st_HandleMsg	= f_waitmsg('Filtering Signal');
                pause(1)
                
                v_NotchFreqs    = 50;
                
            case 3
                st_HandleMsg	= f_waitmsg('Filtering Signal');
                pause(1)
        
                v_NotchFreqs    = 60;
                
            case 4
                st_HandleMsg	= f_waitmsg('Filtering Signal');
                pause(1)
                
                v_NotchFreqs    = 50:50:st_Data.s_Sampling/2;
                v_NotchFreqs    = v_NotchFreqs(1:end-1);
                
            case 5
                st_HandleMsg	= f_waitmsg('Filtering Signal');
                pause(1)
        
                v_NotchFreqs    = 60:60:st_Data.s_Sampling/2;
                v_NotchFreqs    = v_NotchFreqs(1:end-1);
                
        end
        
        s_IsFFT     = 1;
                    
        while 1
            try
                if s_IsFFT
                    st_Data.m_Data  = f_fftFilter(st_Data.m_Data,...
                                    st_Data.s_Sampling,v_NotchFreqs,21,'stop')';
                    s_IsError       = 0;
                    break                                
                else
                    s_End   = s_Ini + s_Length  - 1;
                    if s_End > size(st_Data.m_Data,1)
                        s_End = size(st_Data.m_Data,1);
                    end
                                    
                    if s_End - s_Ini + 1 >  size(st_Data.m_Data,2)
                        [st_Data.m_Data(s_Ini:s_End,:),...
                                            m_CurrCond]	= filter(st_FirFil,1,...
                                            st_Data.m_Data(...
                                            s_Ini:s_End,:),...
                                            m_CurrCond);
                    end
                                                
                    s_Ini	= s_End + 1;
                    if s_End >= size(st_Data.m_Data,1);
                        s_IsError	= 0;
                        break
                    end
                end
            catch
                if s_IsFFT
                    
                    st_FirFil	= f_DesignFIRfilter(st_Data.s_Sampling,...
                                [v_NotchFreqs(1) - 2, v_NotchFreqs(1) + 2],...
                                [v_NotchFreqs(1) - 1, v_NotchFreqs(1) + 1]);
                    m_CurrCond  = zeros(numel(st_FirFil)-1,size(st_Data.m_Data,2));
                    s_Divide	= 1;
                    s_Ini       = 1;
                    s_IsFFT     = 0;
                    
                elseif s_Length == 10
                    s_IsError	= 1;
                    break
                    
                else
                    s_Divide	= s_Divide * 10;
                end
                                
                s_Length    = round(size(st_Data.m_Data,1)/s_Divide);
                if s_Length < 1
                    s_Length = 10;
                end
            end                        
        end
        
        if ishandle(st_HandleMsg.s_WaitFigure)
            delete(st_HandleMsg.s_WaitFigure)
            clear st_HandleMsg
        end
        
        if s_IsError
            errordlg('Filter can not be performed with the current resources',...
                'Filter Error')
            set(hObject,'Value',1)
            return
        else
            st_FilterData.s_isAllFiltered	= true;
        end
        
        % Set Signal Lines, patch time and window display
        f_DisplayProcess()
                    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterReset(s_Plot,~)
        % Reset Filter
        
        if nargin < 1
            s_Plot = 1;
        elseif s_Plot ~= 0
            s_Plot = 1;
        end
        
        set(st_Filter.notchList,'Value',1)
        
        % Check if there are signals plotted 
        if isempty(st_hAxes.Main)
        	return
        end
        
        % Load Original Signal
        if isempty(which(str_TempFile))
            return
        end
        
        m_Data          = [];
        st_HandleMsg    = f_waitmsg('Loading Original Signal');pause(1)

        load(str_TempFile)
        st_Data.m_Data  = m_Data;
        clear m_Data
        
        if ishandle(st_HandleMsg.s_WaitFigure)
            delete(st_HandleMsg.s_WaitFigure)
            clear st_HandleMsg
        end
        
        st_FilterData.s_isAllFiltered    = false;
        
        % Set Signal Lines, patch time and window display
        if s_Plot
            f_DisplayProcess()
        end    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterProcess(~,~)
        % Reset Manual Filter
        
        % Check if there are signals plotted 
        if isempty(st_hAxes.Main)
        	return
        end
                
        % Check if strings are true numbers
        [v_Freqs,s_Check]   = f_CheckTextNumbers(...
                            get(st_Filter.FiltLowText,'string'),...
                            get(st_Filter.FiltHighText,'string'),...
                            st_Data.s_Sampling/2,1);    
                                
        if s_Check == -1
            uicontrol(st_Filter.FiltLowText)
            return
        elseif s_Check == -2
            uicontrol(st_Filter.FiltHighText)
            return
        end
        
        
        % Check filter type 
        if (v_Freqs(1) == 0) && (v_Freqs(2) == 0)
            warndlg('Please check cutoff frequencies','Filter warning')
            return
        end
        
        if (v_Freqs(1) < 0) || (v_Freqs(2) < 0)
            warndlg('Please check cutoff frequencies','Filter warning')
            return
        end
        
        if v_Freqs(1) >= v_Freqs(2) && v_Freqs(2) ~=0
            warndlg('Please check cutoff frequencies','Filter warning')
            return
        end
        
        if v_Freqs(1) == 0 
            v_FreqsCut	= v_Freqs(2);
            v_FreqStop	= v_FreqsCut+v_FreqsCut*0.01;
            s_FilType   = -1;
        elseif v_Freqs(2) == 0
            v_FreqsCut	= v_Freqs(1);
            v_FreqStop	= v_FreqsCut-v_FreqsCut*0.01;
            s_FilType   = 1;
        else
            v_FreqsCut	= [v_Freqs(1) v_Freqs(2)];
            v_FreqStop	= [v_Freqs(1) - v_Freqs(1)*.01 ...
                        v_Freqs(2) + v_Freqs(2)*.01 ];
            s_FilType   = 0;
        end
        
        % Check Filter Type (FIR or IIR)
        
        s_isIIR	= get(st_Filter.FiltTyp,'Value');
        s_isIIR	= s_isIIR == 1;
        
        % Check filter mode (all channels or one electrode)        
        if logical(get(st_Filter.AllChk ,'Value'))
            % Filter all channels
            if  st_FilterData.s_isAllFiltered
                f_FilterReset(0)
            end
            
            st_HandleMsg	= f_waitmsg('Filtering Signal'); pause(1)
            
            if s_isIIR
                try 
                    s_Filter        = f_DesignIIRfilter(st_Data.s_Sampling,...
                                    v_FreqsCut,v_FreqStop);
                    st_Data.m_Data  = f_FilterIIR(st_Data.m_Data,s_Filter);
                    s_IsError       = 0;
                catch
                    
                    errordlg(sprintf('%s %s %s',...
                        'An IIR Filter can not be performed',...
                        'with the current resources.',...
                        'Please try a FIR filter'),...
                        'Filter Error')
                    
                    s_IsError       = 1;
                    
                end
            else
                s_Filter	= f_DesignFIRfilter(st_Data.s_Sampling,...
                            v_FreqsCut,v_FreqStop);
                s_IsFilFil	= 1;

                while 1
                    try
                        if s_IsFilFil
                            st_Data.m_Data  = fd_filtfilt(...
                                            s_Filter,1,st_Data.m_Data);
                            s_IsError       = 0;
                            break                                
                        else
                            s_End   = s_Ini + s_Length  - 1;
                            if s_End > size(st_Data.m_Data,1)
                                s_End = size(st_Data.m_Data,1);
                            end
                            
                            if s_End - s_Ini + 1 >  size(st_Data.m_Data,2)
                                [st_Data.m_Data(s_Ini:s_End,:),...
                                                m_CurrCond]	= filter(s_Filter,1,...
                                                            st_Data.m_Data(...
                                                            s_Ini:s_End,:),...
                                                            m_CurrCond);
                            end
                            
                            s_Ini	= s_End + 1;
                            if s_End >= size(st_Data.m_Data,1);
                                s_IsError	= 0;
                                break
                            end
                        end
                    catch 
                        if s_IsFilFil

                            m_CurrCond  = zeros(numel(s_Filter)-1,...
                                        size(st_Data.m_Data,2));
                            s_Divide	= 1;
                            s_Ini       = 1;
                            s_IsFilFil	= 0;

                        elseif s_Length == 10
                            s_IsError	= 1;
                            break

                        else
                            s_Divide	= s_Divide * 10;
                        end

                        s_Length    = round(size(st_Data.m_Data,1)/s_Divide);
                        if s_Length < 1
                            s_Length = 10;
                        end
                    end                        
                end
                            
            end
            
            if ishandle(st_HandleMsg.s_WaitFigure)
                delete(st_HandleMsg.s_WaitFigure)
                clear st_HandleMsg
            end
                    
            if s_IsError
                errordlg('Filter can not be performed with the current resources',...
                    'Filter Error')
                return
            else
                st_FilterData.s_isAllFiltered	= true;
            end
            
        else            
            
            s_Counter	= 0;                
            h_wBar      = waitbar(0,'Please wait, Filtering Channels...');
                        
            if ~isfield(st_FilterData,'v_NewChIdx')
                st_FilterData.v_NewChIdx	= false;
                st_FilterData.v_ChIdx       = [];
                st_FilterData.v_FiltCutFr   = [];                
            end
            
            if st_FilterData.v_NewChIdx == 0
                st_FilterData.v_NewChIdx = 1;
            end
            if s_isIIR
                s_Filter	= f_DesignIIRfilter(st_Data.s_Sampling,...
                            v_FreqsCut,v_FreqStop);
            else
                s_Filter	= f_DesignFIRfilter(st_Data.s_Sampling,...
                            v_FreqsCut,v_FreqStop);
            end
            
            try 
                for kk = st_FilterData.v_NewChIdx
                    
                    switch s_FilType
                        case -1
                            str_FilterFreq	= strcat('[<',...
                                            mat2str(v_FreqsCut),...
                                            ']');
                        case 1
                            str_FilterFreq	= strcat('[>',...
                                            mat2str(v_FreqsCut),...
                                            ']');
                        otherwise
                            str_FilterFreq	= mat2str(...
                                            v_FreqsCut);
                    end
                    
                    % Check if filter configuration is already set
                    s_IsRepeated	= any(ismember(st_FilterData.v_FiltCutFr(:),...
                                    str_FilterFreq) & ...
                                    ismember(st_FilterData.v_ChIdx(:),kk));
                                     
                    if s_IsRepeated
                        continue
                    end
                                        
                    if s_isIIR
                        st_FilterData.m_ChFilter(:,end+1)	= f_FilterIIR(...
                                                            st_Data.m_Data(:,kk),...
                                                            s_Filter);
                    else
                        st_FilterData.m_ChFilter(:,end+1)   = fd_filtfilt(...
                                                            s_Filter,1,...
                                                            st_Data.m_Data(:,kk));
                    end
                    
                    st_FilterData.v_ChIdx(end+1,1)      = kk;
                    st_FilterData.v_FiltCutFr{end+1,1}	= str_FilterFreq;
                    
                    st_FilterData.v_ChIdx(...
                        cellfun(@isempty,st_FilterData.v_FiltCutFr)) = [];
                    st_FilterData.v_FiltCutFr(...
                        cellfun(@isempty,st_FilterData.v_FiltCutFr)) = [];
                    
                    waitbar(s_Counter + 1 / numel(st_FilterData.v_NewChIdx))
                end
                
                st_FilterData.s_Exists  = true;
                close(h_wBar)
                set(st_Select.FilterPanel,'Value',1)
                
            catch
                                
                close(h_wBar)
                errordlg(sprintf('%s %s',...
                    'A parallel Filter can not be performed',...
                    'with the current resources.'),...
                    'Filter Error')
            end
        end
        
        % Set Signal Lines, patch time and window display
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterBuildLines()
        % SubFunction which sets the filter section displayed
        
        if ~st_FilterData.s_Exists
            return
        end
        
        s_Scale     = get(st_Filter.FiltAmpScale,'Value');
        s_Scale     = v_AmpliScales(s_Scale);
                        
        v_OffsetFilter  = (1:numel(st_FilterData.v_ChIdx)).*st_Offset.Value;       
        
        set(st_hAxes.Filter,...
            'XLim',get(st_hAxes.Main,'XLim'),...  
            'XTick',get(st_hAxes.Main,'XTick'),...
            'YTick',v_OffsetFilter,...
            'YTickLabel',cellfun(@strcat,...
                        st_Data.v_Labels(st_FilterData.v_ChIdx),...
                        repmat({'_'},...
                        size(st_Data.v_Labels(st_FilterData.v_ChIdx))),...
                        st_FilterData.v_FiltCutFr,...
                        repmat({'Hz'},...
                        size(st_Data.v_Labels(st_FilterData.v_ChIdx))),...
                        'UniformOutput',false),...
            'YLim',[v_OffsetFilter(1)-st_Offset.Value ...
                    v_OffsetFilter(end)+ st_Offset.Value])
        
        % Delete previous Lines
        for kk = 1:numel(st_hLines.FiltLines)
            if ishandle(st_hLines.FiltLines(kk))
                delete(st_hLines.FiltLines(kk))
            end
        end

%         delete(st_hAxes.Filter.Children) % Only for versions > R2014a
%         clear st_hLines.FiltLines
        
        % Plot Filter Lines
        st_hLines.FiltLines  = - ones(numel(st_FilterData.v_ChIdx),1);
        for kk=1:numel(st_FilterData.v_ChIdx)
            st_hLines.FiltLines(kk)  = line(...
                                    'Xdata',st_Data.v_Time(...
                                                st_Position.v_IdxDisplay),...
                                    'Ydata',v_OffsetFilter(kk)- s_Scale .*...
                                                st_FilterData.m_ChFilter(...
                                                st_Position.v_IdxDisplay,kk),...
                                    'Parent',st_hAxes.Filter,...
                                    'Color',v_SigColor);
        end
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterSelectAll(hObject,~)
        % Enable Filter All function
        
        if logical(get(hObject,'Value'))
            set(st_Filter.ChButt,'Enable','off')
            set(st_Filter.FiltAmpScale,'Enable','off')
            set(st_Filter.FiltRemoveButt,'Enable','off')
        else
            set(st_Filter.ChButt,'Enable','on')
            set(st_Filter.FiltAmpScale,'Enable','on')
            set(st_Filter.FiltRemoveButt,'Enable','on')
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterAddCht(~,~)
        % Select some eloctrode for filter in panel display
        
        % Check if there are signals plotted 
        if isempty(st_hAxes.Main)
        	return
        end
        
        [v_Idx,s_Selection]	= listdlg(...
                            'ListString',st_Data.v_Labels,...
                            'SelectionMode','multiple',...
                            'PromptString','Select Channels:',...
                            'Name','Add Filter',...
                            'OKString','Add');

        if ~s_Selection
            return
        end
        
        % Filter one electrode
        st_FilterData.v_NewChIdx  = v_Idx;
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterScaleChange(~,~)
        % Change Scale
        if st_FilterData.s_Exists
            f_FilterBuildLines()
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterRemoveChannel(~,~) 
        %Remove unique channels in filter panel
        
        if ~st_FilterData.s_Exists
            return
        end
        
        [v_Idx,s_Selection]	= listdlg(...
                            'ListString',cellfun(@strcat,...
                            st_Data.v_Labels(st_FilterData.v_ChIdx),...
                            repmat({'_'},...
                            size(st_Data.v_Labels(st_FilterData.v_ChIdx))),...
                            st_FilterData.v_FiltCutFr,...
                            repmat({'Hz'},...
                            size(st_Data.v_Labels(st_FilterData.v_ChIdx))),...
                            'UniformOutput',false),...
                            'SelectionMode','multiple',...
                            'PromptString','Select Channels:',...
                            'Name','Delete Filter',...
                            'OKString','Delete');

        if ~s_Selection
            return
        end
        
        % Delete selected
        st_FilterData.v_ChIdx(v_Idx)      = [];
        st_FilterData.m_ChFilter(:,v_Idx) = [];
        st_FilterData.v_FiltCutFr(v_Idx)    = [];
        
        if isempty(st_FilterData.v_ChIdx)
            st_FilterData.s_Exists      = false;
            st_FilterData.m_ChFilter  = [];
        end
        
        % Draw lines
        f_DisplayProcess()        
        
    end

%% [Functions] Selection Controls :: Spectrogram Tools - Toolbar ::
% In this section are indicated the nested functions for Auxliary Figure
% Spectrogram Tools
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_TimeFreqSetOptions(~,~)
        % Change options for Spectrogram Visualization 
        
        [st_SpectrumOpt.s_TimeFreqScale, s_Check]	= f_CheckTextNumbers(...
                                                    '-1e-10',...
                                                    get(st_TimeFreq.Scale ,...
                                                    'string'),1);
        
        if s_Check == -2
            uicontrol(st_TimeFreq.Scale)
            return
        end
        
        st_SpectrumOpt.s_TimeFreqScale = st_SpectrumOpt.s_TimeFreqScale(2);
        
        
        if logical(get(st_Select.TimFrqPanel,'Value'))
            st_SpectrumOpt.s_PlotOK    = 0;
            f_TimeFreqPlotSpectrum()
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_TimeFreqProcess(~,~)
        %Toogle visibility of Spectrogram
        
        str_CloseOK = questdlg(...
            ['Depending on the time displayed and the frequency resolution, ' ...
            'the scalogram computing may be slow. ' ...
            'If you want a faster processing, ' ...
            'please consider reducing the window time in the control panel. ' ...
            'Would you like to proceed?'],...            
            'Time Frequency Request Dialog','Yes','No','Yes');
        
        switch str_CloseOK
            case 'Yes'
                
                f_TimeFreqSetDisplay()
                
                % Set Signal Lines, patch time and window display
                if ~isnan(st_Spectrum.v_FreqLims)
                    set(st_Select.TimFrqPanel,'Value',1)
                    st_SpectrumOpt.s_PlotOK = 0;
                end
                
                f_DisplayProcess()
                
            case 'No'
                set(st_Select.TimFrqPanel,'Value',0)
                
                st_SpectrumOpt.s_FromDisplay	= 0;
                f_PanelSituate()
        end
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_TimeFreqSetDisplay()
        % Configure Scalogram Display
        % Check if there are signals plotted 
        
        if isempty(st_hAxes.TimeFreq)
        	return
        end
                                                
        st_Spectrum.st_FilterData.v_NewChIdx  = get(st_TimeFreq.ChList,...
                                                'Value');
        
        st_Spectrum.s_TFSampling        = st_Data.s_Sampling;
        [st_Spectrum.v_FreqLims, s_Check] = f_CheckTextNumbers(...
                                        get(st_TimeFreq.FreqTxtIni,'string'),...
                                        get(st_TimeFreq.FreqTxtEnd,'string'),...
                                        st_Spectrum.s_TFSampling/2);    
                                
        if s_Check == -1
            uicontrol(st_TimeFreq.FreqTxtIni)
            return
        elseif s_Check == -2
            uicontrol(st_TimeFreq.FreqTxtEnd)
            return
        end

        if strcmpi(get(st_TimeFreq.FreqTxtEnd,'string'),'inf')
            set(st_TimeFreq.FreqTxtEnd,'string',...
                num2str(st_Spectrum.s_TFSampling/2))
        end
        
        % Check if value of epoch time is correct
        [st_Spectrum.s_FreqRes, s_Check] 	= f_CheckTextNumbers('0',...
                                            get(st_TimeFreq.FreqTxtRes,...
                                            'string'));    
       
        if s_Check == -2
            uicontrol(st_TimeFreq.FreqTxtRes)
            return
        end
                
        st_Spectrum.s_FreqRes     = st_Spectrum.s_FreqRes(2);
        
        if st_Spectrum.s_FreqRes < 10
            warndlg('Frequency Resolution must be bigger than 10','Warning')
            uicontrol(st_TimeFreq.FreqTxtRes)
            return
        end
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_TimeFreqSetSpectrum()
        % Set Scalogram
        s_miTimexPlot   = 0.25;
        if ~logical(get(st_Select.TimFrqPanel,'Value')) || ...
                any(isnan(st_Spectrum.v_FreqLims))
            return
        end
        
        if ~isfield(st_Data,'m_Data')
            return
        end
                
        if st_SpectrumOpt.s_PlotOK
            return
        end
        
        if sum(st_Spectrum.v_WindLims == ...
            [st_Position.s_IdxIni st_Position.s_IdxEnd]) == 2 && ...
            sum(get(st_hAxes.TimeFreq,'YLim') == ...
                st_Spectrum.v_FreqLims)	== 2
            return
        end
        
        if toc(st_Position.s_TFdisplayTime) < s_miTimexPlot
            return
        end
        pause(0.01)
        
        st_Spectrum.s_FreqSeg       = st_Spectrum.s_FreqRes; 
        st_Spectrum.s_StDevCycles   = 3; 
        st_Spectrum.s_Magnitudes    = 1;
        st_Spectrum.s_SquaredMag    = 0;
        st_Spectrum.s_MakeBandAve   = 0;
        st_Spectrum.s_MinFreqHz     = st_Spectrum.v_FreqLims(1);
        st_Spectrum.s_MaxFreqHz     = st_Spectrum.v_FreqLims(2);
        st_Spectrum.s_Phases        = 0;
        st_Spectrum.s_TimeStep      = 1/st_Spectrum.v_FreqLims(2);
        
        v_DataTF = st_Data.m_Data(...
                st_Position.s_IdxIni:...
                st_Position.s_IdxEnd,...
                st_Spectrum.st_FilterData.v_NewChIdx);
                        
        
        
        if st_Spectrum.s_TFSampling ~= st_Data.s_Sampling && ...
                logical(get(st_TimeFreq.AliasingChk,'Value'))
            
            s_Filter        = f_GetIIRFilter(st_Data.s_Sampling,...
                                st_Spectrum.s_TFSampling,[],'low',[]);
                            
            v_DataTF        = f_IIRBiFilter(v_DataTF,s_Filter);
            
            if logical(mod(st_Data.s_Sampling,st_Spectrum.s_TFSampling))
                
                v_Time          = (0:numel(v_DataTF) - 1)./ ...
                                    st_Spectrum.s_TFSampling;
                v_TimeAxisAux   = 0:1/st_Spectrum.s_TFSampling:v_Time(end);
                
                v_DataTF        = interp1(v_Time, v_DataTF, v_TimeAxisAux,...
                                'pchip')';
                            
                clear v_Time
                
            else
                v_TimeAxisAux   = (0:numel(v_DataTF) - 1)./ ...
                                    st_Spectrum.s_TFSampling;
                s_SampleStep    = round(st_Data.s_Sampling /...
                                                st_Spectrum.s_TFSampling);
                v_Ind           = 1:s_SampleStep:numel(v_DataTF);
                v_TimeAxisAux   = v_TimeAxisAux(v_Ind);
                v_DataTF        = v_DataTF(v_Ind);
            end
        else
            v_TimeAxisAux = (0:numel(v_DataTF) - 1)./ ...
                                st_Spectrum.s_TFSampling;
        end
                   
        %::::::::::: Time Axis Auxiliar ::::::::::  
        
        v_DataTF    = v_DataTF(:);

        s_SampAve = round(st_Spectrum.s_TimeStep * st_Data.s_Sampling);
        if s_SampAve < 1
            s_SampAve = 1;
        end
    
        if s_SampAve > 1
            v_IndSamp = 1:s_SampAve:numel(v_TimeAxisAux);
            v_TimeAxisAux = v_TimeAxisAux(v_IndSamp);
        end            
                    
        s_Len       = round(numel(v_DataTF) * 0.1);
        v_DataTF    = v_DataTF(:);
        v_DataTF    = [flipud(v_DataTF(2:s_Len + 1));...
                        v_DataTF;flipud(v_DataTF(end - s_Len:end - 1))];         
                           
        %::::::::::: Calculate Spectrogram :::::::::: 
        if isobject(st_hAxes.TimeFreq)
            delete(st_hAxes.TimeFreq.Children)
        end
        
        [st_Spectrum.m_GaborWT,...
            st_Spectrum.v_TimeAxis,...
                st_Spectrum.v_FreqAxis] = ...
                            f_GaborTransformWait(...
                            single(v_DataTF),...
                            st_Spectrum.s_TFSampling,...
                            st_Spectrum.s_MinFreqHz, ...
                            st_Spectrum.s_MaxFreqHz, ...
                            st_Spectrum.s_FreqSeg, ...
                            st_Spectrum.s_StDevCycles, ...
                            st_Spectrum.s_Magnitudes, ...
                            st_Spectrum.s_SquaredMag, ...
                            st_Spectrum.s_MakeBandAve, ...
                            st_Spectrum.s_Phases,...
                            st_Spectrum.s_TimeStep,0);
        
        %::::::::::: Reshape Time Axis ::::::::::
        s_Time1	= v_TimeAxisAux(end) - v_TimeAxisAux(1);
        s_Time2 = st_Spectrum.v_TimeAxis(end) - ....
                st_Spectrum.v_TimeAxis(1);
        s_Time1 = s_Time2 - s_Time1;
        s_Time1 = s_Time1 / 2;
        s_Time1 = find(st_Spectrum.v_TimeAxis >= s_Time1, 1);
        s_Time1 = s_Time1 + 1;
        
        st_Spectrum.m_GaborWT   = st_Spectrum.m_GaborWT(:,...
                                s_Time1 + 1:s_Time1 + numel(v_TimeAxisAux));
        st_Spectrum.v_TimeAxis  = v_TimeAxisAux;
                               

        st_Spectrum.s_Exists    = true;
        f_TimeFreqPlotSpectrum()
        
        st_Position.s_TFdisplayTime  = tic;
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_TimeFreqPlotSpectrum()
        % Plot the epectrogram
        
        if isempty(st_hAxes.Main)
            return
        end
            
        st_Spectrum.str_ColorMap    = v_Colormap{get(...
                                            st_TimeFreq.Colormap,'Value')};
        st_Spectrum.s_ColorLevels   = 256;
        
        m_GaborTemp                 = st_Spectrum.m_GaborWT;
        
        switch get(st_TimeFreq.MethodMenu,'Value')
            case 2
                m_GaborTemp    = f_Matrix2RelAmplitud(m_GaborTemp);
                
            case 3
                m_GaborTemp    = f_Matrix2Norm(m_GaborTemp);
            
            case 4
                
                m_GaborTemp    = f_Matrix2ZScore(m_GaborTemp);
                
            otherwise
        end
        
        v_Lims(1)   = min(m_GaborTemp(:));
        v_Lims(2)   = max(m_GaborTemp(:))*st_SpectrumOpt.s_TimeFreqScale;
        
        if v_Lims(1) > v_Lims(2)
            v_Lims(2)  = v_Lims(1);
        end
                            
        if exist('st_Line','var') && ishandle(st_Line.TFImage)   
            delete(st_Line.TFImage)
        end
        
        pause(0.5)
        
        set(st_hFigure.main,'CurrentAxes',st_hAxes.TimeFreq)
        axes(st_hAxes.TimeFreq); 
        
        [m_GaborTemp,v_TimeTemp,v_FreqTemp] = f_PixelScale(m_GaborTemp,...
                                        st_Spectrum.v_TimeAxis,...
                                        st_Spectrum.v_FreqAxis);
        
        f_ImageMatrix(m_GaborTemp, v_TimeTemp,v_FreqTemp, v_Lims, ...
                            st_Spectrum.str_ColorMap, ...
                                st_Spectrum.s_ColorLevels, 0);
        
        clear m_GaborTemp v_TimeTemp v_FreqTemp
               
        ht_YlabelTF     = get(st_hAxes.TimeFreq,'YLabel');
        
        delete(ht_YlabelTF)
                        
        ht_YlabelTF = ylabel(...
                    {cell2mat(st_Data.v_Labels(...
                    st_Spectrum.st_FilterData.v_NewChIdx)),...
                                                      'Frequency (Hz)'},...
                    'Parent',st_hAxes.TimeFreq,...
                    'FontSize',st_Letter.toolcontrol);
                
        set(st_hAxes.TimeFreq,...
            'XTick',[],...
            'XTickLabel',[],...
            'YLabel',ht_YlabelTF,...
            'YLim',[st_Spectrum.s_MinFreqHz st_Spectrum.s_MaxFreqHz]) 
        
        st_Spectrum.v_WindLims     = [st_Position.s_IdxIni ...
                                    st_Position.s_IdxEnd];
                                
        f_CursorRebuildLineTF()
                                
    end

%% [Functions] Selection Controls :: Cursor Tools - Toolbar ::
% In this section are indicated the nested functions for Auxliary Figure
% Spectrogram Tools
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPlaceCur1(hObject,~)
        % Displays Cursor 1
        if ~isfield(st_Data,'m_Data')
            set(hObject,'Value',0)
            return
        end
        
        if logical(get(hObject,'Value'))
            set(st_Cursors.s_hCursor1,'Visible','on')
            set(st_Cursors.v_hCurLine1(1),'Visible','on')
            set(st_Cursors.v_hCurLine1(2),'Visible','on')
            set(st_Cursors.v_hCurLine1(3),'Visible','on')
        else
            set(st_Cursors.s_hCursor1,'Visible','off')
            set(st_Cursors.v_hCurLine1(1),'Visible','off')
            set(st_Cursors.v_hCurLine1(2),'Visible','off')
            set(st_Cursors.v_hCurLine1(3),'Visible','off')
        end
        f_CursorSelectCh()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPlaceCur2(hObject,~)
        % Displays Cursor 2
        if ~isfield(st_Data,'m_Data')
            set(hObject,'Value',0)
            return
        end
        if logical(get(hObject,'Value'))
            set(st_Cursors.s_hCursor2,'Visible','on')
            set(st_Cursors.v_hCurLine2(1),'Visible','on')
            set(st_Cursors.v_hCurLine2(2),'Visible','on')
            set(st_Cursors.v_hCurLine2(3),'Visible','on')
        else
            set(st_Cursors.s_hCursor2,'Visible','off')
            set(st_Cursors.v_hCurLine2(1),'Visible','off')
            set(st_Cursors.v_hCurLine2(2),'Visible','off')
            set(st_Cursors.v_hCurLine2(3),'Visible','off')
        end
        f_CursorSelectCh()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorSelectCh(~,~)
        % Get electrode for cursors
        if ~isfield(st_Data,'m_Data')
            return
        end
        
        st_Cursors.s_ChCursor = get(st_SegmAnalys.ChList,'Value');
        set(st_PSDCursor.Label,...
            'String',st_Data.v_Labels(st_Cursors.s_ChCursor))
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorProcess()
        % Processing cursor Info and Position
        f_CursorPosition()
        f_CursorDataInfo()
        f_CursorDataPlace()
        
        if st_HFOControl.IsVisualMrk
            f_VisualBuildLinesPSD()
        end
        
        if logical(get(st_SegmAnalys.PowerSpectButton,'Value'))
            f_CursorPSDSet()
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPosition()
        % SubFunction which moves the cursor lines displayed
         
        v_XLims     = get(st_hAxes.Main,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;
        
        set(st_Cursors.v_hCurLine1(1),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.Main,'YLim'));
        
        set(st_Cursors.v_hCurLine2(1),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.Main,'YLim'));
                
        v_XLims     = get(st_hAxes.Filter,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;
        
        
        set(st_Cursors.v_hCurLine1(2),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.Filter,'YLim'));
        
        set(st_Cursors.v_hCurLine2(2),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.Filter,'YLim'));
                
        v_XLims     = get(st_hAxes.TimeFreq,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;        
        
        set(st_Cursors.v_hCurLine1(3),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'));
        
        set(st_Cursors.v_hCurLine2(3),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'));
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorDataInfo()
        % Get Idx Position for cursor
        
        if logical(get(st_SegmAnalys.Cur1Button,'Value'))
            st_Cursors.s_IdxCur1    = st_Position.s_IdxIni + ...
                                        (st_Position.s_IdxEnd - ...
                                        st_Position.s_IdxIni) * ...
                                        st_Cursors.s_PosCur1;
                                    
            if mod(st_Cursors.s_IdxCur1,1)~=0
                v_idxVector = [floor(st_Cursors.s_IdxCur1) ...
                                ceil(st_Cursors.s_IdxCur1)];
                            
                v_Xvector   = st_Data.v_Time(v_idxVector);
                                    
                v_Yvector   = st_Data.m_Data(v_idxVector,...
                                        st_Cursors.s_ChCursor);
                                    
                st_Cursors.s_ValXCur1   = interp1(v_idxVector,v_Xvector,...
                                        st_Cursors.s_IdxCur1);
                st_Cursors.s_ValYCur1   = interp1(v_idxVector,v_Yvector,...
                                        st_Cursors.s_IdxCur1);
                                    
            else
                st_Cursors.s_ValXCur1   = st_Data.v_Time(...
                                        st_Cursors.s_IdxCur1);
                st_Cursors.s_ValYCur1   = st_Data.m_Data(...
                                        st_Cursors.s_IdxCur1,...
                                        st_Cursors.s_ChCursor);
            end
        end
        
        if logical(get(st_SegmAnalys.Cur2Button,'Value'))
            st_Cursors.s_IdxCur2    = st_Position.s_IdxIni + ...
                                        (st_Position.s_IdxEnd - ...
                                        st_Position.s_IdxIni) * ...
                                        st_Cursors.s_PosCur2;
                                    
            if mod(st_Cursors.s_IdxCur2,1)~=0
                v_idxVector = [floor(st_Cursors.s_IdxCur2) ...
                                ceil(st_Cursors.s_IdxCur2)];
                            
                v_Xvector   = st_Data.v_Time(v_idxVector);
                                    
                v_Yvector   = st_Data.m_Data(v_idxVector,...
                                        st_Cursors.s_ChCursor);
                                    
                st_Cursors.s_ValXCur2   = interp1(v_idxVector,v_Xvector,...
                                        st_Cursors.s_IdxCur2);
                st_Cursors.s_ValYCur2   = interp1(v_idxVector,v_Yvector,...
                                        st_Cursors.s_IdxCur2);
                                    
            else
                st_Cursors.s_ValXCur2   = st_Data.v_Time(...
                                        st_Cursors.s_IdxCur2);
                st_Cursors.s_ValYCur2   = st_Data.m_Data(...
                                        st_Cursors.s_IdxCur2,...
                                        st_Cursors.s_ChCursor);
            end
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorDataPlace()
        % Get Idx Position for cursor
        
        if logical(get(st_SegmAnalys.Cur1Button,'Value'))
            set(st_SegmAnalys.Cur1PosY,'String',...
                sprintf('%6.3g',st_Cursors.s_ValYCur1))
            set(st_SegmAnalys.Cur1PosX,'String',...
                sprintf('%6.3g',st_Cursors.s_ValXCur1))
        else            
            set(st_SegmAnalys.Cur1PosY,'String','-')
            set(st_SegmAnalys.Cur1PosX,'String','-')
        end
        
        if logical(get(st_SegmAnalys.Cur2Button,'Value'))
            set(st_SegmAnalys.Cur2PosY,'String',...
                sprintf('%6.3g',st_Cursors.s_ValYCur2))
            set(st_SegmAnalys.Cur2PosX,'String',...
                sprintf('%6.3g',st_Cursors.s_ValXCur2))
        else            
            set(st_SegmAnalys.Cur2PosY,'String','-')
            set(st_SegmAnalys.Cur2PosX,'String','-')            
        end
        
        if logical(get(st_SegmAnalys.Cur1Button,'Value')) && ...
                logical(get(st_SegmAnalys.Cur2Button,'Value'))
            
            set(st_SegmAnalys.TimeInt,'String',...
                sprintf('%6.3g',abs(...
                st_Cursors.s_ValXCur1 - st_Cursors.s_ValXCur2)))
            
            v_IdxInterval   = round(min([st_Cursors.s_IdxCur1 ...
                            st_Cursors.s_IdxCur2])): ...
                            round(max([st_Cursors.s_IdxCur1 ...
                            st_Cursors.s_IdxCur2]));
                            
            set(st_SegmAnalys.AvgVal,'String',...
                sprintf('%6.3g',mean(st_Data.m_Data(v_IdxInterval,...
                                        st_Cursors.s_ChCursor))))    
            set(st_SegmAnalys.MinVal,'String',...
                sprintf('%6.3g',min(st_Data.m_Data(v_IdxInterval,...
                                        st_Cursors.s_ChCursor)))) 
            set(st_SegmAnalys.MaxVal,'String',...
                sprintf('%6.3g',max(st_Data.m_Data(v_IdxInterval,...
                                        st_Cursors.s_ChCursor)))) 
        else
            set(st_SegmAnalys.TimeInt,'String','-')
            set(st_SegmAnalys.AvgVal,'String','-')    
            set(st_SegmAnalys.MinVal,'String','-')
            set(st_SegmAnalys.MaxVal,'String','-')    
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorRebuildLineTF()
        % SubFunction which rebuild the TF cursor lines 
                
        if logical(get(st_SegmAnalys.Cur1Button,'Value'))
            str_Cur1State   = 'on';
        else
            str_Cur1State   = 'off';
        end
        
        if logical(get(st_SegmAnalys.Cur2Button,'Value'))
            str_Cur2State   = 'on';
        else
            str_Cur2State   = 'off';
        end
                           
        v_XLims     = get(st_hAxes.TimeFreq,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;   
        
        st_Cursors.v_hCurLine1(3)  = line(...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
            'Parent',st_hAxes.TimeFreq,...
            'Visible',str_Cur1State,...
            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(3)  = line(...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
            'Parent',st_hAxes.TimeFreq,...
            'Visible',str_Cur2State,...
            'Color',st_Cursors.s_ColorCur2);
        
        f_CursorProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPSD(hObject,~)
        % Calculate PSD
                
        if logical(get(hObject,'Value'))
            if logical(get(st_SegmAnalys.Cur1Button,'Value')) && ...
                    logical(get(st_SegmAnalys.Cur2Button,'Value'))
                
                set(st_hPanelObj.PSD,'Visible','on')
                
                f_CursorPSDSet()
%                 v_IdxInterval   = round(min([st_Cursors.s_IdxCur1 ...
%                                 st_Cursors.s_IdxCur2])): ...
%                                 round(max([st_Cursors.s_IdxCur1 ...
%                                 st_Cursors.s_IdxCur2]));
                
%                 f_PowerSpectrumDensity(st_Data.m_Data(v_IdxInterval,...
%                                 st_Cursors.s_ChCursor),...
%                                 st_Data.s_Sampling,...
%                                 st_Data.v_Labels{st_Cursors.s_ChCursor})
            end
        else
            set(st_hPanelObj.PSD,'Visible','off')
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPSDSet(~,~)
        % Set PSD Parameters
         
        if ~(logical(get(st_SegmAnalys.Cur1Button,'Value')) && ...
                    logical(get(st_SegmAnalys.Cur2Button,'Value')))
            return
        end
        % Check if strings are true numbers
        [v_Freqs, s_Check]   = f_CheckTextNumbers(...
                            get(st_PSDCursor.MinFrq,'string'),...
                            get(st_PSDCursor.MaxFrq,'string'),...
                            st_Data.s_Sampling/2);    
                                
        if s_Check == -1
            uicontrol(st_PSDCursor.MinFrq)
            return
        elseif s_Check == -2
            uicontrol(st_PSDCursor.MaxFrq)
            return
        end
        
        
        v_IdxInterval   = round(min([st_Cursors.s_IdxCur1 ...
                        st_Cursors.s_IdxCur2])): ...
                        round(max([st_Cursors.s_IdxCur1 ...
                        st_Cursors.s_IdxCur2]));
                    
                    
        if numel(v_IdxInterval) < 10
            return
        end
        
        [v_CursorPSD,v_FreqPSD] = pwelch(...
                                st_Data.m_Data(v_IdxInterval,...
                                st_Cursors.s_ChCursor),[],[],[],...
                                st_Data.s_Sampling,'onesided');
                            
        v_IdxInterval   = v_FreqPSD>=v_Freqs(1) & v_FreqPSD<=v_Freqs(2);                   
        v_FreqPSD       = v_FreqPSD(v_IdxInterval);
        v_CursorPSD     = v_CursorPSD(v_IdxInterval);
                
        
        % Delete previous Lines
        if isfield(st_hLines,'s_hCursorPSD')
            if ishandle(st_hLines.s_hCursorPSD)
                delete(st_hLines.s_hCursorPSD)
            end
        end
        
        if get(st_PSDCursor.LogCont,'Value')
            st_hLines.s_hCursorPSD	= semilogx(...
                                     v_FreqPSD,...
                                     v_CursorPSD,...
                                     'Parent',st_PSDCursor.Axes,...
                                     'Color',v_SigColor);   
        else
            st_hLines.s_hCursorPSD	= line(...
                                     'Xdata',v_FreqPSD,...
                                     'Ydata',v_CursorPSD,...
                                     'Parent',st_PSDCursor.Axes,...
                                     'Color',v_SigColor); 
            
            set(st_PSDCursor.Axes,'XScale','linear')
        end
        
        set(st_PSDCursor.Axes,'XLim',v_Freqs)
        grid(st_PSDCursor.Axes);
        
    end

%% [Functions] Display Objects :: Main Panel ::
% In this section are indicated the nested functions which modify diaplay
% controls
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ObjectHorSliderVal(hObject,~)
        % Gets the initial time of signal displayed
        set(hObject,'BusyAction','cancel')
        pause(0.2)
        st_Position.s_TimeIni   = get(hObject,'value');%+st_Data.v_TimeLims(1);
        
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesUpDown(hObject,~)
        % Gets the initial signal displayed
        
        if isempty(st_Offset.Vector)
            return
        end
        
        if numel(st_Offset.SelectedVals) == numel(st_Offset.Vector)
            return
        end
        
        switch hObject
            case st_hPanelObj.LinesBdown
                st_Position.v_VerticalPos(1)    = st_Position.v_VerticalPos(1) +...
                                                1;
                                                                    
                if st_Position.v_VerticalPos(1) + st_Position.v_VerticalPos(2) > ...
                        	numel(st_Offset.Vector)
                    
                        st_Position.v_VerticalPos(1) = numel(st_Offset.Vector) - ...
                                                    st_Position.v_VerticalPos(2) ...
                                                    +1;
                end
                
            case st_hPanelObj.LinesBup
                st_Position.v_VerticalPos(1) = st_Position.v_VerticalPos(1)-1;
                                                                    
                if st_Position.v_VerticalPos(1) < 1
                    st_Position.v_VerticalPos(1) = 1;
                end
                
            otherwise
        end
        
        f_LinesBuildSignalLines()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetIniTime(~,~)
        
        if ~isfield(st_Data,'m_Data')
            return
        end
        
        if st_Position.s_AddIniTime
            st_Position.s_AddIniTime    = false;
        else
            st_Position.s_AddIniTime    = true;
        end
        
        f_ObjectDisplayTimeIni()
        
    end

%% [Functions] Place Data in Auxiliary Figures (PLACE)
% In this section are indicated the nested functions for placing data and
% information on auxiliary figures
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PlaceSelChanInfo()
        % Place Header Info in Select Channel Auxiliary Figure
        
        % Place Signal Label 
        set(st_SelCht.ChList,...
            'Value',[],...
            'String',st_ChInfo.str_CommonCh)
        
        set(st_MontageCh.SelCh1,...
            'String',st_ChInfo.str_CommonCh)
        
        set(st_MontageCh.SelCh2,...
            'String',st_ChInfo.str_CommonCh)
        
        set(st_MontageCh.ListCh2,...
            'String',st_ChInfo.str_CommonCh)
             
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PlaceAuxControlData()
        % Place data in necessary controls when signals are loaded 
        
        set(st_TimeFreq.ChList,...
            'String',st_Data.v_Labels,...
            'Value',1)
        
        set(st_SegmAnalys.ChList,...
            'String',st_Data.v_Labels,...
            'Value',1)
        
        set(st_HFOMethod.ChannelList,...
            'String',st_Data.v_Labels,...
            'Value',1)
        
        set(st_SegmAnalys.Cur1Button,...
            'Value',0)
        set(st_SegmAnalys.Cur2Button,...
            'Value',0)
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoWriteTable()
        % Write Selected Channel Data
        
        m_Data      = cell(numel(st_ChInfo.str_ChName),4);
        
        m_Data(:,1) = st_ChInfo.str_ChName;
        m_Data(:,2) = st_ChInfo.s_Sampling;
        m_Data(:,3) = st_ChInfo.s_TotalTime;
%         m_Data(:,4) = st_ChInfo.str_Montage;
        
        set(st_SelCht.InfoTable,'Data',m_Data)
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_InfoReadTable()
        % Write Selected Channel Data
        
        m_Data      = get(st_SelCht.InfoTable,'Data');
        
        if isempty(m_Data)
            warndlg(...
                'Please insert an electrode to the selected channels table',...
                'RippleLab Warning!')
            return
        end
        
        st_ChInfo.str_ChName	= m_Data(:,1);
        st_ChInfo.s_Sampling    = m_Data(:,2);
        st_ChInfo.s_TotalTime   = m_Data(:,3);
        
    end

%% [Sub-Functions] Display Functions
% In this section are indicated the nested functions for plotting 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_DisplayAbout(~,~)
        % Displays about message
        
        str_About   = sprintf(' %s\n %s %s\n %s - %s\n\n %s\n %s\n %s ',...
                    'RIPPLELAB release: 0.3',...
                    'Licence GNUv3,',...
                    'Project Administrator: Miguel Navarrete',...
                    'Universidad de los Andes',...
                    'ICM Brain & Spine Institute',...
                    'Using:',...
                    'Check RIPPLELAB\External folder');	
        
        s_FigAbout  = figure(...
                    'MenuBar','None', ...
                    'ToolBar','None', ...
                    'NumberTitle','off', ...
                    'Name','About RIPPLELAB', ...
                    'DockControls','off',...
                    'Resize','off',...
                    'WindowStyle','modal',...
                    'Color','w',...
                    'Units','normalized',...
                    'Position',[.4 .4 .2 .15]);
                
        s_TextLabel	= uicontrol(s_FigAbout,...
                    'Style','text',...
                    'BackgroundColor','w',...
                    'HorizontalAlignment','left',... 
                    'String',str_About,...
                    'Units','normalized',...
                    'Position',[.05 .05 .9 .8]); %#ok<NASGU>
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_DisplayProcess()
        %This function displays the Visual Info
        
        s_GlobalCheck   = 0;
        
        % Set Display Window
        f_WindWidthSet()
        
        if s_GlobalCheck
            return
        end
                
        % Set New Lines 
        f_LinesBuildSignalLines()
        
        % Change Step in horizontal slider
        f_ObjectSetHorSlider()
        
        % Set axes time
        f_AxeSetAxeTime()
        
        % Set Filter
        f_FilterBuildLines()   
        
        % Set Cursors 
        f_LinesBuildCursors()
        drawnow
        % Set Time Frequency
        f_TimeFreqSetSpectrum()
        drawnow
        st_SpectrumOpt.s_PlotOK = 1;
                          
        % Place cursors
        f_CursorProcess()
        drawnow
        
        % Set Panels
        if st_SpectrumOpt.s_PanelChk
            
            st_SpectrumOpt.s_FromDisplay	= 1;
            f_PanelSituate()
        end
                 
        st_SpectrumOpt.s_PanelChk	= 1;
        
        %Set Axes Grid
        f_GridSet
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeBuildSignalAxes()
        %This function sets the axes for ploting the main signals
        
        if ~isempty(st_hAxes.Main)
            delete(st_hAxes.Main);
            st_hAxes.Main   = [];
        end
        
        if ~isempty(st_hAxes.Filter)
            delete(st_hAxes.Filter);
            st_hAxes.Filter = [];
        end
        
        if ~isempty(st_hAxes.TimeFreq)
            delete(st_hAxes.TimeFreq);
            st_hAxes.TimeFreq   = [];
        end
        
        if st_Position.s_Timelength > st_Data.s_TotalTime
            st_Position.s_Timelength    = st_Data.s_TotalTime;
            set(st_Select.windowText,...
                'string',num2str(st_Position.s_Timelength))
        end
        
        %Creates Axes
        st_hAxes.Main       = axes('Parent',st_hPanelObj.SigPanel,... 
                            'FontSize',0.7*st_Letter.toolcontrol,...
                            'Position',[.075 0 .925 1],...
                            'XTick',[],...
                            'XTickLabel',[],...
                            'XLimMode','manual',...
                            'YLimMode','manual',...
                            'XLim',...
                                [st_Position.s_TimeIni ...
                                st_Position.s_TimeIni + ...
                                st_Position.s_Timelength]);
                        
        st_hAxes.TimeFreq   = axes('Parent',st_hPanelObj.TFPanel,... 
                            'FontSize',0.8*st_Letter.toolcontrol,...
                            'Position',[.075 0  .925 1],...
                            'XLimMode','manual',...
                            'YLimMode','manual',...
                            'XLim',...
                                [st_Position.s_TimeIni ...
                                st_Position.s_TimeIni + ...
                                st_Position.s_Timelength]);
                            
        st_hAxes.Filter     = axes('Parent',st_hPanelObj.FiltPanel,... 
                            'FontSize',0.8*st_Letter.toolcontrol,...
                            'Position',[.075 0  .925 1],...
                            'XTick',[],...
                            'XTickLabel',[],...
                            'XLimMode','manual',...
                            'YLimMode','manual',...
                            'YDir','reverse',...
                            'XLim',...
                                [st_Position.s_TimeIni ...
                                st_Position.s_TimeIni + ...
                                st_Position.s_Timelength]);
                        
    try % Versions later to R2014b
        set(st_hAxes.Main,'TickLabelInterpreter','none')
        set(st_hAxes.TimeFreq,'TickLabelInterpreter','none')
        set(st_hAxes.Filter,'TickLabelInterpreter','none')
    catch % Versions prior to R2014b
        set(st_hAxes.Main,'YTickLabelMode','manual')
        set(st_hAxes.TimeFreq,'YTickLabelMode','manual')
        set(st_hAxes.Filter,'YTickLabelMode','manual')
    end

    % Set Axes for Time Patch 
    f_AxeBuildTimeScope()
    
    % Set Axes for Cursors
    f_AxeBuildCursors
    
    % Set XTick distance
    f_AxeMainSetXTick()
    
	% Set Grid State
    f_GridSet()
    
    % Set Horizontal Slider
    f_ObjectSetHorSlider()
   
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetAxeTime()
        %This function sets the time axes for ploting the main signals
    
        % Set time for axes        
        if st_Position.s_TimeIni + st_Position.s_Timelength > ...
                st_Position.s_TimeIni + st_Data.s_TotalTime
            
            st_Position.s_TimeIni   = st_Data.s_TotalTime - ...
                                    st_Position.s_Timelength;
            set(st_hPanelObj.SliderH,'Value',st_Position.s_TimeIni)
        end
        
        set(st_hAxes.Main,...
            'XLim',st_Data.v_Time(st_Position.v_IdxDisplay([1,end])))
            
        % Set Tick Distance for Grid
        f_AxeMainSetXTick()        
        v_Xlim  = get(st_hAxes.Main,'Xlim');
        
        % set Patch Time position
        if  isempty(st_hLines.PatchTime)
            st_hLines.PatchTime = patch('Parent',st_hAxes.TimeScope,...
                                'XData',[v_Xlim(1) v_Xlim(1) ...
                                                   v_Xlim(2) v_Xlim(2)],...
                                'YData',[0 1 1 0],...
                                'FaceColor',v_PatchColor,...
                                'FaceAlpha',0.5,...
                                'EdgeColor','none');
        else
            set(st_hLines.PatchTime,...
                'XData',[v_Xlim(1) v_Xlim(1) v_Xlim(2) v_Xlim(2)],...
                'YData',[0 1 1 0])
        end
        
        f_ObjectDisplayTimeIni()
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeBuildTimeScope()
        % Set the Time Patch axes
        
        if ~isempty(st_hAxes.TimeScope)
            delete(st_hAxes.TimeScope);
            st_hAxes.TimeScope   = [];
        end
        
        st_hAxes.TimeScope = axes('Parent',st_hPanelObj.AxeScope,...
                            'FontUnits','normalized',...             
                            'FontSize',st_Letter.toolcontrol,...
                            'Position',[0 0 1 1],...
                            'Visible','on',...
                            'Box','on',...
                            'SelectionHighlight','off',...
                            'XTick', [],...
                            'YTick', [],... 
                            'XLimMode','manual',...
                            'YLimMode','manual',...
                            'XLim',[st_Data.v_Time(1) st_Data.v_Time(end)],...
                            'YLim',[0 1]);
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeBuildCursors()
        % Set the Time Patch axes
        
        if ~isempty(st_hAxes.Cursor)
            delete(st_hAxes.Cursor);
            st_hAxes.Cursor   = [];
        end
        
        st_hAxes.Cursor = axes('Parent',st_hPanelObj.PanelCur,...
                            'FontUnits','normalized',...             
                            'FontSize',st_Letter.toolcontrol,...
                            'Position',[.075 0  .925 .95],...
                            'Visible','on',...
                            'Box','off',...
                            'SelectionHighlight','off',...
                            'XTick', [],...
                            'YTick', [],... 
                            'XLimMode','manual',...
                            'YLimMode','manual',...
                            'XLim',[0 1],...
                            'YLim',[0 1],...
                            'ButtonDownFcn',{});
                        

        st_Cursors.s_hCursor1 = patch('Parent',st_hAxes.Cursor,...
                            'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1],...
                            'YData',[0 .5 1 1 .5],...
                            'FaceColor',st_Cursors.s_ColorCur1,...
                            'Visible','off',...
                            'EdgeColor','none',...
                            'ButtonDownFcn',@f_CursorClick);
                        
        st_Cursors.s_hCursor2 = patch('Parent',st_hAxes.Cursor,...
                            'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2],...
                            'YData',[0 .5 1 1 .5],...
                            'FaceColor',st_Cursors.s_ColorCur2,...
                            'Visible','off',...
                            'EdgeColor','none',...
                            'ButtonDownFcn',@f_CursorClick);
                    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesBuildCursors()
        % SubFunction which sets the cursor lines displayed
         
        % Delete previous Lines
        if ~isempty(st_Cursors.v_hCurLine1)
            if ishandle(st_Cursors.v_hCurLine1(1))
                delete(st_Cursors.v_hCurLine1(1))
            end
            if ishandle(st_Cursors.v_hCurLine1(2))
                delete(st_Cursors.v_hCurLine1(2))
            end
            if ishandle(st_Cursors.v_hCurLine1(3))
                delete(st_Cursors.v_hCurLine1(3))
            end
        end
        
        if ~isempty(st_Cursors.v_hCurLine2)
            if ishandle(st_Cursors.v_hCurLine2(1))
                delete(st_Cursors.v_hCurLine2(1))
            end
            if ishandle(st_Cursors.v_hCurLine2(2))
                delete(st_Cursors.v_hCurLine2(2))
            end
            if ishandle(st_Cursors.v_hCurLine2(3))
                delete(st_Cursors.v_hCurLine2(3))
                
            end
        end
        % Get line position
        v_XLims     = get(st_hAxes.Main,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;
        
        if logical(get(st_SegmAnalys.Cur1Button,'Value'))
            str_Cur1State   = 'on';
        else
            str_Cur1State   = 'off';
        end
        
        if logical(get(st_SegmAnalys.Cur2Button,'Value'))
            str_Cur2State   = 'on';
        else
            str_Cur2State   = 'off';
        end
        
        st_Cursors.v_hCurLine1(1)  = line(...
                            'Xdata',[s_XposCur1 s_XposCur1],...
                            'Ydata',get(st_hAxes.Main,'YLim'),...
                            'Parent',st_hAxes.Main,...
                            'Visible',str_Cur1State,...
                            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(1)  = line(...
                            'Xdata',[s_XposCur2 s_XposCur2],...
                            'Ydata',get(st_hAxes.Main,'YLim'),...
                            'Parent',st_hAxes.Main,...
                            'Visible',str_Cur2State,...
                            'Color',st_Cursors.s_ColorCur2);
        
        st_Cursors.v_hCurLine1(2)  = line(...
                            'Xdata',[s_XposCur1 s_XposCur1],...
                            'Ydata',get(st_hAxes.Filter,'YLim'),...
                            'Parent',st_hAxes.Filter,...
                            'Visible',str_Cur1State,...
                            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(2)  = line(...
                            'Xdata',[s_XposCur2 s_XposCur2],...
                            'Ydata',get(st_hAxes.Filter,'YLim'),...
                            'Parent',st_hAxes.Filter,...
                            'Visible',str_Cur2State,...
                            'Color',st_Cursors.s_ColorCur2);
        
        st_Cursors.v_hCurLine1(3)  = line(...
                            'Xdata',[s_XposCur1 s_XposCur1],...
                            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
                            'Parent',st_hAxes.TimeFreq,...
                            'Visible',str_Cur1State,...
                            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(3)  = line(...
                            'Xdata',[s_XposCur2 s_XposCur2],...
                            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
                            'Parent',st_hAxes.TimeFreq,...
                            'Visible',str_Cur2State,...
                            'Color',st_Cursors.s_ColorCur2);
                                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesBuildSignalLines()
        % SubFunction which sets the signal section displayed
         
        % Get Time indexes for position
        st_Position = f_GetIdxPosition(st_Position,st_Data);
        s_Scale     = get(st_Scale.scaleList,'Value');
        s_Scale     = v_AmpliScales(s_Scale);
        
        if st_Position.s_IdxEnd > size(st_Data.m_Data,1)
            st_Position.s_IdxEnd    = size(st_Data.m_Data,1);
        end
         
        % Subsample signal for big signal displays
        if st_Position.s_IdxEnd - st_Position.s_IdxIni > ...
                                st_Position.s_MaxDispSampl/2
                    
            s_SubSample = true;
            
            s_sStep = ceil((st_Position.s_IdxEnd - st_Position.s_IdxIni)/...
                                               st_Position.s_MaxDispSampl);
                                           
            v_Ind   = st_Position.s_IdxIni:s_sStep:st_Position.s_IdxEnd;
                        
                                       
        else
            s_sStep     = 1;
            v_Ind       = st_Position.s_IdxIni:st_Position.s_IdxEnd;
            s_SubSample = false;
        end
        
        if v_Ind(1) == 0
            v_Ind   = v_Ind+1;
        end
        
        st_Position.v_IdxDisplay= v_Ind;
               
        % Select Signal Labels
        v_Ind                   = st_Position.v_VerticalPos(1):...
                                        st_Position.v_VerticalPos(1) + ...
                                        st_Position.v_VerticalPos(2) - 1;
                                                                    
        st_Offset.SelectedVals	= st_Offset.Vector(v_Ind);
        st_Offset.SelectedVals  = flipud(st_Offset.SelectedVals(:));
        st_Offset.SelectedLab   = st_Data.v_Labels(v_Ind);
        st_Offset.SelectedLab   = flipud(st_Offset.SelectedLab);
                
        set(st_hAxes.Main,...
            'YTick',st_Offset.SelectedVals,...
            'YTickLabel',st_Offset.SelectedLab,...
            'YLim',[st_Offset.SelectedVals(1)-st_Offset.Value ...
                             st_Offset.SelectedVals(end)+ st_Offset.Value])
        
        % Set Visualization Scale
        v_SigDisp	= fliplr(s_Scale.*...
                    st_Data.m_Data(st_Position.v_IdxDisplay,v_Ind));
        
        
        % Delete previous Lines
        for kk = 1:numel(st_hLines.MainLines)
            if ishandle(st_hLines.MainLines(kk))
                delete(st_hLines.MainLines(kk))
            end
        end
        
        clear st_hLines.MainLines
        
        % Plot Signal Lines
        st_hLines.MainLines  = - ones(numel(st_Offset.SelectedVals),1);
        for kk=1:numel(st_Offset.SelectedVals)
            st_hLines.MainLines(kk)  = line(...
                                    'Xdata',st_Data.v_Time(...
                                                st_Position.v_IdxDisplay),...
                                    'Ydata',st_Offset.SelectedVals(kk)+ ...
                                            v_SigDisp(:,kk),...
                                    'Parent',st_hAxes.Main,...
                                    'Color',v_SigColor);
        end
        
        clear v_TimeDisp v_SigDisp v_Ind 
        
        % Set HFO Lines
        f_LineSetHFOSegments()
        
        % Build HFO Lines
        f_LinesBuildHFOSegments(s_sStep,s_SubSample,s_Scale)
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ObjectSetHorSlider(~,~)
        % Set horizontal slider characteristics 
        
        if st_Position.s_Timelength > st_Data.s_TotalTime
            st_Position.s_Timelength	= st_Data.s_TotalTime;
            set(st_Select.windowText,'string',num2str(st_Position.s_Timelength))
        end
        
        s_MaxSilderH    = st_Data.s_TotalTime - st_Position.s_Timelength;
                
        s_minSliderPos	= st_Data.v_Time(1);
        s_maxSliderPos  = st_Data.v_Time(end)-st_Position.s_Timelength;
        s_minPercent    = st_Position.s_Timelength/(3*s_MaxSilderH);
        s_maxPercent    = st_Position.s_Timelength/s_MaxSilderH;
        
        s_CurrentVal    = st_Position.s_TimeIni;
                
        if s_maxSliderPos < s_CurrentVal
            s_CurrentVal    = s_maxSliderPos;
        end
        if s_MaxSilderH == 0 || ...
                st_Data.s_TotalTime == st_Position.s_Timelength
            set(st_hPanelObj.SliderH,...
                'Enable','off',... 
                'Max',st_Data.s_TotalTime)
            return
        else
            set(st_hPanelObj.SliderH,...
                'Enable','on')
        end
        
        if s_minPercent > 1 || s_maxPercent > 1
            s_minPercent    = 0.1;
            s_maxPercent    = 0.5;
        end
        
        set(st_hPanelObj.SliderH,...
            'Min',s_minSliderPos,...
            'Max',s_maxSliderPos,...
            'Value',s_CurrentVal,...
            'SliderStep',[s_minPercent s_maxPercent])
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeMainSetXTick(~,~)
        % Set Tick Distance for Grid 
         
        set(st_hAxes.Main,...
            'XTick',...
            st_Position.s_TimeIni: st_Position.s_Timelength/...
            v_GridSections(get(st_Select.gridList,'value')): ...
            st_Position.s_TimeIni + st_Position.s_Timelength)
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_GridSet(~,~)
        % Set Grid on main Axes
        
        if isempty(st_hAxes.Main)
            return
        end
        
        if strcmp(get(st_hIcons.grid,'State'),'on')
            set(st_hAxes.Main,'XGrid','on')
            if st_FilterData.s_Exists
                set(st_hAxes.Filter,'XGrid','on')
            end
        else
            set(st_hAxes.Main,'XGrid','off')
            if st_FilterData.s_Exists
                set(st_hAxes.Filter,'XGrid','off')
            end
        end
        
    end

%% [Sub-Functions] Set Controls
% In this section are indicated the nested functions for setting of 
% variable controls 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ObjectTimeLoad(h_Object,~)
        if get(h_Object,'Value')
            set(h_Object,'String','Load Complete')
            set(st_SelCht.TimeTxtIni,...
                'String','0',...
                'Enable','on')
            set(st_SelCht.TimeTxtEnd,...
                'String','Inf',...
                'Enable','on')
        else
            set(h_Object,'String','Load Segment')
            set(st_SelCht.TimeTxtIni,...
                'String','0',...
                'Enable','off')
            set(st_SelCht.TimeTxtEnd,...
                'String','Inf',...
                'Enable','off')
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ObjectDisplayTimeIni()
        % Set Time Ini Display
        
        
        if st_Position.s_AddIniTime
            v_HMS	= f_Secs2hms(st_Position.s_TimeIni + ...
                    f_HMS2Secs(st_Data.v_TimeStart));
        else            
            v_HMS   = f_Secs2hms(st_Position.s_TimeIni);
        end
        
        set(st_hPanelObj.TextInfo,...
            'String',sprintf('%02.0f:%02.0f:%05.2f',v_HMS))
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CheckIsNumber(h_Object,~)
        % Check if number string is correct
        [~,s_Check]    = f_CheckTextNumbers(...
                                    get(h_Object,'string'),[],[]);
                                
        if s_Check == -1
            uicontrol(h_Object)
            return
        end
    end

%% [Sub-Functions] Click and Keyboard Actions
% In this section are indicated the nested functions when a click or
% keyboard action is made
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorClick(hObject,~)
        % In this function get the last point clicked in any axes and
        % executes the action according it.
        
        st_Cursors.s_CurrentCur = hObject;
        set(st_hFigure.main,'WindowButtonMotionFcn',@f_CursorDrag)
              
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorDrag(~,~)
        % In this function the cursor move
        s_CurrentPoint  = get(st_hAxes.Cursor,'CurrentPoint');
        s_CurrentPoint  = s_CurrentPoint(1);
        
        if s_CurrentPoint < 0
            s_CurrentPoint = 0;
        elseif s_CurrentPoint > 1
            s_CurrentPoint = 1;
        end
        
        switch st_Cursors.s_CurrentCur
            case st_Cursors.s_hCursor1
                st_Cursors.s_PosCur1 = s_CurrentPoint;
                set(st_Cursors.s_hCursor1,...
                    'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
                        
            case st_Cursors.s_hCursor2
                st_Cursors.s_PosCur2 = s_CurrentPoint;
                set(st_Cursors.s_hCursor2,...
                    'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
        end
        
        f_CursorProcess()        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorStopDrag(~,~)
        % In this function the cursors stop moving
        
        set(st_hFigure.main,'WindowButtonMotionFcn','')
        st_Cursors.s_CurrentCur = [];
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FigureKeyPress(~,hStruct)
        % Actions when a key is pressed
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FigureKeyRelease(~,hStruct)
%         % Actions when a key is relased
        
    end

%% [Sub-Functions] HFO Methods
% In this section are indicated the nested functions when an HFO method is
% selected
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSet_STE() 
        % Set Short Time Energy
        
        % Check if value of epoch time are correct
        [v_Values, s_Check]	= f_CheckTextNumbers('0',...
                            get(st_HFOMethod.STE_EpoTim,'string'),...
                            st_Data.s_TotalTime,0,false);
        
        if s_Check == -2
            
            errordlg(sprintf('%s %6.4f Seconds',...
                'Epoch time can not be greater than ',...
                st_Data.s_TotalTime),'Bad Input','modal')
            return
        end
        
        st_HFOSettings.s_EpochTime  = v_Values(2);
        
        st_HFOSettings.s_RMSWindow  = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_RMSwind,'string'),...
                                    [],[]); 
                            
        st_HFOSettings.s_RMSThres   = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_RMSsdThres,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_MinWind    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_MinWinTime,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_MinTime    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_MinTimeDel,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_NumOscMin  = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_MinOsc,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_BPThresh   = f_CheckTextNumbers(...
                                    get(st_HFOMethod.STE_SDPeakThr,'string'),...
                                    [],[]);   

        st_HFOAnalysis.str_DetMethod = 'Short Time Energy';
        
        p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Method: ',...
                        st_HFOAnalysis.str_DetMethod))
                    
        p_HFOWaitFigure(st_WaitOutput,...
                        'MethString',...
                        st_HFOAnalysis.str_DetMethod)
                    
        st_HFOAnalysis.m_EvtLims    = [];
        st_HFOAnalysis.m_EvtLims	= f_findHFOxSTE(...
                                    str_TempFile,...
                                    st_HFOControl.s_CurrChIdx,...
                                    st_HFOSettings,...
                                    st_HFOAnalysis.s_Sampling,...
                                    st_WaitOutput); 
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSet_SLL() 
        % Set Short Time Energy
                
        % Check if value of epoch time are correct
        [v_Values, s_Check]	= f_CheckTextNumbers('0',...
                            get(st_HFOMethod.SLL_EpoTim,'string'),...
                            st_Data.s_TotalTime,0,false);
        
        if s_Check == -2
            
            errordlg(sprintf('%s %6.4f Seconds',...
                'Epoch time can not be greater than ',...
                st_Data.s_TotalTime),'Bad Input','modal')
            return
        end
                   
        st_HFOSettings.s_EpochTime  = v_Values(2);
        
        st_HFOSettings.s_FiltWind   = f_CheckTextNumbers(...
                                    get(st_HFOMethod.SLL_Filtwind,'string'),...
                                    [],[]); 
                            
        st_HFOSettings.s_Percentil  = f_CheckTextNumbers(...
                                    get(st_HFOMethod.SLL_ThresPerc,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_MinWind    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.SLL_MinEvenTime,'string'),...
                                    [],[]);                     
       
        st_HFOSettings.s_FiltEq    = get(st_HFOMethod.SLL_CheckEq,'value');                    
                                           
        st_HFOAnalysis.str_DetMethod = 'Short Line Length';
        
        p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Method: ',...
                        st_HFOAnalysis.str_DetMethod))
                    
        p_HFOWaitFigure(st_WaitOutput,...
                        'MethString',...
                        st_HFOAnalysis.str_DetMethod)
                    
        st_HFOAnalysis.m_EvtLims    = [];
        st_HFOAnalysis.m_EvtLims 	= f_findHFOxSLL(...
                                    str_TempFile,...
                                    st_HFOControl.s_CurrChIdx,...
                                    st_HFOSettings,...
                                    st_HFOAnalysis.s_Sampling,...
                                    st_WaitOutput);                                                        
    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSet_HIL() 
        % Set Hilbert detection
        
        % Check if value of epoch time are correct
        [v_Values, s_Check]	= f_CheckTextNumbers('0',...
                            get(st_HFOMethod.HIL_EpoTim,'string'),...
                            st_Data.s_TotalTime,0,false);

        if s_Check == -2
            
            errordlg(sprintf('%s %6.4f Seconds',...
                'Epoch time can not be greater than ',...
                st_Data.s_TotalTime),'Bad Input','modal')
            return
        end
        
        st_HFOSettings.s_EpochTime  = v_Values(2);
                            
        st_HFOSettings.s_SDThres    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.HIL_SDThres,'string'),...
                                    [],[]); 
                                    
        st_HFOSettings.s_MinWind    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.HIL_MinTime,'string'),...
                                    [],[]); 
                            
        st_HFOAnalysis.str_DetMethod = 'Hilbert Detector';
        
        p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Method: ',...
                        st_HFOAnalysis.str_DetMethod))
                    
        p_HFOWaitFigure(st_WaitOutput,...
                        'MethString',...
                        st_HFOAnalysis.str_DetMethod)
                    
        st_HFOAnalysis.m_EvtLims    = [];
        st_HFOAnalysis.m_EvtLims    = f_findHFOxHIL(...
                                    str_TempFile,...
                                    st_HFOControl.s_CurrChIdx,...
                                    st_HFOSettings,...
                                    st_HFOAnalysis.s_Sampling,...
                                    st_WaitOutput); 
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSet_MNI()
        % Set MNI detector
                        
        % Check if value of epoch time are correct
        [v_Values, s_Check]      = f_CheckTextNumbers('0',...
            get(st_HFOMethod.MNI_EpoTim,'string'),...
            st_Data.s_TotalTime,0,false);
        
        if s_Check == -2
            
            errordlg(sprintf('%s %6.4f Seconds',...
                'Epoch time can not be greater than ',...
                st_Data.s_TotalTime),'Bad Input','modal')
            return
        end
                   
        st_HFOSettings.s_EpochTime  = v_Values(2);
                                                                
        st_HFOSettings.s_EpoCHF     = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_EpoCHF,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_PerCHF     = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_PerCHF,'string'),...
                                    [],[]);                    
                            
        st_HFOSettings.s_MinWin     = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_MinWin,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_MinGap     = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_MinGap,'string'),...
                                    [],[]);                 
        
        st_HFOSettings.s_ThresPerc	= f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_ThresPerc,'string'),...
                                    [],[]); 
                                                        
        st_HFOSettings.s_BaseSeg    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_BaseSeg,'string'),...
                                    [],[]);         
                                                        
        st_HFOSettings.s_BaseShift    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_BaseShift,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_BaseThr    = f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_BaseThr,'string'),...
                                    [],[]);                    
       
        st_HFOSettings.s_BaseMin	= f_CheckTextNumbers(...
                                    get(st_HFOMethod.MNI_BaseMin,'string'),...
                                    [],[]);                       
                                           
                            
        st_HFOAnalysis.str_DetMethod = 'MNI Detector';
        
        p_HFOWaitFigure(st_WaitOutput,...
                        'LogsList',strcat('Method: ',...
                        st_HFOAnalysis.str_DetMethod))
                    
        p_HFOWaitFigure(st_WaitOutput,...
                        'MethString',...
                        st_HFOAnalysis.str_DetMethod)
         
        st_HFOAnalysis.m_EvtLims = [];
        st_HFOAnalysis.m_EvtLims = f_findHFOxMNI(...
                                str_TempFile,...
                                st_HFOControl.s_CurrChIdx,...
                                st_HFOSettings,...
                                st_HFOAnalysis.s_Sampling,...
                                st_WaitOutput);                                                        
            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
%   function f_HFOSet-XXX()

%% [Sub-Functions] HFO Methods: New Method % Insert here New Method Features [**INSERT!**]
% Include in this section the nested functions when an new HFO method is
% selected   
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
%     function f_YourNewMethod()  
%     % Insert here your new method callback
%     end
%
% Example:
% ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
%     function f_HFOSet-XXX()
%     %Function to read the setting for the new implemented method XXX
%                         
%         % Check if value of epoch time are correct
%         [v_Values s_Check]      = f_CheckTextNumbers('0',...
%             get(st_HFOMethod.XXX_EpoTim,'string'),...
%             st_Data.s_TotalTime);
%         
%         if s_Check == -2
%             uicontrol(st_HFOMethod.STE_EpoTim)
%             return
%         end
%                    
%         st_HFOSettings.s_EpochTime  = v_Values(2);
%         
%         st_HFOSettings.s_FreqRes    = f_CheckTextNumbers(...
%                                 get(st_HFOMethod.XXX_FreqRes,'string'),...
%                                 [],[]); 
%                                                         
%         st_HFOSettings.s_ShftWnd    = f_CheckTextNumbers(...
%                                 get(st_HFOMethod.XXX_ShftWnd,'string'),...
%                                 [],[]);                    
%        
%         st_HFOSettings.s_CoefThr    = f_CheckTextNumbers(...
%                                 get(st_HFOMethod.XXX_CoefThr,'string'),...
%                                 [],[]);                    
%        
%         st_HFOSettings.s_minOsc     = f_CheckTextNumbers(...
%                                 get(st_HFOMethod.XXX_minOsc,'string'),...
%                                 [],[]);                    
%                                            
%                             
%         st_HFOAnalysis.str_DetMethod = 'Method Name XXX';
%         
%         p_HFOWaitFigure(st_WaitOutput,...
%                         'LogsList',strcat('Method: ',...
%                         st_HFOAnalysis.str_DetMethod))
%                     
%         p_HFOWaitFigure(st_WaitOutput,...
%                         'MethString',...
%                         st_HFOAnalysis.str_DetMethod)
%          
%         st_HFOAnalysis.m_EvtLims = [];
%         st_HFOAnalysis.m_EvtLims = f_findHFOxXXX(...
%                                 str_TempFile,...
%                                 st_HFOControl.s_CurrChIdx,...
%                                 st_HFOSettings,...
%                                 st_HFOAnalysis.s_Sampling,...
%                                 st_WaitOutput);                                                        
%             
%     end

%% [Sub-Functions] HFO SubFunctions
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
%Subfunctions for HFO visualization
    function f_HFOSetChInfo()
        % Set Channel Info Cell
        
        st_HFOAnalysis.s_ChIdx          = st_HFOControl.s_CurrChIdx;
            
       if isempty(st_HFOAnalysis.m_EvtLims)
            st_HFOData.v_ChHFOInfo{...
                st_HFOControl.s_IdxCycle}  = st_HFOAnalysis;            
            st_HFOAnalysis                  = struct;
            return
        end
        
        st_HFOAnalysis.m_IntervLims = zeros(size(st_HFOAnalysis.m_EvtLims));
        st_HFOAnalysis.m_Rel2IntLims = zeros(size(st_HFOAnalysis.m_EvtLims));

        s_IntWidth      = 2;    % Save 2 seconds from signal Interval
        s_IntWidth      = s_IntWidth .* st_HFOAnalysis.s_Sampling;
        s_IntMean       = round(s_IntWidth / 2);
        
        for kk = 1:size(st_HFOAnalysis.m_EvtLims,1)
            
            s_EvtMean   = round(mean(st_HFOAnalysis.m_EvtLims(kk,:)));
            
        	s_PosIni    = s_EvtMean - s_IntMean;
        	s_PosEnd    = s_EvtMean + s_IntMean;
            
            if s_PosIni < 1
                s_PosIni    = 1;
                s_PosEnd    = s_IntWidth;
            elseif s_PosEnd > numel(st_Data.v_Time)
                s_PosIni    = numel(st_Data.v_Time) - s_IntWidth;
                s_PosEnd    = numel(st_Data.v_Time);
            end
            
            st_HFOAnalysis.m_IntervLims(kk,:)   = [s_PosIni,s_PosEnd];
            st_HFOAnalysis.m_Rel2IntLims(kk,:)  = st_HFOAnalysis.m_EvtLims(kk,:)...
                                                - s_PosIni + 1;
        end
        
            st_HFOData.v_ChHFOInfo{...
                st_HFOControl.s_IdxCycle}      = st_HFOAnalysis;
            
%             st_HFOAnalysis                      = struct;
            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOCreateSaveFile(ps_FileIdx)
        
        str_Delimiter   = '*';
        str_FileName    = get(st_HFOMethod.SaveFile,'String');
        v_IdxInsert     = strfind(str_FileName,str_Delimiter);
        
        if isempty(v_IdxInsert)
            str_SaveFileName = str_FileName;
        else
            str_FilePre     = str_FileName(1:v_IdxInsert(1));            
            str_FilePos     = str_FileName(v_IdxInsert(1):end);
                        
            [~, str_HFOFile, ~] = fileparts(st_FilePath.name{ps_FileIdx});
            
            str_SaveFileName    = strcat(str_FilePre,...
                                            str_HFOFile,str_FilePos);
                                        
            str_SaveFileName(strfind(str_SaveFileName,str_Delimiter)) = [];
            
        end
                            
        str_SaveFileName            = strcat(str_SaveFileName,'.rhfe');
        st_HFOControl.str_SavePath  = fullfile(get(st_HFOMethod.SavePath,...
                                    'string'),str_SaveFileName);
        
        if ~isempty(which(st_HFOControl.str_SavePath))
            delete(st_HFOControl.str_SavePath)
        end
        
        st_FileData     = st_ChInfo.st_FileInfo{ps_FileIdx}; %#ok<NASGU>
        
        save(st_HFOControl.str_SavePath, 'st_FileData')
        
        clear st_FileData
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOBuildCluster()
        % Set Cluster in time scope axe
        
        
        st_HFOControl.v_hCluster{st_HFOControl.s_IdxCycle} = [];
                
        if isempty(st_HFOData.v_ChHFOInfo{st_HFOControl.s_IdxCycle})
            return
        end
        
        % Create new Clusters
        st_HFOControl.v_hCluster{st_HFOControl.s_IdxCycle} =...
                                    -ones(...
                                    size(st_HFOData.v_ChHFOInfo{...
                                    st_HFOControl.s_IdxCycle}.m_EvtLims,1),1);
        
        for kk=1:size(...
                st_HFOData.v_ChHFOInfo{...
                st_HFOControl.s_IdxCycle}.m_EvtLims,1)
            
            st_HFOControl.v_hCluster{...
                st_HFOControl.s_IdxCycle}(kk) = ...
                                        line(...
                                        'Xdata',st_Data.v_Time(...
                                            st_HFOData.v_ChHFOInfo{...
                                            st_HFOControl.s_IdxCycle...
                                            }.m_EvtLims(kk,1))...
                                            .*[1 1],...
                                        'Ydata',[0 1],...
                                        'Parent',st_hAxes.TimeScope,...
                                        'Color',v_ClusterColor,...
                                        'ButtonDownFcn',@f_HFOGotoCluster);
        end
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOGotoCluster(hObject,~)
        % Go to cluster position in main axes
        v_XPosition     = get(hObject,'Xdata');
        s_XPos          = v_XPosition(1);   
        
        v_XlimPrev      = get(st_hAxes.Main,'Xlim');
        
        s_XlimHalf      = (v_XlimPrev(2) + v_XlimPrev(1))/2;
        s_Xmin          = s_XlimHalf - v_XlimPrev(1);
        s_Xmax          = v_XlimPrev(2) - s_XlimHalf;
        
        v_XlimPos       = [(s_XPos - s_Xmin) (s_XPos + s_Xmax)];
        
        if v_XlimPos(1) < st_Data.v_Time(1)
            st_Position.s_TimeIni   = st_Data.v_Time(1);
        else
            st_Position.s_TimeIni   = v_XlimPos(1);
        end
        
        set(st_hPanelObj.SliderH,'Value',st_Position.s_TimeIni)
        
        % Change window plotted
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LineSetHFOSegments()
        % Set Cluster Lines in signal axe
       
        if ~exist('st_HFOData','var')
            return
        end
        
        % Check if there are previous Lines
        if ~isempty(st_HFOControl.v_hLines)
            for kk = 1:numel(st_HFOControl.v_hLines)
                for jj = 1: numel(st_HFOControl.v_hLines{kk})
                    if ishandle(st_HFOControl.v_hLines{kk}(jj))
                        delete(st_HFOControl.v_hLines{kk}(jj))
                    end
                end                
            end
        end
        
        st_HFOControl.v_hLines     = [];
        st_HFOControl.m_EvtLimDisp = cell(size(st_HFOData.v_ChHFOInfo));
        
        for kk = 1:numel(st_HFOData.v_ChHFOInfo)
            
            if isempty(st_HFOData.v_ChHFOInfo{kk})
                st_HFOControl.m_EvtLimDisp{kk}   = [];
                continue
            end
            if isempty(st_HFOData.v_ChHFOInfo{kk}.m_EvtLims)
                st_HFOControl.m_EvtLimDisp{kk}   = [];
                continue
            end

            v_VisLineIdx 	= sum(...
                            st_HFOData.v_ChHFOInfo{kk}.m_EvtLims >= ...
                            st_Position.s_IdxIni & ...
                            st_HFOData.v_ChHFOInfo{kk}.m_EvtLims <= ...
                            st_Position.s_IdxEnd,2);
                        
            v_VisLineIdx 	= find(v_VisLineIdx);

            if isempty(v_VisLineIdx)
                st_HFOControl.m_EvtLimDisp{kk}= [];
            else
                st_HFOControl.m_EvtLimDisp{kk}= st_HFOData.v_ChHFOInfo{...
                                                kk}.m_EvtLims(...
                                                v_VisLineIdx,:);  
            end
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesBuildHFOSegments(s_sStep,s_SubSample,s_Scale)
        % Build HFO Lines
                
        if ~exist('st_HFOData','var')
            return
        end
        
        st_HFOControl.v_hLines = cell(size(st_HFOData.v_ChHFOInfo));
        for ii = 1:numel(st_HFOData.v_ChHFOInfo)
            
            if isempty(st_HFOControl.m_EvtLimDisp{ii})
                st_HFOControl.v_hLines{ii}   = [];
                continue
            end
           
            for kk = 1:numel(st_Offset.SelectedLab)
                if strcmp(cell2mat(st_Offset.SelectedLab(kk)),...
                        cell2mat(st_HFOData.v_ChHFOInfo{ii}.str_ChLabel))
                    s_SigHFOIdx     = kk;
                    break
                end
                s_SigHFOIdx     = [];
            end
            
            if isempty(s_SigHFOIdx)
                continue
            end
            st_HFOControl.v_hLines{ii} = -ones(size(...
                                        st_HFOControl.m_EvtLimDisp{ii},...
                                        1),1);
                                    
            for kk=1:size(st_HFOControl.m_EvtLimDisp{ii},1)
                
                if s_SubSample
                    v_Ind	= st_HFOControl.m_EvtLimDisp{ii}(kk,1):s_sStep:...
                            st_HFOControl.m_EvtLimDisp{ii}(kk,2);
                else
                    v_Ind   = st_HFOControl.m_EvtLimDisp{ii}(kk,1):...
                            st_HFOControl.m_EvtLimDisp{ii}(kk,2);
                end
                v_Ind       = v_Ind(v_Ind<numel(st_Data.m_Data(:,...
                            st_HFOData.v_ChHFOInfo{ii}.s_ChIdx)));
                v_SigDisp   = st_Data.m_Data(...
                            v_Ind,st_HFOData.v_ChHFOInfo{ii}.s_ChIdx);
                v_SigDisp   = s_Scale.*v_SigDisp;
                
                st_HFOControl.v_hLines{ii}(kk)  = line(...
                                            'Xdata',st_Data.v_Time(v_Ind),...
                                            'Ydata',...
                                            st_Offset.SelectedVals(s_SigHFOIdx)...
                                            + v_SigDisp,...
                                            'Parent',st_hAxes.Main,...
                                            'Color',v_ClusterColor,...
                                            'LineWidth',2);
            end
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOSaveCh()
        % Save channel HFO Info
        
        
        
        if isempty(st_HFOData.v_ChHFOInfo{st_HFOControl.s_IdxCycle}.m_EvtLims)
            return
        end
                
        st_Ch.st_HFOSetting = st_HFOSettings;
        st_Ch.st_HFOInfo    = st_HFOData.v_ChHFOInfo{...
                            st_HFOControl.s_IdxCycle};
        st_Ch.v_Intervals   = f_GetHFOIntervals(str_TempFile,...
                            st_HFOControl.s_CurrChIdx,...
                            st_Ch.st_HFOInfo.m_IntervLims); 
                
        st_Ch.st_HFOInfo.v_EvType	= ones(...
                                    size(st_Ch.st_HFOInfo.m_EvtLims,1),1);
                    
        str_Channel = st_Ch.st_HFOInfo.str_ChLabel{1,1};
        str_Channel = strrep(str_Channel,'-','_');
        str_Channel = strrep(str_Channel,' ','_');
        st_save     = struct;
        
        if ~isnan(str2double(str_Channel))
            str_Channel = strcat('Ch',str_Channel);
        end
        
        st_save     = setfield(st_save,str_Channel,st_Ch); %#ok<NASGU,SFLD>
        
        save(st_HFOControl.str_SavePath, '-struct', 'st_save', '-append')
    end        
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_HFOOpenAnalysisTool()
        % Open HFO Analysis Tool
        p_HFOAnalysisTool()        
        
    end

%% [Sub-Functions] HFO Visual Marking
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
%Subfunctions for HFO visualization
    function f_HFOVisualSetEvent(~,~)
        % Set visual marked HFO
        
        st_HFOAnalysis.m_EvtLims(end+1,:)	=  [...
                                            round(min([st_Cursors.s_IdxCur1,...
                                            st_Cursors.s_IdxCur2])), ...
                                            round(max([st_Cursors.s_IdxCur1,...
                                            st_Cursors.s_IdxCur2]))];
                                        
        if ~isempty(st_HFOAnalysis.m_EvtLims)
            [st_HFOAnalysis.m_EvtLims(:,1),v_Idx]   = sort(...
                                                    st_HFOAnalysis.m_EvtLims(:,1),...
                                                    'ascend');
                                                
            st_HFOAnalysis.m_EvtLims(:,2)   = st_HFOAnalysis.m_EvtLims(...
                                            v_Idx,2);
        end
        
        f_HFOSetChInfo()
        f_HFOBuildCluster()
        f_LinesBuildSignalLines()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_VisualFinishMarking(~,~)
        % Set and file HFO marked
        
        f_HFOCreateSaveFile(1)
        
        % Set Channel Info Cell
        f_HFOSetChInfo()
        
        % Save HFO Info per channel
        f_HFOSaveCh()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_VisualCancel(~,~)
        % Abort visual marking HFO
        % Clear HFO Data
        st_HFOControl.IsVisualMrk   = 0;
        
        % Resize main panel
        set(st_hToolbar.VisualMark,'Visible','off')
        set(st_hToolbar.Panel,'Position',[0 0 1 .95])
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_VisualBuildLinesPSD()
        % Build PSD Lines
        if ~st_Spectrum.s_Exists
            return % To build warning
        end
        
        if st_Cursors.s_PosCur1<st_Cursors.s_PosCur2
            s_IdxIni	= st_Cursors.s_PosCur1;
            s_IdxEnd    = st_Cursors.s_PosCur2;
        else
            s_IdxIni	= st_Cursors.s_PosCur2;
            s_IdxEnd    = st_Cursors.s_PosCur1;
        end
        
        s_IdxIni	= round(s_IdxIni * size(st_Spectrum.m_GaborWT,2));
        s_IdxEnd    = round(s_IdxEnd * size(st_Spectrum.m_GaborWT,2));
        
        if s_IdxIni < 1
            s_IdxIni = 1;
        end
        
        v_PSDCursor	= flipud(mean(...
                        st_Spectrum.m_GaborWT(:,s_IdxIni:s_IdxEnd),2));
        
        v_PSDCursor = v_PSDCursor./sum(v_PSDCursor);
        v_FreqSpect = linspace(st_Spectrum.s_MinFreqHz,...
                    st_Spectrum.s_MaxFreqHz,...
                    st_Spectrum.s_FreqSeg);
                
        % Compute index values
        s_IdxMax    = findextrema(v_PSDCursor);
        [~,s_Val]   = max(v_PSDCursor(s_IdxMax));
        s_IdxMax    = s_IdxMax(s_Val);        
        s_EvMaxFreq = v_FreqSpect(s_IdxMax);  %#ok<NASGU>
        
        v_Idx           = v_FreqSpect >= v_BandLimits(1) & ...
                        v_FreqSpect < v_BandLimits(2);        
        
        s_GammaIdx      = sum(v_PSDCursor(v_Idx));
        
        s_Val           = v_PSDCursor(v_Idx);
        s_IdxMax        = findextrema(s_Val);
        [~,s_Val]       = max(s_Val(s_IdxMax));
        s_IdxMax        = s_IdxMax(s_Val);
        v_FreqTemp      = v_FreqSpect(v_Idx);
        s_EvGamMaxFreq	= v_FreqTemp(s_IdxMax); 
        
        v_Idx           = v_FreqSpect>=v_BandLimits(2) & ...
                                v_FreqSpect < v_BandLimits(3);     
        
        s_RippleIdx     = sum(v_PSDCursor(v_Idx));
        
        s_Val           = v_PSDCursor(v_Idx);
        s_IdxMax        = findextrema(s_Val);
        [~,s_Val]       = max(s_Val(s_IdxMax));
        s_IdxMax        = s_IdxMax(s_Val);
        v_FreqTemp      = v_FreqSpect(v_Idx);
        s_EvRipMaxFreq	= v_FreqTemp(s_IdxMax); 
        
        v_Idx           = v_FreqSpect>=v_BandLimits(3);     
        s_FastRIdx      = sum(v_PSDCursor(v_Idx));
        
        s_Val           = v_PSDCursor(v_Idx);
        s_IdxMax        = findextrema(s_Val);
        [~,s_Val]       = max(s_Val(s_IdxMax));
        s_IdxMax        = s_IdxMax(s_Val);
        v_FreqTemp      = v_FreqSpect(v_Idx);
        s_EvFrpMaxFreq  = v_FreqTemp(s_IdxMax); 
                                   
        set(st_VisualMark.EvGamIdx,...
            'String',sprintf('%2.2f ',s_GammaIdx));
        set(st_VisualMark.EvGamFreq,...
            'String',sprintf('%2.2f Hz',s_EvGamMaxFreq));
        set(st_VisualMark.EvRipIdx,...
            'String',sprintf('%2.2f ',s_RippleIdx));
        set(st_VisualMark.EvRipFreq,...
            'String',sprintf('%2.2f Hz',s_EvRipMaxFreq));
        set(st_VisualMark.EvFRipIdx,...
            'String',sprintf('%2.2f ',s_FastRIdx));
        set(st_VisualMark.EvFRipFreq,...
            'String',sprintf('%2.2f Hz',s_EvFrpMaxFreq));
        
        % Delete previous Lines
        if isfield(st_HFOControl,'v_hVisualPSD')
            if ishandle(st_HFOControl.v_hVisualPSD)
                delete(st_HFOControl.v_hVisualPSD)
            end
        end
        
        st_HFOControl.v_hVisualPSD	= line(...
                                     'Xdata',v_FreqSpect,...
                                     'Ydata',v_PSDCursor,...
                                     'Parent',st_VisualMark.PSD,...
                                     'Color',v_SigColor);
                                 
        set(st_VisualMark.PSD,...
            'XLim',[st_Spectrum.s_MinFreqHz st_Spectrum.s_MaxFreqHz])
    end

end