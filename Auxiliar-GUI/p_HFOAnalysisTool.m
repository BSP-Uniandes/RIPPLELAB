    %   p_HFOAnalysisTool.m 
%   [As a part of HFO Detection Project]
%   Intrface for visualization and classification of putative HFO events
%   Written by:
%   Miguel G. Navarrete Mejia
%   Electrical Engineering MS.
%   UNIVERSIDAD DE LOS ANDES
%   Colombia, 2012
%   mnavarretem@gmail.com
%
%     Copyright (C) 2015, Miguel Navarrete
%     $Version: 0.19.8$ || $Date: 2019/08/20 09:15$
%
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.


function p_HFOAnalysisTool()

addpath('./Functions/')
addpath('./Icons/')
addpath('./Licensed/')

%% [Variable] - Controls -

% --- Icons ---
st_Icons        = f_GetIcons();
% --- Letter Size ---
st_Letter       = f_GetLetterSize();
% --- Colors ---
% Figure Background Color
v_FigColor      = [212 208 200]/255;
% Text Info Color
v_TextColor     = [  0   0 100]/255;
% Signal Lines Color
v_SigColor      = [20  43  140]/255;
% HFO Cluster color
v_EventColor    = [255 0   0  ]/255;
% Colormaps
v_Colormap      = {'autumn';'bone';'colorcube';'cool';'copper';'flag';...
                    'gray';'hot';'hsv';'jet';'lines';'pink';'prism';...
                    'spring';'summer';'white';'winter'};

v_TFVisMethod   = {'Original';'Relative';'Normalized';'Z-Score'};

st_Controls.v_Scale     = [0.1;0.2;0.25;0.5;0.6;0.8;1;1.1;1.2;1.25;1.5;...
                            1.6;1.8;2;2.2;2.5;3;4;5;6;8;10];                       
st_Controls.v_TimeWind  = [(0.1:0.1:1)';(1.2:.2:2)'];
st_Controls.v_GridSec   = [2;3;4;5;10;15;20;30;40;50];                    


v_BandLimits            = [60 120 240];

% --- Message Variables ---
st_HandleMsg            = [];

% ---- type evens ------
v_eventClasses	= f_ListEventClasses();   

%% [Variable] - Lines -
st_Line.SignalWind      = [];
st_Line.SignalEvent     = [];
st_Line.FilterWind      = [];
st_Line.FilterEvent     = [];
st_Line.PowerSpect      = [];
st_Line.TFImage         = [];
st_Line.Spectrogram     = [];

%% [Variable] - HFO Info -

st_EvControl.v_EvCurrent   = [];
st_EvControl.v_EvIdxOk     = [];
st_EvControl.v_EvIdxRem    = [];
st_EvControl.s_LstActive   = [];
st_EvControl.v_ListSel     = 1;
st_EvControl.v_ListRem     = [];
st_EvControl.v_EventTime   = [];
st_EvControl.s_PosIni      = [];
st_EvControl.s_PosEnd      = [];

% --- Spec Info ---
st_EvInfo.s_Width       = [];
st_EvInfo.v_EveIni      = [];
st_EvInfo.v_EveEnd      = [];
st_EvInfo.v_FiltScale   = 1;
st_EvInfo.v_TimeAxe     = [];
st_EvInfo.v_EventFilter = [];
st_EvInfo.m_Spectrum    = [];
st_EvInfo.v_FreqSpect   = [];
st_EvInfo.v_FreqLimits  = [];
st_EvInfo.s_EvMaxFreq   = [];
st_EvInfo.s_CurMaxFreq  = [];
st_EvInfo.s_EvenTime    = [];

%% [Variable] - Load -

st_Load         = [];
st_FileData     = [];
st_ElecData     = [];
 
st_LoadInfo.s_Open          = 'true';
st_LoadInfo.str_RootPath    = './Analysis/';
st_LoadInfo.str_PathName    = './Analysis/';
st_LoadInfo.v_ElecNames     = [];
st_LoadInfo.s_ElecIdx       = 0;
    
% --- Signal Info ---
                        
st_SigData.v_Signal     = [];
st_SigData.str_SigLabel = [];
st_SigData.str_SigName  = [];

%% [Variable] - Cursor  -

st_Cursors.s_hCursor1   = [];
st_Cursors.s_hCursor2   = [];
st_Cursors.v_hCurLine1  = [];
st_Cursors.v_hCurLine2  = [];
st_Cursors.s_SizeCur1   = 0.015;
st_Cursors.s_SizeCur2   = 0.015;
st_Cursors.s_PosCur1    = 0;
st_Cursors.s_PosCur2    = 1;
st_Cursors.s_ColorCur1  = [.749 0 .749];
st_Cursors.s_ColorCur2  = [1 .4 0];
st_Cursors.s_CurrentCur = [];
st_Cursors.s_ElecCursor = [];
st_Cursors.s_IdxCur1    = [];
st_Cursors.s_IdxCur2    = [];
st_Cursors.s_KeyStep    = 0.005;

%% [Building] Main Figure

% Build main figure
st_hFigure.Analysis = figure(...      
                    'MenuBar','None', ...
                    'ToolBar','None', ...
                    'NumberTitle','off', ...
                    'Name','HFO Analysis Tool', ...
                    'Color',v_FigColor,...
                    'Units','normalized',...
                    'Position',[.2 .1 .6 .8],...
                    'Visible','on',...
                    'Renderer','OpenGL',...
                    'WindowButtonUpFcn',@f_CursorStopDrag,...
                    'KeyReleaseFcn',@f_SelectionKeyChange);
                
%% [Building] Toolbars and Panels
% Toolbars

% Button Toolbar
st_hPanel.Icons   = uitoolbar(st_hFigure.Analysis,...
                    'Visible','on');
                
% Controls Toolbar
st_hPanel.Control = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[0 .94 .6 .06],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);            
% Axes Tool Panel
st_hPanel.Axes    = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor','w',...
                    'Position',[0 0 .6 .94],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);  
                
% Info Tool Panel
st_hPanel.InfoLab = uicontrol(st_hFigure.Analysis,...
                    'Style','text',...
                    'BackgroundColor','k',...
                    'ForegroundColor','w',...
                    'HorizontalAlignment','right',...
                    'FontSize',.8*st_Letter.toollabel,...
                    'String','General Information ',...
                    'Units','normalized',...
                    'Position',[.6 .98 .4 .02]);
                    
st_hPanel.Info    = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.6 .9 .4 .08],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);                    
% Selection Tool Panel
st_hPanel.InfoLab = uicontrol(st_hFigure.Analysis,...
                    'Style','text',...
                    'BackgroundColor','k',...
                    'ForegroundColor','w',...
                    'HorizontalAlignment','right',...
                    'FontSize',.8*st_Letter.toollabel,...
                    'String','Selection Panel ',...
                    'Units','normalized',...
                    'Position',[.6 .88 .4 .02]);
                     
st_hPanel.Select   = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.6 .6 .4 .28],...
                    'BorderType','etchedin',...
                    'BorderWidth',1); 
                
st_hPanel.InfoLab = uicontrol(st_hFigure.Analysis,...
                    'Style','text',...
                    'BackgroundColor','k',...
                    'ForegroundColor','w',...
                    'HorizontalAlignment','right',...
                    'FontSize',.8*st_Letter.toollabel,...
                    'String','Event Panel ',...
                    'Units','normalized',...
                    'Position',[.6 .58 .4 .02]); 
                
st_hPanel.Event     = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.6 .45 .4 .13],...
                    'BorderType','beveledin',...
                    'BorderWidth',1);
                
st_hPanel.InfoLab = uicontrol(st_hFigure.Analysis,...
                    'Style','text',...
                    'BackgroundColor','k',...
                    'ForegroundColor','w',...
                    'HorizontalAlignment','right',...
                    'FontSize',.8*st_Letter.toollabel,...
                    'String','Frequency Controls ',...
                    'Units','normalized',...
                    'Position',[.6 .43 .4 .02]); 
                    
st_hPanel.FreqDisp = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.6 .37 .4 .06],...
                    'BorderType','beveledin',...
                    'BorderWidth',1);
% Spec Tool Panel
st_hPanel.PSD    = uipanel(st_hFigure.Analysis,...
                    'BackgroundColor',v_FigColor,...
                    'Position',[.6 0 .4 .37],...
                    'BorderType','etchedin',...
                    'BorderWidth',1);               
                
%% [Controls] (Icons Panel)

st_hIcons.import    = uitoggletool(st_hPanel.Icons,...
                    'CData',st_Icons.import,...
                    'TooltipString','Import Analysis',...
                    'ClickedCallback',@f_LoadAnalysis);
                
st_hIcons.save      = uitoggletool(st_hPanel.Icons,...
                    'CData',st_Icons.save,...
                    'TooltipString','Save Analysis',...
                    'ClickedCallback',@f_SaveAnalysis);
                
st_hIcons.zoominH   = uitoggletool(st_hPanel.Icons,...
                    'Separator','on',...
                    'CData',st_Icons.zoominV,...
                    'TooltipString','Horizontal Zoom In',...
                    'ClickedCallback',@f_ZoomSelect);
                
st_hIcons.zoomoutH  = uitoggletool(st_hPanel.Icons,...
                    'CData',st_Icons.zoomoutV,...
                    'TooltipString','Horizontal Zoom Out',...
                    'ClickedCallback',@f_ZoomSelect);        
                
st_hIcons.pan       = uitoggletool(st_hPanel.Icons,...
                    'CData',st_Icons.hand,...
                    'TooltipString','Move',...
                    'ClickedCallback',@f_ZoomSelect);
                                                
st_hIcons.saveInt   = uitoggletool(st_hPanel.Icons,...
                    'Separator','on',...
                    'CData',st_Icons.saveInt,...
                    'TooltipString','Save HFO Interval',...
                    'ClickedCallback',@f_SaveInterval); 

st_hIcons.figtools	= uitoggletool(st_hPanel.Icons,...
                    'Separator','on',...
                    'CData',st_Icons.tools,...
                    'TooltipString','Open Figure Tools',...
                    'ClickedCallback',@f_FigureTools); 
                
v_IncompatibleZoomButtons   = [st_hIcons.zoominH;st_hIcons.zoomoutH;...
                                          st_hIcons.pan];
                                      
%% [Controls] (Control Panel)
% Controls
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Window Width Selection
st_Controls.windowLabel   = uicontrol(st_hPanel.Control,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Window (Secs) ',...
                        'Units','normalized',...
                        'Position',[.005 .5 .2 .4]);
                    
st_Controls.windowList  = uicontrol(st_hPanel.Control,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',num2str(st_Controls.v_TimeWind),...
                        'Value',10,...
                        'Units','normalized',...
                        'Position',[.005 .01 .2 .5],...
                        'CallBack',@f_DisplayProcess);
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Amplitude Scale Selection             
st_Controls.scaleLabel   = uicontrol(st_hPanel.Control,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Amplitude %',...
                        'Units','normalized',...
                        'Position',[.21 .5 .2 .4]);

st_Controls.scaleList   = uicontrol(st_hPanel.Control,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',num2str(100*st_Controls.v_Scale),...
                        'Value',7,...
                        'Units','normalized',...
                        'Position',[.21 .01 .2 .5],...
                        'CallBack',@f_DisplayProcess);
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Grid Sections Selection
st_Controls.gridLabel   = uicontrol(st_hPanel.Control,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Grid Sections',...
                        'Units','normalized',...
                        'Position',[.415 .5 .2 .4]);

st_Controls.gridList    = uicontrol(st_hPanel.Control,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',[{num2str(st_Controls.v_GridSec)};{'off'}],...
                        'Value',2,...
                        'Units','normalized',...
                        'Position',[.415 .01 .2 .5],...
                        'CallBack',@f_AxeSetMainXTick);
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% Colormap Selection
st_Controls.ColmapLabel   = uicontrol(st_hPanel.Control,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','Colormap',...
                        'Units','normalized',...
                        'Position',[.62 .5 .2 .4]);

st_Controls.ColmapList    = uicontrol(st_hPanel.Control,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',v_Colormap,...
                        'Value',8,...
                        'Units','normalized',...
                        'Position',[.62 .01 .2 .5],...
                        'CallBack',@f_ScalogramSet); 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
% TF Equalization Selection
st_Controls.TFEquLabel   = uicontrol(st_hPanel.Control,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toollabel*.7,...
                        'String','TF-EQ',...
                        'Units','normalized',...
                        'Position',[.825 .5 .15 .4]);

st_Controls.TFEquList    = uicontrol(st_hPanel.Control,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...     
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',v_TFVisMethod,...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.825 .01 .165 .5],...
                        'CallBack',@f_ScalogramSet);

%% [Controls] (Axes Panel)
% Cursor controls
%..........................................................................

st_hAxes.StickCur    = uicontrol(st_hPanel.Axes,...
                        'Style','togglebutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.CursorMove,...
                        'Position',[.02 .95 .06 .04],...
                        'CallBack',@f_DisplayProcess);
                    
st_hAxes.CurIntLab    = uicontrol(st_hPanel.Axes,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'FontSize',.7*st_Letter.toolcontrol,...
                        'String','Cursor Interval (s): ',...
                        'Units','normalized',...
                        'Position',[.1 .97 .2 .02]);
                    
st_hAxes.CurInt      = uicontrol(st_hPanel.Axes,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'FontSize',.7*st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.3 .97 .1 .02]); 
                    
% Axes Building
%..........................................................................
st_hAxes.Cursors     = axes('Parent',st_hPanel.Axes,... 
                    'FontSize',0.7*st_Letter.toolcontrol,...
                    'Position',[.1 .95 .85 .02],...
                    'Box','on',...
                    'XLim',[0 1],...
                    'XLim',[0 1],...
                    'XTick',[],...
                    'XTickLabel',[],...
                    'YTick',[],...
                    'YTickLabel',[]);
                
st_hAxes.Signal     = axes('Parent',st_hPanel.Axes,... 
                    'FontSize',0.7*st_Letter.toolcontrol,...
                    'Position',[.1 .65 .85 .3],...
                    'Box','on',...
                    'XTick',[],...
                    'XTickLabel',[],...
                    'YTick',[],...
                    'YTickLabel',[]);
                
st_hAxes.Filtered   = axes('Parent',st_hPanel.Axes,... 
                    'FontSize',st_Letter.toolcontrol,...
                    'Position',[.1 .35 .85 .3],...
                    'Box','on',...
                    'XTick',[],...
                    'XTickLabel',[],...
                    'YTick',[],...
                    'YTickLabel',[]);
                
st_hAxes.TimeFreq   = axes('Parent',st_hPanel.Axes,... 
                    'FontSize',st_Letter.toolcontrol,...
                    'Box','on',...
                    'YLimMode','manual',...
                    'YLim',[0 1],...
                    'Position',[.1 .05 .85 .3],...
                    'XTick',[],...
                    'XTickLabel',[],...
                    'YTick',[],...
                    'YTickLabel',[]);
                
linkaxes([st_hAxes.Signal,st_hAxes.Filtered,st_hAxes.TimeFreq],'x')
                
%% [Controls] (Cursors)

st_Cursors.s_hCursor1 = patch('Parent',st_hAxes.Cursors,...
                    'XData',[st_Cursors.s_PosCur1 ...
                    st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                    st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                    st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                    st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1],...
                    'YData',[0 .5 1 1 .5],...
                    'FaceColor',st_Cursors.s_ColorCur1,...
                    'EdgeColor','none',...
                    'ButtonDownFcn',@f_CursorClick);

st_Cursors.s_hCursor2 = patch('Parent',st_hAxes.Cursors,...
                    'XData',[st_Cursors.s_PosCur2 ...
                    st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                    st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                    st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                    st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2],...
                    'YData',[0 .5 1 1 .5],...
                    'FaceColor',st_Cursors.s_ColorCur2,...
                    'EdgeColor','none',...
                    'ButtonDownFcn',@f_CursorClick);
 %plot cursors     
 f_PlotCursors()
                    
%% [Controls] (Info Panel)
% --- Labels ---
                    
st_Info.SigNameLab      = uicontrol(st_hPanel.Info,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','Signal Name: ',...
                        'Units','normalized',...
                        'Position',[.05 .7 .3 .2]);       

st_Info.ElectrodeNameLab = uicontrol(st_hPanel.Info,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','Electrode: ',...
                        'Units','normalized',...
                        'Position',[.05 .4 .3 .2]);

st_Info.MethodNameLab   = uicontrol(st_hPanel.Info,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','Method Name: ',...
                        'Units','normalized',...
                        'Position',[.05 .1 .3 .2]);
                    
% --- Texts ---
st_Info.SigName         = uicontrol(st_hPanel.Info,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.4 .7 .55 .2]);       

st_Info.ElecList     = uicontrol(st_hPanel.Info,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.4 .45 .55 .2],...
                        'CallBack',@f_LoadElectrode);

st_Info.MethodName       = uicontrol(st_hPanel.Info,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',... 
                        'ForegroundColor',v_TextColor,...     
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.4 .1 .55 .2]);
                    
%% [Controls] (Selection Panel) 

st_Selection.EvenDetLab = uicontrol(st_hPanel.Select,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Events Detected : ',...
                        'Units','normalized',...
                        'Position',[.05 .91 .4 .05]);
                    
st_Selection.EvenDetLst = uicontrol(st_hPanel.Select,...
                        'Style','listbox',...
                        'BackgroundColor','w',...
                        'Units','normalized',...
                        'Max',1,...
                        'Min',0,...
                        'Value',[],...
                        'Position',[.05 .05 .4 .85],...
                        'KeyPressFcn',@f_SelectionKeyChange,...
                        'CallBack',@f_SelectionChangeEvent);
                    
st_Selection.EvenRejLab = uicontrol(st_hPanel.Select,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Events Rejected : ',...
                        'Units','normalized',...
                        'Position',[.55 .91 .4 .05]);
                    
st_Selection.EvenRejLst = uicontrol(st_hPanel.Select,...
                        'Style','listbox',...
                        'BackgroundColor','w',...
                        'Units','normalized',...
                        'Max',1,...
                        'Min',0,...
                        'Value',[],...
                        'Position',[.55 .5 .4 .4],...
                        'CallBack',{});
                    
st_Selection.Remove     = uicontrol(st_hPanel.Select,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.ButtomRigh,...
                        'String',[],...
                        'Position',[.46 .7 .08 .2],...
                        'CallBack',@f_SelectionRemoveEvent);
                    
st_Selection.UnRemove   = uicontrol(st_hPanel.Select,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.ButtomLeft,...
                        'String',[],...
                        'Position',[.46 .5 .08 .2],...
                        'CallBack',@f_SelectionKeepEvent);
                 
st_Selection.DeleteEvn  = uicontrol(st_hPanel.Select,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'String','Delete Events',...
                        'Position',[.55 .35 .4 .15],...
                        'CallBack',@f_SelectionDeleteEvent);

st_Selection.Scan       = uipanel(st_hPanel.Select,...
                        'BackgroundColor',v_FigColor,...
                        'Position',[.46 .05 .49 .3],...
                        'Title','Scan',...
                        'BorderWidth',1);                  
                    
st_Scan.ElecList        = uicontrol(st_Selection.Scan,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','left',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','Display|Auto-Classify|Remove Others',...
                        'Value',1,...
                        'Units','normalized',...
                        'Position',[.05 .8 .45 .2],...
                        'CallBack',{});

st_Scan.Button      = uicontrol(st_Selection.Scan,...
                        'Style','togglebutton',...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'cData',st_Icons.ButtomRigh,...
                        'Position',[.55 .05 .4 .9],...
                        'CallBack',@f_EventOptionScan);
                              
st_Scan.Progress    = uicontrol(st_Selection.Scan,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String','-/-',...
                        'Units','normalized',...
                        'Position',[.05 .05 .45 .4]);
                    
%% [Controls] (EventDisp Panel)

%PanelTable
                    
%--------------------------------------------------------------------------    
st_Event.EvIdxLabFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.17 .75 .15 .2]);   
                                        
st_Event.EvFrqLabFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.32 .75 .15 .2]);   
%--------------------------------------------------------------------------                        
st_Event.EvGamLabFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.02 .55 .15 .2]);   
                                        
st_Event.EvRipLabFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.02 .35 .15 .2]);   
                                        
st_Event.EvFRipLabFrame  = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.02 .15 .15 .2]);  
%--------------------------------------------------------------------------      
st_Event.EvGamIdxFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.17 .55 .15 .2]);   
                                        
st_Event.EvRipIdxFrame   = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.17 .35 .15 .2]);   
                                        
st_Event.EvFRipIdxFrame  = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.17 .15 .15 .2]);  
%--------------------------------------------------------------------------                     
st_Event.EvGamFreqFrame  = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.32 .55 .15 .2]);   
                                        
st_Event.EvRipFreqFrame  = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.32 .35 .15 .2]);   
                                        
st_Event.EvFRipFreqFrame = uipanel(st_hPanel.Event,...
                        'BackgroundColor',v_FigColor,...
                        'Units','normalized',...
                        'Position',[.32 .15 .15 .2]);    
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||                                         
st_Event.EvLabIdx       = uicontrol(st_Event.EvIdxLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Idx_Value',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_Event.EvLabFrqIdx    = uicontrol(st_Event.EvFrqLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','MaxFreq',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]); 
                                        
st_Event.EvLabGamIdx    = uicontrol(st_Event.EvGamLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Gamma: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_Event.EvLabRipIdx    = uicontrol(st_Event.EvRipLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Ripple: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
                    
st_Event.EvLabFRipIdx    = uicontrol(st_Event.EvFRipLabFrame,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','FastRipple: ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);                      
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
st_Event.EvGamIdx       = uicontrol(st_Event.EvGamIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_Event.EvRipIdx       = uicontrol(st_Event.EvRipIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_Event.EvFRipIdx       = uicontrol(st_Event.EvFRipIdxFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);  
%--------------------------------------------------------------------------                     
st_Event.EvGamFreq       = uicontrol(st_Event.EvGamFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_Event.EvRipFreq        = uicontrol(st_Event.EvRipFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);   
                                        
st_Event.EvFRipFreq        = uicontrol(st_Event.EvFRipFreqFrame,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[0 0 1 1]);    
%||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

st_Event.EvLabMaxFreq    = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.8*st_Letter.toollabel,...
                        'String','EvMaxFreq',...
                        'Units','normalized',...
                        'Position',[.48 .75 .15 .15]);  
                    
st_Event.EvMaxFreq       = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.48 .55 .15 .2]);  

st_Event.EvLabAmpli    = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.8*st_Letter.toollabel,...
                        'String','EvAmplitude',...
                        'Units','normalized',...
                        'Position',[.48 .35 .15 .15]);  
                    
st_Event.EvAmpli        = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.48 .15 .15 .2]);  
                    
st_Event.EvLabDuration   = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.8*st_Letter.toollabel,...
                        'String','EvLength',...
                        'Units','normalized',...
                        'Position',[.64 .75 .15 .15]);
                    
st_Event.EvDuration      = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','center',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',st_Letter.toolcontrol,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.64 .55 .15 .2]);    

st_Event.EvLabType       = uicontrol(st_hPanel.Event,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.8*st_Letter.toollabel,...
                        'String','EventType',...
                        'Units','normalized',...
                        'Position',[.64 .35 .15 .15]); 
                    
st_Event.EvType          = uicontrol(st_hPanel.Event,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String',v_eventClasses,...
                        'Units','normalized',...
                        'Position',[.64 .15 .15 .2],...
                        'CallBack',@f_EventChangeType);      
                   
st_Event.EvSetAsCur      = uicontrol(st_hPanel.Event,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',1*st_Letter.toolcontrol,...
                        'String','Set as cursor',...
                        'Units','normalized',...
                        'Position',[.80 .15 .18 .8],...
                        'CallBack',@f_EventAsCursor);

%% [Controls] (FreqDisp Panel)
                   
% Dsiplay Panel Building
st_EventDisp.MinFreqLab = uicontrol(st_hPanel.FreqDisp,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','minFreq',...
                        'Units','normalized',...
                        'Position',[.05 .5 .2 .4]); 
                    
st_EventDisp.MinFreq	= uicontrol(st_hPanel.FreqDisp,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'FontSize',.7*st_Letter.toollabel,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.05 .05 .2 .5]);     
                    
st_EventDisp.MaxFreqLab = uicontrol(st_hPanel.FreqDisp,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','maxFreq',...
                        'Units','normalized',...
                        'Position',[.26 .5 .2 .4]); 
                    
st_EventDisp.MaxFreq	= uicontrol(st_hPanel.FreqDisp,...
                        'Style','edit',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'FontSize',.7*st_Letter.toollabel,...
                        'String',' ',...
                        'Units','normalized',...
                        'Position',[.26 .05 .2 .5]);  
                    
st_EventDisp.SetFreqLimits = uicontrol(st_hPanel.FreqDisp,...
                        'Style','pushbutton',...
                        'BackgroundColor',v_FigColor',...
                        'HorizontalAlignment','right',...
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','Set Freq Limits',...
                        'Units','normalized',...
                        'Position',[.47 .05 .25 .9],...
                        'CallBack',@f_ControlSetFreqLimits);
                   
st_EventDisp.EvLabType  = uicontrol(st_hPanel.FreqDisp,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','center',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','PSD Type',...
                        'Units','normalized',...
                        'Position',[.75 .5 .22 .4]); 
                    
st_EventDisp.PSDType    = uicontrol(st_hPanel.FreqDisp,...
                        'Style','popupmenu',...
                        'BackgroundColor','w',...
                        'HorizontalAlignment','right',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',.9*st_Letter.toolcontrol,...
                        'String','Welch|TF Mean|FFT',...
                        'Units','normalized',...
                        'Position',[.75 .01 .22 .5],...
                        'CallBack',@f_ControlPSDChange);                       
                 
%% [Controls] (PSD Panel)
% Axis Building
%..........................................................................
                     
st_hAxes.PowerSpec   = axes('Parent',st_hPanel.PSD,... 
                    'FontSize',st_Letter.toolcontrol,...
                    'Position',[.15 .15 .8 .75]);
                 
% Axis Label Building
%..........................................................................
              
st_hAxes.XlabelTF   = xlabel('Frequency (Hz)',...
                    'Parent',st_hAxes.PowerSpec,...
                    'FontSize',st_Letter.toolcontrol);
                                
st_hAxes.YlabelTF   = ylabel('PSD (Bandwidth %)',...
                    'Parent',st_hAxes.PowerSpec,...
                    'FontSize',st_Letter.toolcontrol);

set(st_hAxes.PowerSpec,...
	'YLimMode','auto',...
    'YLabel',st_hAxes.YlabelTF,...
    'XLabel',st_hAxes.XlabelTF)   

% Info Freq Axes

st_Event.PSDMaxFreqLab   = uicontrol(st_hPanel.PSD,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','right',...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','PSDMaxFreq: ',...
                        'Units','normalized',...
                        'Position',[.5 .92 .2 .04]);
                    
st_Event.PSDMaxFreq      = uicontrol(st_hPanel.PSD,...
                        'Style','text',...
                        'BackgroundColor',v_FigColor,...
                        'HorizontalAlignment','left',...
                        'ForegroundColor',v_TextColor,...      
                        'FontSize',.7*st_Letter.toollabel,...
                        'String','-',...
                        'Units','normalized',...
                        'Position',[.7 .92 .2 .04]);
                    
%% [Building] End 
                    
%% [Functions] Load Data
% In this section are indicated the functions for Load Data
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LoadElectrode(~,~)
        % Load Data
                       
        if isempty(st_LoadInfo.v_ElecNames)
            warndlg('No event was detected','Warning')
            return
        end
                            
        st_LoadInfo.s_ElecIdx   = get(st_Info.ElecList,'Value');
        st_ElecData             = getfield(st_Load,...
                                st_LoadInfo.v_ElecNames{...
                                st_LoadInfo.s_ElecIdx}); %#ok<*GFLD>
        
        if isempty(st_ElecData.v_Intervals)
            warndlg('No event was detected','Warning')
            return
        end
        
        set(st_Selection.EvenDetLst,'Value',1)
        st_EvControl.v_ListSel  = 1;
        % Find Event Initial Time
        v_TimeIntervIni         = st_ElecData.st_HFOInfo.m_EvtLims(:,1);
        v_TimeIntervIni         = v_TimeIntervIni./...
                                st_ElecData.st_HFOInfo.s_Sampling;
        
        % Set Interval Position Variable
        st_EvControl.v_EvIdxOk   = 1:numel(v_TimeIntervIni);
        st_EvControl.v_EvIdxRem  = [];

        % Set List of Events
        st_EvControl.v_EventTime = cell(numel(v_TimeIntervIni),1);
        
        for kk=1:numel(v_TimeIntervIni)
            st_EvControl.v_EventTime(kk,1)  = {sprintf(...
                                            '%02.0f:%02.0f:%05.2f',...
                                            f_Secs2hms(v_TimeIntervIni(kk)))};
        end
        
        st_EvControl.s_LstActive = 'detected';
        
        % Place Electrone Analysis Info
        f_ControlSetElectrodeInfo()
        
        % Place Events Names
        f_ControlPlaceListEv(st_EvControl.v_EvIdxOk,1)
        f_ControlPlaceListEv([],0)
        
        % Draw Lines
        f_DisplayProcess()
                                        
    end

%% [Functions] Icons :: Toolbar :: File Functions 
% In this section are indicated the nested functions for Independent Icons 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	function f_LoadAnalysis(s_handle,~)
        %Load Analysis
        
        if ishandle(s_handle)
            st_LoadInfo.s_Open = 'true';
            set(st_hIcons.import,'State','off');
        end
        
        if st_LoadInfo.s_Open
            [st_LoadInfo.str_FileName,...
                st_LoadInfo.str_PathName]   = uigetfile('*.rhfe',...
                                            'Select the HFO analysis file',...
                                            st_LoadInfo.str_PathName);
                                    
            if  isequal(st_LoadInfo.str_FileName,0)
                st_LoadInfo.str_PathName    = st_LoadInfo.str_RootPath;
                return
            else                      
                st_LoadInfo.str_FullPath = fullfile(...
                                        st_LoadInfo.str_PathName,...
                                        st_LoadInfo.str_FileName);
            end
            
        end
        
        st_HandleMsg    = f_waitmsg('Loading Data');
        pause(1)
        
        st_Load         = load(st_LoadInfo.str_FullPath,'-mat');
        st_FileData     = st_Load.st_FileData;
                                        
        st_Load         = rmfield(st_Load,{'st_FileData'});
                                
        st_LoadInfo.v_ElecNames = fieldnames(st_Load);
        st_LoadInfo.v_ElecNames = sort(st_LoadInfo.v_ElecNames);
                
        % Place General Analysis Info
        f_ControlSetGeneralInfo()
        
        % Load Electrode
        st_EvControl.v_ListSel  = 1;
        f_LoadElectrode()
        
        if ishandle(st_HandleMsg.s_WaitFigure)
            delete(st_HandleMsg.s_WaitFigure)
            clear st_HandleMsg
        end
                    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ZoomSelect(hObject,~)
        %Select Zoom Action or related
        
        s_SkipIdx   =  find(v_IncompatibleZoomButtons ~= hObject);
        
        if hObject == 0
            
            for kk = 1:numel(s_SkipIdx)
            set(v_IncompatibleZoomButtons(s_SkipIdx(kk)),'State','off')
            end
            
            h_zoom = zoom;
            h_pan = pan;
            h_DataCur = datacursormode(st_hAxes.Signal);
            set(h_zoom,'Enable','off')
            set(h_pan,'Enable','off')
            set(h_DataCur,'Enable','off')
            return
            
        end
        
        for kk = 1:numel(s_SkipIdx)
            set(v_IncompatibleZoomButtons(s_SkipIdx(kk)),'State','off')
        end
        
        if strcmp('off',get(hObject,'State'))
            h_zoom = zoom;
            h_pan = pan;
            set(h_zoom,'Enable','off')
            set(h_pan,'Enable','off')
            return
        end
        
        set(st_hFigure.Analysis,'CurrentAxes',st_hAxes.Signal)
        
        switch hObject
            case st_hIcons.zoominH
                f_ZoomInH();
            case st_hIcons.zoomoutH
                f_ZoomOutH();                
            case st_hIcons.pan
                f_ZoomPan();
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SaveInterval(h_Object,~)
        % Save Interval dispayed
        
        set(h_Object,'State','off')
        if isempty(st_SigData.v_Signal)
            return
        end
        
        v_List          = get(st_Selection.EvenDetLst,'string');
        s_Pos           = get(st_Selection.EvenDetLst,'value');
        
        str_Channel     = cell2mat(st_SigData.str_SigLabel); 
        str_Event       = cell2mat(v_List(s_Pos(1)));
        [str_Name,~]    = strtok(st_SigData.str_SigName,'.');
        v_Idx           = find(str_Event == ':' | str_Event == '.');
        str_Event(v_Idx)= '-'; %#ok<FNDSB>
        
        str_FileName    = [str_Name '%' str_Channel '%' str_Event];
        
        [str_IntFileName,str_IntFilePath]=...
            uiputfile('*.mat','Save HFO Interval',str_FileName);
        
        v_SigInterval   = st_SigData.v_Signal(...
                        st_EvControl.s_PosIni:st_EvControl.s_PosEnd);
                            
        s_FreqSample    = st_ElecData.st_HFOInfo.s_Sampling; 
        
        str_IntFile = fullfile(str_IntFilePath,str_IntFileName);    
        save(str_IntFile,'str_Name','str_Channel','v_SigInterval','s_FreqSample')
        clear str_Name str_Channel v_SigInterval s_FreqSample v_List s_Pos
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SaveAnalysis(s_handle,~)
        % Save Analysis
                
        if ishandle(s_handle)
            set(s_handle,'State','off');
        end
        
        [str_FileName,str_PathName] = uiputfile('*.rhfe','Save changes',...
                                    st_LoadInfo.str_FullPath);
        
        if  isequal(str_FileName,0)
             return
        end
                        
        str_FullPath = fullfile(str_PathName,str_FileName);
        
        if ~isempty(which(str_FullPath))
            delete(str_FullPath)
        end
        
        save(str_FullPath, 'st_FileData')        
        save(str_FullPath,'-struct','st_Load','-append')
        
    end

%% [Functions] Icons :: Toolbar :: Zoom Functions
% In this section are indicated the nested functions Zoom Functions
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomInH()
    %Horizontal Zoom In Function
        h_zoom = zoom;
        set(h_zoom,...
            'Direction','in',...
            'Motion','Vertical',...
            'Enable','on',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeFreq,false)
        setAllowAxesZoom(h_zoom,st_hAxes.PowerSpec,false)
        setAllowAxesZoom(h_zoom,st_hAxes.SigLabelAx,false)
        setAllowAxesZoom(h_zoom,st_hAxes.FilLabelAx,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Cursors,false)
    end
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomOutH()
    %Horizontal Zoom Out Function
        h_zoom = zoom;
        set(h_zoom,...
            'Direction','out',...
            'Motion','Vertical',...
            'Enable','on',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesZoom(h_zoom,st_hAxes.TimeFreq,false)
        setAllowAxesZoom(h_zoom,st_hAxes.PowerSpec,false)
        setAllowAxesZoom(h_zoom,st_hAxes.SigLabelAx,false)
        setAllowAxesZoom(h_zoom,st_hAxes.FilLabelAx,false)
        setAllowAxesZoom(h_zoom,st_hAxes.Cursors,false)
    end
 %:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::   
    function f_ZoomPan()
    %Vertical Zoom Out Function
        h_pan = pan;
        set(h_pan,...
            'Enable','on',...
            'Motion','Vertical',...
            'ActionPostCallback',@f_ZoomPostZoom)
        setAllowAxesPan(h_pan,st_hAxes.TimeFreq,false)
        setAllowAxesPan(h_pan,st_hAxes.PowerSpec,false)
        setAllowAxesPan(h_pan,st_hAxes.SigLabelAx,false)
        setAllowAxesPan(h_pan,st_hAxes.FilLabelAx,false)
        setAllowAxesPan(h_pan,st_hAxes.Cursors,false)
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ZoomPostZoom(~,~)
        %CallBack when an axis is Zoomed
        f_CursorProcess()
    end

%% [Functions] Plot Functions
% In this section are indicated the nested functions for plotting 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_DisplayProcess(~,~)
        % Process to draw lines
        
        if isempty(st_Load)
            return
        end
        
        if isempty(st_EvControl.v_EvIdxOk) && ...
                strcmp(st_EvControl.s_LstActive,'detected')
        	f_LinesDelete()
            return
            
        elseif isempty(st_EvControl.v_EvIdxRem) && ...
                strcmp(st_EvControl.s_LstActive,'rejected')
            
            st_EvControl.s_LstActive = 'detected';
            f_DisplayProcess()
            return
        end
        
        st_Line.s_Plot  = true;
        
        	%f_LinesDelete()
            
        % Count list events 
        f_ControlCountEvents()
        
        % Set Window width
        f_AxeSetWindWidth()
        
        if ~st_Line.s_Plot
            return
        end
                
        % Filter original signal
        f_FilterSet()
            
        % Plot Lines
        f_LinesBuild()
        
        % Plot Cursors
        f_PlotCursors()
        
        % Set Time Freq
        f_ScalogramSet()
                
        % Set XTick distance
        f_AxeSetMainXTick()
                
        % Set Cursor to Event
        f_CursorEvCursor()
        
        % Set Cursors and Set Power Spectrum
        f_CursorProcess()
                
        % Set Specification Info
        f_ControlSetEventInfo()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetWindWidth(~,~)
        % Set Window width
                            
        st_EvInfo.s_Width = st_Controls.v_TimeWind(...
                            get(st_Controls.windowList,'Value'))*...
                            st_ElecData.st_HFOInfo.s_Sampling;
                                
       % Obtain Line Limits                    
        f_LinesGetLimits()
       
        if st_EvInfo.s_Width < ...
                st_EvInfo.v_EveEnd(end) - st_EvInfo.v_EveIni(1)
            warndlg(sprintf('Total Interval must be minor than %d Secs',...
            st_Controls.v_TimeWind(get(st_Controls.windowList,'Value')))...
            ,'Warning')
        
            if numel(get(st_Selection.EvenDetLst,'Value')) == 1
                f_LinesDelete()
                st_Line.s_Plot = false;
                return
            end
            
            set(st_Selection.EvenDetLst,'Value',st_EvControl.v_ListSel(1))
            st_EvControl.v_ListSel   = st_EvControl.v_ListSel(1);
            f_DisplayProcess()
        end
                                
        % Obtain Time Limits in axes
        s_middleSample    	= round(mean(st_ElecData.st_HFOInfo.m_Rel2IntLims(...
                            st_EvControl.v_EvCurrent,:)));
                        
        st_EvInfo.v_TimeAxe	= ((1:numel(st_ElecData.v_Intervals{...
                            st_EvControl.v_EvCurrent,1})) - ...
                            s_middleSample)./...
                            st_ElecData.st_HFOInfo.s_Sampling;
        
        if st_EvControl.s_PosIni < 1
            st_EvControl.s_PosIni = 1;
        end
        
        if st_EvControl.s_PosEnd > numel(st_EvInfo.v_TimeAxe)
            st_EvControl.s_PosEnd = numel(st_EvInfo.v_TimeAxe);
        end
                
        v_XLim  = [st_EvInfo.v_TimeAxe(st_EvControl.s_PosIni) ...
                st_EvInfo.v_TimeAxe(st_EvControl.s_PosEnd)];
       
        set(st_hAxes.Signal,...            
            'FontSize',st_Letter.toolcontrol,...
            'XLim',v_XLim)
        
        set(st_hAxes.Filtered,...
            'FontSize',st_Letter.toolcontrol,...
            'XLim',v_XLim)
        
        set(st_hAxes.TimeFreq,...
            'FontSize',st_Letter.toolcontrol,...
            'XLim',v_XLim)
    
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesGetLimits()
        % Set Line Limits for event and for window
        
        switch st_EvControl.s_LstActive
            case 'detected'
                % Select the aproved event selected
                                
                st_EvControl.v_EvCurrent = st_EvControl.v_EvIdxOk(...
                                st_EvControl.v_ListSel); 
            case 'rejected'
                % Select the rejected event selected
                st_EvControl.v_EvCurrent = st_EvControl.v_EvIdxRem(...
                                        st_EvControl.v_ListRem);
        end
                                
        st_EvInfo.v_EveIni    = st_ElecData.st_HFOInfo.m_Rel2IntLims(...
                                st_EvControl.v_EvCurrent,1);
        st_EvInfo.v_EveEnd    = st_ElecData.st_HFOInfo.m_Rel2IntLims(...
                                st_EvControl.v_EvCurrent,2);
            
        if st_EvInfo.v_EveIni < 1
            st_EvInfo.v_EveIni	= 1;
        end
        
        if st_EvInfo.v_EveEnd > numel(st_EvInfo.v_TimeAxe)
            st_EvInfo.v_EveEnd	= numel(st_EvInfo.v_TimeAxe);
        end
        
        % Get the mean index of event selected
        s_EventMean             = round(mean([...
                                st_EvInfo.v_EveEnd(end) ...
                                st_EvInfo.v_EveIni(1)]));
                                
        s_WindowMean            = round(st_EvInfo.s_Width / 2);
                        
        st_EvControl.s_PosIni    = s_EventMean - s_WindowMean;
        st_EvControl.s_PosEnd    = s_EventMean + s_WindowMean;
        
        if st_EvControl.s_PosIni < 1
            st_EvControl.s_PosIni    = 1;
            st_EvControl.s_PosEnd    = st_EvInfo.s_Width;
        end
        
        if st_EvControl.s_PosEnd > ...
                numel(st_ElecData.v_Intervals{st_EvControl.v_ListSel,1})
            st_EvControl.s_PosIni    = numel(...
                                    st_ElecData.v_Intervals{...
                                    st_EvControl.v_ListSel,1}) - ...
                                                       st_EvInfo.s_Width;
            st_EvControl.s_PosEnd    = numel(...
                                    st_ElecData.v_Intervals{...
                                    st_EvControl.v_ListSel,1});
        end
                                
        st_EvInfo.s_EvenTime   = (st_EvInfo.v_EveEnd(end) - ...
                                st_EvInfo.v_EveIni(1)) / ...
                                st_ElecData.st_HFOInfo.s_Sampling * 1000;
                                
        st_EvControl.s_PosIni    = round(st_EvControl.s_PosIni);
        st_EvControl.s_PosEnd    = round(st_EvControl.s_PosEnd);
                        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesBuild()
        % Set Line for event and for window
        
        s_Scale     = st_Controls.v_Scale(...
                    get(st_Controls.scaleList,'Value'));
                        
        % Clean lines before update      
                
        if ishandle(st_Line.SignalWind)
        	delete(st_Line.SignalWind)
            st_Line.SignalWind  = [];
        end 
        
        if ~isempty(st_Line.SignalEvent)
            for kk=1:numel(st_Line.SignalEvent)
                if ishandle(st_Line.SignalEvent(kk))
                    delete(st_Line.SignalEvent(kk))
                end
            end
            st_Line.SignalEvent  = [];
        end
        
        if ishandle(st_Line.FilterWind)
        	delete(st_Line.FilterWind)
            st_Line.FilterWind  = [];
        end          
                    
        if ~isempty(st_Line.FilterEvent)
            for kk=1:numel(st_Line.FilterEvent)
                if ishandle(st_Line.FilterEvent(kk))
                    delete(st_Line.FilterEvent(kk))
                end
            end
            st_Line.FilterEvent  = [];
        end
        
        % Update axes limits
        f_AxeSetYLims()
            
        % Set Original Signal Interval
        cla(st_hAxes.Signal)   
        st_Line.SignalWind      = line(...
                                'Xdata',st_EvInfo.v_TimeAxe(...
                                st_EvControl.s_PosIni:...
                                st_EvControl.s_PosEnd),...
                                'Ydata',st_ElecData.v_Intervals{...
                                    st_EvControl.v_EvCurrent,1}(...
                                st_EvControl.s_PosIni:...
                                st_EvControl.s_PosEnd) .* s_Scale,...
                                'Parent',st_hAxes.Signal,...
                                'LineWidth',1,...
                                'Color',v_SigColor);
            
        % Set Original Event Interval
        for kk=1:numel(st_EvInfo.v_EveIni)
            st_Line.SignalEvent(kk) = line(...
                                    'Xdata',st_EvInfo.v_TimeAxe(...
                                    st_EvInfo.v_EveIni(kk):...
                                    st_EvInfo.v_EveEnd(kk)),...
                                    'Ydata',st_ElecData.v_Intervals{...
                                    st_EvControl.v_EvCurrent,1}(...
                                    st_EvInfo.v_EveIni(kk):...
                                    st_EvInfo.v_EveEnd(kk)) .* s_Scale,...
                                    'Parent',st_hAxes.Signal,...
                                    'LineWidth',1,...
                                    'Color',v_EventColor);
        end
            
        % Set Original Filtered Interval
        cla(st_hAxes.Filtered)   
        st_Line.FilterWind      = line(...
                                'Xdata',st_EvInfo.v_TimeAxe(...
                                st_EvControl.s_PosIni:...
                                st_EvControl.s_PosEnd),...
                                'Ydata',st_EvInfo.v_EventFilter(...
                                st_EvControl.s_PosIni:...
                                st_EvControl.s_PosEnd) .* ...
                                st_EvInfo.v_FiltScale,...
                                'Parent',st_hAxes.Filtered,...
                                'LineWidth',1,...
                                'Color',v_SigColor);
            
        % Set Filtered Event Interval
        for kk=1:numel(st_EvInfo.v_EveIni)
            st_Line.FilterEvent(kk) = line(...
                                    'Xdata',st_EvInfo.v_TimeAxe(...
                                    st_EvInfo.v_EveIni(kk):...
                                    st_EvInfo.v_EveEnd(kk)),...
                                    'Ydata',st_EvInfo.v_EventFilter(...
                                    st_EvInfo.v_EveIni(kk):...
                                    st_EvInfo.v_EveEnd(kk)) .* ...
                                    st_EvInfo.v_FiltScale,...
                                    'Parent',st_hAxes.Filtered,...
                                    'LineWidth',1,...
                                    'Color',v_EventColor);
        end
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetYLims()
        % Set Y Limits
        linkaxes([st_hAxes.Signal,st_hAxes.Signal],'x')
                
        v_Interval      = st_ElecData.v_Intervals{...
                        st_EvControl.v_EvCurrent,1}(...
                        st_EvControl.s_PosIni:...
                        st_EvControl.s_PosEnd); 
                    
        s_AmpliScale    = st_Controls.v_Scale(...
                        get(st_Controls.scaleList,'Value'));   
                    
        s_AmplitudeStd  = std(v_Interval);
        
        v_YLim	= [min(v_Interval) - s_AmplitudeStd ...
                max(v_Interval) + s_AmplitudeStd]/s_AmpliScale;
            
        [v_tick,v_tLab] = f_ControlSetAxesScale(v_YLim);
            
        set(st_hAxes.Signal,...
            'YLim',v_YLim,...
            'XTickLabel',[],...
            'YTickLabel',v_tLab,...
            'YTick',v_tick)
        
        ylabel('Raw EEG (\muV)',...
            'Parent',st_hAxes.Signal,...
            'FontSize',st_Letter.toolcontrol);
        
        v_Interval      = st_EvInfo.v_EventFilter(...
                        st_EvControl.s_PosIni:...
                        st_EvControl.s_PosEnd);
                        
        s_AmplitudeStd  = std(v_Interval);
        
        v_YLim          = [min(v_Interval) - s_AmplitudeStd ...
                        max(v_Interval) + s_AmplitudeStd];
                            
        [v_tick,v_tLab] = f_ControlSetAxesScale(v_YLim);
        
        set(st_hAxes.Filtered,...
            'YLim',v_YLim,...
            'XTickLabel',[],...
            'YTickLabel',v_tLab,...
            'YTick',v_tick)        
                
        ylabel('Filtered EEG (\muV)',...
            'Parent',st_hAxes.Filtered,...
            'FontSize',st_Letter.toolcontrol);
        
        linkaxes([st_hAxes.Signal,st_hAxes.Filtered,st_hAxes.TimeFreq],'x')  
            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_AxeSetMainXTick(~,~)
        % Set Tick Distance for Grid 
        
        if get(st_Controls.gridList,'value') < 11
            
            set(st_hAxes.Signal,'XGrid','on')
            set(st_hAxes.Filtered,'XGrid','on')
        
            v_TimeTickStep  = diff(st_EvInfo.v_TimeAxe(...
                            [st_EvControl.s_PosIni st_EvControl.s_PosEnd]))...
                            ./st_Controls.v_GridSec(...
                            get(st_Controls.gridList,'value'));
                        
            v_TimeTick      = st_EvInfo.v_TimeAxe(st_EvControl.s_PosIni):...
                            v_TimeTickStep:...
                            st_EvInfo.v_TimeAxe(st_EvControl.s_PosEnd); %#ok<BDSCI>
        else
            set(st_hAxes.Signal,'XGrid','off')
            set(st_hAxes.Filtered,'XGrid','off')
        
            v_TimeTickStep  = diff(st_EvInfo.v_TimeAxe(...
                            [st_EvControl.s_PosIni st_EvControl.s_PosEnd]))...
                            ./4;
                        
            v_TimeTick      = st_EvInfo.v_TimeAxe(st_EvControl.s_PosIni):...
                            v_TimeTickStep:...
                            st_EvInfo.v_TimeAxe(st_EvControl.s_PosEnd); %#ok<BDSCI>
        end
        
        set(st_hAxes.Signal,...
            'XTick',v_TimeTick)
        
        set(st_hAxes.Filtered,...
            'XTick',v_TimeTick)        
        
        set(st_hAxes.TimeFreq,...
            'FontSize',st_Letter.toolcontrol,...
            'XTick',v_TimeTick,...
            'XTickLabel',...
            mat2cell(num2str(v_TimeTick','%6.2f'),ones(numel(v_TimeTick),1)))
                                        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_LinesDelete()
        % Clear all lines ploted
        
        % Clear Original Signal Interval            
        if ishandle(st_Line.SignalWind)
        	delete(st_Line.SignalWind)
            st_Line.SignalWind  = [];
        end
            
        % Clear Original Event Interval        
        if ~isempty(st_Line.SignalEvent)
            for kk=1:numel(st_Line.SignalEvent)
                if ishandle(st_Line.SignalEvent(kk))
                    delete(st_Line.SignalEvent(kk))
                end
            end
            st_Line.SignalEvent  = [];
        end
        
        % Clear Filtered Signal Interval            
        if ishandle(st_Line.FilterWind)
        	delete(st_Line.FilterWind)
            st_Line.FilterWind  = [];
        end
            
        % Clear Filtered Event Interval            
        if ~isempty(st_Line.FilterEvent)
            for kk=1:numel(st_Line.FilterEvent)
                if ishandle(st_Line.FilterEvent(kk))
                    delete(st_Line.FilterEvent(kk))
                end
            end
            st_Line.FilterEvent  = [];
        end
                
        linkaxes([st_hAxes.Signal,st_hAxes.Filtered,st_hAxes.TimeFreq],'x')

        % Clear Power spectrum
        if ishandle(st_Line.PowerSpect)
            delete(st_Line.PowerSpect)
        end
        
        % Clear Power spectrum
        if ishandle(st_Line.Spectrogram)
            delete(st_Line.Spectrogram)
        end
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PlotCursors()
        
        st_Cursors.v_hCurLine1(1)  = line(...
            'Xdata',[st_Cursors.s_PosCur1 ...
            st_Cursors.s_PosCur1],...
            'Ydata',get(st_hAxes.Signal,'YLim'),...
            'Parent',st_hAxes.Signal,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(1)  = line(...
            'Xdata',[st_Cursors.s_PosCur2 ...
            st_Cursors.s_PosCur2],...
            'Ydata',get(st_hAxes.Signal,'YLim'),...
            'Parent',st_hAxes.Signal,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur2);
        
        
        st_Cursors.v_hCurLine1(2)  = line(...
            'Xdata',[st_Cursors.s_PosCur1 ...
            st_Cursors.s_PosCur1],...
            'Ydata',get(st_hAxes.Filtered,'YLim'),...
            'Parent',st_hAxes.Filtered,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(2)  = line(...
            'Xdata',[st_Cursors.s_PosCur2 ...
            st_Cursors.s_PosCur2],...
            'Ydata',get(st_hAxes.Filtered,'YLim'),...
            'Parent',st_hAxes.Filtered,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur2);
        
        
        st_Cursors.v_hCurLine1(3)  = line(...
            'Xdata',[st_Cursors.s_PosCur1 ...
            st_Cursors.s_PosCur1],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
            'Parent',st_hAxes.TimeFreq,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(3)  = line(...
            'Xdata',[st_Cursors.s_PosCur2 ...
            st_Cursors.s_PosCur2],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
            'Parent',st_hAxes.TimeFreq,...
            'LineWidth',1,...
            'Color',st_Cursors.s_ColorCur2);
    end
%% [Functions] Selection Functions
% In this section are indicated the nested functions for change the event 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionChangeEvent(hObject,~)
        % Change event selected
        
        switch hObject
            case st_Selection.EvenDetLst
                st_EvControl.s_LstActive = 'detected';
                st_EvControl.v_ListSel   = get(st_Selection.EvenDetLst,...
                                        'Value');
                                    
                f_SelectionCheckListSel()
                                    
                if isempty(st_EvControl.v_ListSel)
                    return
                end
                                                                     
            case 'GoDown'
                st_EvControl.s_LstActive = 'detected';
                st_EvControl.v_ListSel   = get(st_Selection.EvenDetLst,...
                                        'Value') + 1;
                                    
                f_SelectionCheckListSel()
                
                if isempty(st_EvControl.v_ListSel)
                    return
                end
                
            case 'GoUp'
                st_EvControl.s_LstActive = 'detected';
                st_EvControl.v_ListSel   = get(st_Selection.EvenDetLst,...
                                        'Value') - 1;
                                    
                f_SelectionCheckListSel()
                
                if isempty(st_EvControl.v_ListSel)
                    return
                end
            otherwise
                    return
        end
                                
        
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionCheckListSel()
        % Check if list select values are possible
        
        if isempty(st_EvControl.v_ListSel)
        	return
        end
        
        if st_EvControl.v_ListSel(end) > numel(st_EvControl.v_EvIdxOk)
        	st_EvControl.v_ListSel = numel(st_EvControl.v_EvIdxOk);
        end
                
        
        if st_EvControl.v_ListSel(1) < 1
        	st_EvControl.v_ListSel = 1;
        end              
                
        set(st_Selection.EvenDetLst,'Value',st_EvControl.v_ListSel)
              
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlPlaceListEv(pv_Idx,ps_OK)
        %Set names on List
        if ps_OK
            set(st_Selection.EvenDetLst,...
                'String',st_EvControl.v_EventTime(pv_Idx,1))
            set(st_Selection.EvenDetLst,...
                'Value',st_EvControl.v_ListSel)
        else
            set(st_Selection.EvenRejLst,...
                'String',st_EvControl.v_EventTime(pv_Idx,1),...
                'Value',numel(st_EvControl.v_EvIdxRem))
        end
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionRemoveEvent(~,~)
        
        v_IdxRemove     = get(st_Selection.EvenDetLst,'Value');
                                    
        if isempty(v_IdxRemove) || ...
                sum(v_IdxRemove == 0) == numel(v_IdxRemove)|| ...
                isempty(st_EvControl.v_EvIdxOk)
            return
        end
        
        st_EvControl.v_EvIdxRem(end+1:end+numel(v_IdxRemove)) = ...
            st_EvControl.v_EvIdxOk(v_IdxRemove);
        
        st_EvControl.v_EvIdxOk(v_IdxRemove)  = [];
        st_EvControl.v_EvIdxOk               = sort(st_EvControl.v_EvIdxOk);
        st_EvControl.v_EvIdxRem              = sort(st_EvControl.v_EvIdxRem);
        
%         st_EvControl.v_ListSel               = v_IdxRemove(1)-1;
        f_SelectionCheckListSel()
        
        f_ControlPlaceListEv(st_EvControl.v_EvIdxOk,1)
        f_ControlPlaceListEv(st_EvControl.v_EvIdxRem,0)
        
        st_EvControl.s_LstActive = 'detected';
        
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionKeepEvent(~,~)
        
        v_IdxKeep     = get(st_Selection.EvenRejLst,'Value');
                                    
        if isempty(v_IdxKeep) || v_IdxKeep == 0 || ...
                isempty(st_EvControl.v_EvIdxRem)
            return
        end
        
        st_EvControl.v_EvIdxOk(end+1:end+numel(v_IdxKeep)) = ...
            st_EvControl.v_EvIdxRem(v_IdxKeep);
        
        st_EvControl.v_EvIdxOk               = sort(st_EvControl.v_EvIdxOk);
       
        st_EvControl.v_ListSel               = find(st_EvControl.v_EvIdxOk ==...
                                            st_EvControl.v_EvIdxRem(...
                                                                v_IdxKeep));
                                                            
        st_EvControl.v_EvIdxRem(v_IdxKeep)   = [];
        st_EvControl.v_EvIdxRem              = sort(st_EvControl.v_EvIdxRem);
                                                
        f_SelectionCheckListSel()
        
        set(st_Selection.EvenRejLst,'Value',v_IdxKeep(1)-1)
        
        f_ControlPlaceListEv(st_EvControl.v_EvIdxOk,1)
        f_ControlPlaceListEv(st_EvControl.v_EvIdxRem,0)
        
        st_EvControl.s_LstActive = 'detected';
        
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionDeleteEvent(~,~)
        
        if isempty(st_EvControl.v_EvIdxRem)
            return
        end
        
        str_choice  = questdlg('Would you like delete removed events?', ...
                    'Remove Message','Yes','No','No');
                
        switch str_choice
            case 'Yes'
                
                v_IdxDelete     = st_EvControl.v_EvIdxRem;
                                                                    
                st_ElecData.st_HFOInfo.m_EvtLims(v_IdxDelete,:)     = [];
                st_ElecData.st_HFOInfo.m_IntervLims(v_IdxDelete,:)  = [];
                st_ElecData.st_HFOInfo.m_Rel2IntLims(v_IdxDelete,:) = [];
                st_ElecData.st_HFOInfo.v_EvType(v_IdxDelete)        = [];
                st_ElecData.v_Intervals(v_IdxDelete,:)              = [];
                
                % Set changes in load structure   
                f_EventSetEventChanges()
                
                set(st_Selection.EvenRejLst,...
                'String',[],...
                'Value',[])
            
                % Load Electrode                
                f_LoadElectrode()
                
            otherwise
                return
        end
        
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_SelectionKeyChange(~,hEvent)
        % Decides what to do when a key is pressed
                
        if isempty(hEvent.Modifier)
            switch hEvent.Key
                case 'rightarrow'
                    f_SelectionChangeEvent('GoDown')
                case 'leftarrow'
                    f_SelectionChangeEvent('GoUp')
                case 'd'
                    f_SelectionRemoveEvent()
                case 'a'
                    f_SelectionKeepEvent()
                otherwise
            end   
            return
        end
        
        
        if strcmpi(hEvent.Modifier{1,1},'shift') && ...
                strcmpi(hEvent.Key,'leftarrow')
            
            st_Cursors.s_PosCur1 = st_Cursors.s_PosCur1 - ...
                                   st_Cursors.s_KeyStep;
                        
            if st_Cursors.s_PosCur1 < 0
                st_Cursors.s_PosCur1 = 0;
            end
            
            set(st_Cursors.s_hCursor1,...
                    'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
            
            f_CursorProcess()                   
            
            return
        end
                
        if strcmpi(hEvent.Modifier{1,1},'shift') && ...
                strcmpi(hEvent.Key,'rightarrow')
            
            st_Cursors.s_PosCur1 = st_Cursors.s_PosCur1 + ...
                                   st_Cursors.s_KeyStep;
                        
            if st_Cursors.s_PosCur1 > 1
                st_Cursors.s_PosCur1 = 1;
            end
            
            set(st_Cursors.s_hCursor1,...
                    'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
                        
            f_CursorProcess()                   
            
            return
        end        
        
        if strcmpi(hEvent.Modifier{1,1},'control') && ...
                strcmpi(hEvent.Key,'leftarrow')
            
            st_Cursors.s_PosCur2 = st_Cursors.s_PosCur2 - ...
                                   st_Cursors.s_KeyStep;
                        
            if st_Cursors.s_PosCur2 < 0
                st_Cursors.s_PosCur2 = 0;
            end
            
            set(st_Cursors.s_hCursor2,...
                    'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
                        
            f_CursorProcess()                   
            
            return
        end
                
        if strcmpi(hEvent.Modifier{1,1},'control') && ...
                strcmpi(hEvent.Key,'rightarrow')
            
            st_Cursors.s_PosCur2 = st_Cursors.s_PosCur2 + ...
                                   st_Cursors.s_KeyStep;
                        
            if st_Cursors.s_PosCur2 > 1
                st_Cursors.s_PosCur2 = 1;
            end
            
            set(st_Cursors.s_hCursor2,...
                    'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
                        
            f_CursorProcess()                   
            
            return
        end        
        
        if logical(ismember({'alt'},hEvent.Modifier))
            
            if isempty(hEvent.Key)
                return
            end
            
            switch hEvent.Key
                case 'n'
                    
                    set(st_Event.EvType,'value',1)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 'g'
                    
                    set(st_Event.EvType,'value',2)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 'r'
                    
                    set(st_Event.EvType,'value',3)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 'f'
                    
                    set(st_Event.EvType,'value',4)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 's'
                    
                    set(st_Event.EvType,'value',5)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 'a'
                    
                    set(st_Event.EvType,'value',6)                    
                    f_EventChangeType(st_Event.EvType)
                    
                case 'o'
                    
                    set(st_Event.EvType,'value',7)                    
                    f_EventChangeType(st_Event.EvType)
                                   
                otherwise
                    if double(hEvent.Character) == 13
                         f_EventAsCursor()
                    end
            end
            return
        end
                
    end

%% [Functions] Signal Processing
% In this section are indicated the nested functions for signal processing 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FilterSet()
        % This function filter the signal in the band selected
        
        if isempty(st_Load)
            return
        end
        
        st_EvInfo.v_EventFilter = zeros(...
                                size(st_ElecData.v_Intervals{...
                                    st_EvControl.v_ListSel,1}));
                                                               
        s_Filter                = f_DesignIIRfilter(...
                                st_ElecData.st_HFOInfo.s_Sampling,...
                                st_EvInfo.v_FreqLimits,...
                                [st_EvInfo.v_FreqLimits(1)-0.5 ...
                                st_EvInfo.v_FreqLimits(2)+0.5]);
                                                       
        v_SignalFilt            = f_FilterIIR(...
                                st_ElecData.v_Intervals{...
                                st_EvControl.v_EvCurrent,1},...
                                s_Filter);
                            
        st_EvInfo.v_EventFilter = v_SignalFilt;
              
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ScalogramSet(~,~)
        
        if isempty(st_Load)
            return
        end
                
        s_FreqSeg       = 512; 
        s_StDevCycles   = 3; 
        s_Magnitudes    = 1;
        s_SquaredMag    = 0;
        s_MakeBandAve   = 0;
        s_MinFreqHz     = st_EvInfo.v_FreqLimits(1);
        s_MaxFreqHz     = st_EvInfo.v_FreqLimits(2);
        s_ColorLevels   = 256;
        str_ColorMap    = v_Colormap{get(st_Controls.ColmapList,'Value')};
                       
        v_SigInterv     = st_ElecData.v_Intervals{...
                        st_EvControl.v_EvCurrent,1}(...
                        st_EvControl.s_PosIni:st_EvControl.s_PosEnd);
        
        s_WrpWnd    = round(numel(v_SigInterv)*0.5)+1;
        v_IniWind   = v_SigInterv(1:s_WrpWnd);
        s_First     = v_IniWind(1);
        v_EndWind   = v_SigInterv(end-s_WrpWnd:end);
        s_Last      = v_EndWind(end);
        
        v_IniWind   = v_IniWind(:) - s_First;
        v_EndWind   = v_EndWind(:) - s_Last;
        
        v_IniWind   = flipud(-v_IniWind) + s_First;
        v_EndWind   = flipud(-v_EndWind) + s_Last;
        
        v_IniWind   = v_IniWind(1:end-1);
        v_EndWind   = v_EndWind(2:end);
        
        v_SigInterv = vertcat(v_IniWind,v_SigInterv,v_EndWind);        
        
        [m_GaborWT, v_TimeAxis, v_FreqAxis] = ...
                            f_GaborTransformWait(...
                            v_SigInterv,...
                            st_ElecData.st_HFOInfo.s_Sampling,...
                            s_MinFreqHz, ...
                            s_MaxFreqHz, ...
                            s_FreqSeg, ...
                            s_StDevCycles, ...
                            s_Magnitudes, ...
                            s_SquaredMag, ...
                            s_MakeBandAve);
        
        switch get(st_Controls.TFEquList,'Value')
            case 2
                m_GaborWT    = f_Matrix2RelAmplitud(m_GaborWT);
            case 3
                m_GaborWT    = f_Matrix2Norm(m_GaborWT);
            case 4
                m_GaborWT    = f_Matrix2ZScore(m_GaborWT);
            otherwise
        end
                
        m_GaborWT   = m_GaborWT(:,numel(v_IniWind)+1:...
                        numel(v_SigInterv)-numel(v_EndWind)); 
                    
        v_TimeAxis  = linspace(...
            st_EvInfo.v_TimeAxe(st_EvControl.s_PosIni),...
            st_EvInfo.v_TimeAxe(st_EvControl.s_PosEnd),...
            length(v_TimeAxis));
        
        clear v_EndWind v_IniWind
        
        
        v_Lims      = [min(m_GaborWT(:)) max(m_GaborWT(:))];
        
        if ishandle(st_Line.TFImage)
            delete(st_Line.TFImage)
        end
                
%         linkaxes([st_hAxes.Signal,st_hAxes.Signal],'x')
         
        set(st_hFigure.Analysis,'CurrentAxes',st_hAxes.TimeFreq)
        axes(st_hAxes.TimeFreq);
                                
        st_Line.Spectrogram     = f_ImageMatrix(m_GaborWT, v_TimeAxis, ...
                                v_FreqAxis,v_Lims,str_ColorMap,...
                                s_ColorLevels, 0);
               
        st_EvInfo.m_Spectrum    = m_GaborWT;
        st_EvInfo.v_FreqSpect   = v_FreqAxis;
        
        set(st_hAxes.TimeFreq,...
            'FontSize',st_Letter.toolcontrol,...
            'YLim',st_EvInfo.v_FreqLimits) 
        
        xlabel('Time (Secs)',...
            'Parent',st_hAxes.TimeFreq,...
            'FontSize',st_Letter.toolcontrol);

        ylabel('Frequency (Hz)',...
            'Parent',st_hAxes.TimeFreq,...
            'FontSize',st_Letter.toolcontrol);
              
        f_CursorRebuildLineTF()
                
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_PowerSpecSet(~,~)
        % Set and plot power spectrum
                                    
        if st_Cursors.s_IdxCur1 <= st_Cursors.s_IdxCur2
            s_CurMinIdx     = st_Cursors.s_IdxCur1;
            s_CurMaxIdx     = st_Cursors.s_IdxCur2;
        else
            s_CurMinIdx     = st_Cursors.s_IdxCur2;
            s_CurMaxIdx     = st_Cursors.s_IdxCur1;          
        end
        
        % Count number of elements to analize
        if numel(s_CurMinIdx:s_CurMaxIdx) < 3
            return
        end
       
        switch get(st_EventDisp.PSDType,'Value')
            case 1                
                s_AnalyOrd          = 100;
                [v_PowSpec,v_Freq]  = f_PowSpec(st_ElecData.v_Intervals{...
                                    st_EvControl.v_ListSel,1}(...
                                    s_CurMinIdx:s_CurMaxIdx),...
                                    st_ElecData.st_HFOInfo.s_Sampling,1,...
                                    s_AnalyOrd);

                v_IdxOK             = v_Freq >= st_EvInfo.v_FreqLimits(1) &...
                                    v_Freq <= st_EvInfo.v_FreqLimits(2);

                v_PowSpec           = v_PowSpec(v_IdxOK);
                v_PowSpec           = 100*v_PowSpec./sum(v_PowSpec);
                v_Freq              = v_Freq(v_IdxOK);
            case 2
                s_CurMinIdx         = s_CurMinIdx-st_EvControl.s_PosIni+1;
                s_CurMaxIdx         = s_CurMaxIdx-st_EvControl.s_PosIni+1;
                v_PowSpec           = mean(st_EvInfo.m_Spectrum(:,...
                                    s_CurMinIdx:s_CurMaxIdx),2);
                v_Freq              = st_EvInfo.v_FreqSpect;
                v_PowSpec           = 100.*v_PowSpec./sum(v_PowSpec);
                
            case 3                
                [v_PowSpec v_Freq] = ...
                                    f_FFT(st_ElecData.v_Intervals{...
                                    st_EvControl.v_ListSel,1}(...
                                    s_CurMinIdx:s_CurMaxIdx), ...
                                    st_ElecData.st_HFOInfo.s_Sampling,0,0);
                
                v_IdxOK             = v_Freq >= st_EvInfo.v_FreqLimits(1) &...
                                    v_Freq <= st_EvInfo.v_FreqLimits(2);

                v_PowSpec           = abs(v_PowSpec(v_IdxOK));
                v_PowSpec           = 100*v_PowSpec./sum(v_PowSpec);
                v_Freq              = v_Freq(v_IdxOK);
                
        end               
        
        [~,s_IdxMax]            = max(v_PowSpec);
        st_EvInfo.s_CurMaxFreq  = v_Freq(s_IdxMax); 
                            
        set(st_hAxes.PowerSpec,'XLim',st_EvInfo.v_FreqLimits)
            
        if ishandle(st_Line.PowerSpect)
            delete(st_Line.PowerSpect)
        end
        
        st_Line.PowerSpect  = line(...
                            v_Freq,...
                            v_PowSpec,...
                            'Color','b',...
                            'Parent',st_hAxes.PowerSpec,...
                            'LineWidth',1); 
    end

%% [Functions] Controls Info
% In this section are indicated the nested functions for set controls Info 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlSetGeneralInfo()
        %Set General Info
        
        set(st_Info.SigName,'String',st_FileData.str_FileName)
        set(st_Info.ElecList,'String',st_LoadInfo.v_ElecNames,'Value',1) 
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlSetElectrodeInfo()
        %Set Electrode Info
        
        set(st_Info.MethodName,...
            'String',st_ElecData.st_HFOInfo.str_DetMethod)
        set(st_EventDisp.MinFreq,...
            'String',sprintf('%6.2f',st_ElecData.st_HFOSetting.s_FreqIni))
        set(st_EventDisp.MaxFreq,...
            'String',sprintf('%6.2f',st_ElecData.st_HFOSetting.s_FreqEnd))
        
        st_EvInfo.v_FreqLimits  = [st_ElecData.st_HFOSetting.s_FreqIni ...
                                    st_ElecData.st_HFOSetting.s_FreqEnd];
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlSetEventInfo()
        % Set Specification Controls Info
                    
        s_CurMinIdx = st_EvInfo.v_EveIni-st_EvControl.s_PosIni+1;
        s_CurMaxIdx = st_EvInfo.v_EveEnd-st_EvControl.s_PosIni+1;
                            
        st_EvInfo.v_PowSpec = mean(st_EvInfo.m_Spectrum(:,...
                            s_CurMinIdx:s_CurMaxIdx),2);
        st_EvInfo.v_PowSpec = st_EvInfo.v_PowSpec./sum(st_EvInfo.v_PowSpec);
        
        s_IdxMax    = findextrema(st_EvInfo.v_PowSpec);
        [~,s_Val]   = max(st_EvInfo.v_PowSpec(s_IdxMax));
        s_IdxMax    = s_IdxMax(s_Val);
        
        st_EvInfo.s_EvMaxFreq   = st_EvInfo.v_FreqSpect(s_IdxMax); 
        
        
        st_EvInfo.s_EvMaxAmpl   = st_EvInfo.v_EventFilter(...
                                 st_EvInfo.v_EveIni:st_EvInfo.v_EveEnd);
        
        [v_IdHi,v_IdLo]         = findextrema(st_EvInfo.s_EvMaxAmpl);
        v_Idx                   = sort(vertcat(v_IdHi,v_IdLo));
        st_EvInfo.s_EvMaxAmpl   = max(abs(st_EvInfo.s_EvMaxAmpl(v_Idx)));
        
        v_Idx                   = st_EvInfo.v_FreqSpect>=v_BandLimits(1) & ...
                                st_EvInfo.v_FreqSpect < v_BandLimits(2);        
        st_EvInfo.s_GammaIdx    = sum(st_EvInfo.v_PowSpec(v_Idx));
        
        
        s_Val               = st_EvInfo.v_PowSpec(v_Idx);
        s_IdxMax            = findextrema(s_Val);
        [~,s_Val]           = max(s_Val(s_IdxMax));
        s_IdxMax            = s_IdxMax(s_Val);
        v_FreqTemp          = st_EvInfo.v_FreqSpect(v_Idx);
        s_EvGamMaxFreq      = v_FreqTemp(s_IdxMax); 
        
        v_Idx                   = st_EvInfo.v_FreqSpect>=v_BandLimits(2) & ...
                                st_EvInfo.v_FreqSpect < v_BandLimits(3);     
        st_EvInfo.s_RippleIdx   = sum(st_EvInfo.v_PowSpec(v_Idx));
                
        s_Val               = st_EvInfo.v_PowSpec(v_Idx);
        s_IdxMax            = findextrema(s_Val);
        [~,s_Val]           = max(s_Val(s_IdxMax));
        s_IdxMax            = s_IdxMax(s_Val);
        v_FreqTemp          = st_EvInfo.v_FreqSpect(v_Idx);
        s_EvRipMaxFreq      = v_FreqTemp(s_IdxMax); 
        
        v_Idx                   = st_EvInfo.v_FreqSpect>=v_BandLimits(3);     
        st_EvInfo.s_FastRIdx    = sum(st_EvInfo.v_PowSpec(v_Idx));
        
        s_Val               = st_EvInfo.v_PowSpec(v_Idx);
        s_IdxMax            = findextrema(s_Val);
        [~,s_Val]           = max(s_Val(s_IdxMax));
        s_IdxMax            = s_IdxMax(s_Val);
        v_FreqTemp          = st_EvInfo.v_FreqSpect(v_Idx);
        s_EvFrpMaxFreq      = v_FreqTemp(s_IdxMax); 
                        
        
        set(st_Event.EvGamIdx,...
            'String',sprintf('%2.2f ',st_EvInfo.s_GammaIdx))                
        set(st_Event.EvRipIdx,...
            'String',sprintf('%2.2f ',st_EvInfo.s_RippleIdx))                
        set(st_Event.EvFRipIdx,...
            'String',sprintf('%2.2f ',st_EvInfo.s_FastRIdx))
        
        set(st_Event.EvGamFreq,...
            'String',sprintf('%2.1f Hz',s_EvGamMaxFreq))
        set(st_Event.EvRipFreq,...
            'String',sprintf('%2.1f Hz',s_EvRipMaxFreq))
        set(st_Event.EvFRipFreq,...
            'String',sprintf('%2.1f Hz',s_EvFrpMaxFreq))
                
        set(st_Event.EvMaxFreq,...
            'String',sprintf('%2.1f Hz',st_EvInfo.s_EvMaxFreq))        
        set(st_Event.EvDuration,...
            'String',sprintf('%2.1f mS',st_EvInfo.s_EvenTime))       
        set(st_Event.EvAmpli,...
            'String',sprintf('%2.1f uV',st_EvInfo.s_EvMaxAmpl))
                        
        
        set(st_Event.EvType,...
            'Value',st_ElecData.st_HFOInfo.v_EvType(...
            st_EvControl.v_EvCurrent))
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlCountEvents()
        % Count events rejected and detected
        
        set(st_Scan.Progress,...
            'String',sprintf('%i/%i',st_EvControl.v_ListSel,...
            numel(st_EvControl.v_EvIdxOk)))
        
        set(st_Selection.EvenDetLab,...
            'String',sprintf('Events Detected : %i',...
            numel(st_EvControl.v_EvIdxOk)))
        
        set(st_Selection.EvenRejLab,...
            'String',sprintf('Events Rejected : %i',...
            numel(st_EvControl.v_EvIdxRem)))
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlCursorDependentInfo()
        % Count events rejected and detected
        set(st_Event.PSDMaxFreq,...
            'String',sprintf('%3.2f Hz',...
            st_EvInfo.s_CurMaxFreq))
        set(st_hAxes.CurInt,...
            'String',sprintf('%3.2f mS',...
            st_Cursors.v_CurInterval))
        
        
    end  
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlSetFreqLimits(~,~)
        % Set Time frequency and PSD Limits
                
        if isempty(st_Load)
            return
        end
        
        % Check if strings are true numbers
        [v_Freqs s_Check]   = f_CheckTextNumbers(...
                            get(st_EventDisp.MinFreq,'string'),...
                            get(st_EventDisp.MaxFreq,'string'),...
                            st_ElecData.st_HFOInfo.s_Sampling/2,...
                            1);    
                                
        if s_Check == -1
            uicontrol(st_EventDisp.MinFreq)
            return
        elseif s_Check == -2
            uicontrol(st_EventDisp.MaxFreq)
            return
        end
                                
        st_EvInfo.v_FreqLimits  = v_Freqs;
        
        f_DisplayProcess()
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_ControlPSDChange(~,~)
        f_PowerSpecSet()
        f_ControlCursorDependentInfo()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function [v_tick,v_tLab] = f_ControlSetAxesScale(v_YLim)
        
        if diff(v_YLim) > 200
            s_scale = 100;
        elseif diff(v_YLim) > 40 
            s_scale = 20;
        elseif diff(v_YLim) > 20 
            s_scale = 10;
        elseif  diff(v_YLim) > 2            
            s_scale = 1;
        else            
            s_scale = 0.1;            
        end
        
        v_tick	= fix(v_YLim/s_scale);
        v_tick  = (v_tick(1):v_tick(2))*s_scale;
        v_tick  = v_tick(v_tick>v_YLim(1) & v_tick<v_YLim(2));   
        v_tLab  = cellstr(num2str(v_tick(:)));
        
    end

%% [Functions] Cursors
% In this section are indicated the nested functions for set cursors Info 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorClick(hObject,~)
        % In this function get the last point clicked in any axes and
        % executes the action according it.
        
        st_Cursors.s_CurrentCur = hObject;
        set(st_hFigure.Analysis,'WindowButtonMotionFcn',@f_CursorDrag)
              
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorDrag(~,~)
        % In this function the cursor move
        s_CurrentPoint  = get(st_hAxes.Cursors,'CurrentPoint');
        s_CurrentPoint  = s_CurrentPoint(1);
        
        if s_CurrentPoint < 0
            s_CurrentPoint = 0;
        elseif s_CurrentPoint > 1
            s_CurrentPoint = 1;
        end
        
        switch st_Cursors.s_CurrentCur
            case st_Cursors.s_hCursor1
                st_Cursors.s_PosCur1 = s_CurrentPoint;
                set(st_Cursors.s_hCursor1,...
                    'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
                        
            case st_Cursors.s_hCursor2
                st_Cursors.s_PosCur2 = s_CurrentPoint;
                set(st_Cursors.s_hCursor2,...
                    'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
        end
        
        f_CursorProcess()        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorStopDrag(~,~)
        % In this function the cursors stop moving
        
        set(st_hFigure.Analysis,'WindowButtonMotionFcn','')
        st_Cursors.s_CurrentCur = [];
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorRebuildLineTF()
        % SubFunction which rebuild the TF cursor lines 
                               
        st_Cursors.v_hCurLine1(3)  = line(...
                                    'Xdata',[st_Cursors.s_PosCur1 ...
                                    st_Cursors.s_PosCur1],...
                                    'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
                                    'Parent',st_hAxes.TimeFreq,...
                                    'LineWidth',1,...
                                    'Color',st_Cursors.s_ColorCur1);
        
        st_Cursors.v_hCurLine2(3)  = line(...
                                    'Xdata',[st_Cursors.s_PosCur2 ...
                                    st_Cursors.s_PosCur2],...
                                    'Ydata',get(st_hAxes.TimeFreq,'YLim'),...
                                    'Parent',st_hAxes.TimeFreq,...
                                    'LineWidth',1,...
                                    'Color',st_Cursors.s_ColorCur2);
    f_CursorProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorProcess()
        % Processing cursor Info and Position
        f_CursorPosition()
        f_CursorDataInfo()
        f_PowerSpecSet()
        f_ControlCursorDependentInfo()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorPosition()
        % SubFunction which moves the cursor lines displayed
                 
        v_XLims     = get(st_hAxes.Signal,'XLim');        
        s_XposCur1  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur1;  
        s_XposCur2  = v_XLims(1) + diff(v_XLims) * st_Cursors.s_PosCur2;
        
        st_Cursors.v_CurInterval    = abs(s_XposCur2-s_XposCur1)*1000;
        
        set(st_Cursors.v_hCurLine1(1),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.Signal,'YLim'));
        
        set(st_Cursors.v_hCurLine2(1),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.Signal,'YLim'));
        
        set(st_Cursors.v_hCurLine1(2),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.Filtered,'YLim'));
        
        set(st_Cursors.v_hCurLine2(2),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.Filtered,'YLim'));
        
        set(st_Cursors.v_hCurLine1(3),...
            'Xdata',[s_XposCur1 s_XposCur1],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'));
        
        set(st_Cursors.v_hCurLine2(3),...
            'Xdata',[s_XposCur2 s_XposCur2],...
            'Ydata',get(st_hAxes.TimeFreq,'YLim'));
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorDataInfo()
        % Get Idx Position for cursor
        
        st_Cursors.s_IdxCur1    = round(st_EvControl.s_PosIni + ...
                                (st_EvControl.s_PosEnd - ...
                                st_EvControl.s_PosIni) * ...
                                st_Cursors.s_PosCur1);               
        
        st_Cursors.s_IdxCur2    = round(st_EvControl.s_PosIni + ...
                                (st_EvControl.s_PosEnd - ...
                                st_EvControl.s_PosIni) * ...
                                st_Cursors.s_PosCur2);            
        
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_CursorEvCursor()
        if ~get(st_hAxes.StickCur,'Value')
            return
        end
        
        st_Cursors.s_PosCur1    = (st_EvInfo.v_EveIni-st_EvControl.s_PosIni+1)/...
                                (st_EvControl.s_PosEnd-st_EvControl.s_PosIni);
        
        st_Cursors.s_PosCur2    = (st_EvInfo.v_EveEnd-st_EvControl.s_PosIni+1)/...
                                (st_EvControl.s_PosEnd-st_EvControl.s_PosIni);
                            
        set(st_Cursors.s_hCursor1,...
            'XData',[st_Cursors.s_PosCur1 ...
            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
        
        set(st_Cursors.s_hCursor2,...
            'XData',[st_Cursors.s_PosCur2 ...
            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
                    
                    
    end

%% [Functions] Event Modify
% In this section are indicated the nested functions for change event info 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_EventSetEventChanges()
        % Set Changes done in the event on the load structure
        st_Load = setfield(st_Load,...
                                st_LoadInfo.v_ElecNames{...
                                st_LoadInfo.s_ElecIdx},st_ElecData); %#ok<SFLD>
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_EventAsCursor(~,~)
        %Save Event limits as shown by cursors
        
        switch st_EvControl.s_LstActive
            case 'detected'
                % Select the aproved event selected
                                
                st_EvControl.v_EvCurrent = st_EvControl.v_EvIdxOk(...
                                st_EvControl.v_ListSel); 
            case 'rejected'
                % Select the rejected event selected
                st_EvControl.v_EvCurrent = st_EvControl.v_EvIdxRem(...
                                        st_EvControl.v_ListRem);
        end
        
        if st_Cursors.s_IdxCur1 <= st_Cursors.s_IdxCur2
            s_CurMinIdx     = st_Cursors.s_IdxCur1;
            s_CurMaxIdx     = st_Cursors.s_IdxCur2;
        else
            s_CurMinIdx     = st_Cursors.s_IdxCur2;
            s_CurMaxIdx     = st_Cursors.s_IdxCur1;          
        end
                
        st_ElecData.st_HFOInfo.m_Rel2IntLims(...
                                st_EvControl.v_EvCurrent,1) = s_CurMinIdx;
        st_ElecData.st_HFOInfo.m_Rel2IntLims(...
                                st_EvControl.v_EvCurrent,2) = s_CurMaxIdx;
        
        st_ElecData.st_HFOInfo.m_EvtLims(...
                                st_EvControl.v_EvCurrent,1) = s_CurMinIdx - 1 + ...
                                st_ElecData.st_HFOInfo.m_IntervLims(...
                                st_EvControl.v_EvCurrent,1);
        st_ElecData.st_HFOInfo.m_EvtLims(...                
                                st_EvControl.v_EvCurrent,2) = s_CurMaxIdx - 1 + ...
                                st_ElecData.st_HFOInfo.m_IntervLims(...
                                st_EvControl.v_EvCurrent,1);        
        
        % Set changes in load structure                  
        f_EventSetEventChanges()
                            
        % Find Event Initial Time
        s_TimeIntervIni         = st_ElecData.st_HFOInfo.m_EvtLims(...
                                st_EvControl.v_EvCurrent,1);
        s_TimeIntervIni         = s_TimeIntervIni./...
                                st_ElecData.st_HFOInfo.s_Sampling;
                            
        st_EvControl.v_EventTime(st_EvControl.v_EvCurrent,1) = {sprintf(...
                                            '%02.0f:%02.0f:%05.2f',...
                                            f_Secs2hms(s_TimeIntervIni))};
                                        
        f_ControlPlaceListEv(st_EvControl.v_EvIdxOk,1)
        f_DisplayProcess()
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_EventChangeType(hObject,~)
        %Change Event Type (None by default)
                                                        
        st_ElecData.st_HFOInfo.v_EvType(...                 
                                st_EvControl.v_EvCurrent)   = get(...
                                                            hObject,'Value');
        
        % Set changes in load structure                      
        f_EventSetEventChanges()                            
                            
    end
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_EventOptionScan(hObject,~)
        % Auto-Clasify Type of event (BETA)
                
        if get(hObject,'Value') == 0
            return
        end
        
        if isempty(st_ElecData)
            set(hObject,'Value',0)
            return
        end
                
        % Set Controls
%         set(st_Controls.windowList,'Value',10)
        set(st_Controls.TFEquList,'Value',1)
        set(st_EventDisp.PSDType,'Value',2)
        % Set Cursors
        st_Cursors.s_PosCur1 = 0;
                set(st_Cursors.s_hCursor1,...
                    'XData',[st_Cursors.s_PosCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 - st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1 ...
                            st_Cursors.s_PosCur1 + st_Cursors.s_SizeCur1]);
        st_Cursors.s_PosCur2 = 1;
                set(st_Cursors.s_hCursor2,...
                    'XData',[st_Cursors.s_PosCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 - st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2 ...
                            st_Cursors.s_PosCur2 + st_Cursors.s_SizeCur2]);
                    
        set(st_Scan.Button,'cData',st_Icons.ButtomStop)
        
        s_Count     = get(st_Selection.EvenDetLst,'Value');
        s_Function  = get(st_Scan.ElecList,'Value');
        
        if s_Function == 2 
            % Set Frequency limits in auto-clasify case
            
            set(st_Controls.windowList,'Value',5)
            set(st_EventDisp.MinFreq,'string',...
                sprintf('%2.2f',v_BandLimits(1)));
            set(st_EventDisp.MaxFreq,'string',...
                sprintf('%2.2f',floor(st_ElecData.st_HFOInfo.s_Sampling/2)));
                                
            f_ControlSetFreqLimits()
            
            set(st_hAxes.StickCur,'Value',1)
            f_CursorEvCursor()
        end
        
        s_Count = s_Count - 1;  
        
        while get(st_Scan.Button,'value')
            
            s_Count = s_Count + 1;
            
            if s_Count > numel(st_ElecData.st_HFOInfo.v_EvType);
                set(hObject,'Value',0)
                break
            end
            
            %Set Event to analize
            set(st_Selection.EvenDetLst,'Value',s_Count)
            f_SelectionChangeEvent(st_Selection.EvenDetLst)
                        
            pause(0.01)
            
            switch s_Function
                case 1
                    continue
                case 2
                    
                    if ~st_Line.s_Plot
                        continue
                    end
                    
                    %::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    v_poliFac   = polyfit(st_EvInfo.v_FreqSpect(:),...
                                st_EvInfo.v_PowSpec(:),1);
                            
                    v_yfit      = polyval(v_poliFac,st_EvInfo.v_FreqSpect(:));    
                    s_SSresid   = sum((st_EvInfo.v_PowSpec - v_yfit).^2);
                    s_SStotal   = (length(st_EvInfo.v_PowSpec)-1) * ...
                                var(st_EvInfo.v_PowSpec);
                    s_Rsquare	=  1 - s_SSresid/s_SStotal ;     
                    %::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    
                    if s_Rsquare > 0.8
                        set(st_Event.EvType,'Value',6)
                        f_EventChangeType(st_Event.EvType)
                        continue
                    elseif s_Rsquare > 0.7
                        set(st_Event.EvType,'Value',5)
                        f_EventChangeType(st_Event.EvType)
                        continue                    
                    end
                    %::::::::::::::::::::::::::::::::::::::::::::::::::::::  
                    
                    s_CurMinIdx = st_EvInfo.v_EveIni-st_EvControl.s_PosIni+1;
                    s_CurMaxIdx = st_EvInfo.v_EveEnd-st_EvControl.s_PosIni+1;
                    
                    v_Segment = st_EvInfo.v_EventFilter(...
                                st_EvControl.s_PosIni:...
                                st_EvControl.s_PosEnd);
                    
                    if numel(v_Segment(s_CurMinIdx:s_CurMaxIdx)) < 3
                        set(st_Event.EvType,'Value',7)
                        f_EventChangeType(st_Event.EvType)
                        continue                    
                    end
                    
                    v_max   = findpeaks(v_Segment(s_CurMinIdx:s_CurMaxIdx));
                    v_max   = v_max(v_max > mean(v_Segment));
                    
                    if numel(v_max) < 4
                        set(st_Event.EvType,'Value',7)
                        f_EventChangeType(st_Event.EvType)
                        continue                    
                    end
                    
                    v_Segment       = abs(hilbert(v_Segment));
                    s_meanSegment   = mean(v_Segment);
                    s_stdSegment    = std(v_Segment);
                    
                        
                    v_max   = findpeaks(v_Segment(s_CurMinIdx:s_CurMaxIdx));
                    s_max   = max(v_max);
                    
                    if isempty(v_max)
                        set(st_Event.EvType,'Value',7)
                        f_EventChangeType(st_Event.EvType)
                        continue                    
                    end
                    
                    if s_max < s_meanSegment + 3*s_stdSegment 
                        set(st_Event.EvType,'Value',7)
                        f_EventChangeType(st_Event.EvType)
                        continue                    
                    end
                    %::::::::::::::::::::::::::::::::::::::::::::::::::::::
                    
                    
                    sIdxMax = max([st_EvInfo.s_GammaIdx;...
                                st_EvInfo.s_RippleIdx;...
                                st_EvInfo.s_FastRIdx]);
                    
                    switch sIdxMax(1)
                        case st_EvInfo.s_GammaIdx
                            set(st_Event.EvType,'Value',2)
                            f_EventChangeType(st_Event.EvType)
                        case st_EvInfo.s_RippleIdx
                            set(st_Event.EvType,'Value',3)
                            f_EventChangeType(st_Event.EvType)
                        case st_EvInfo.s_FastRIdx
                            set(st_Event.EvType,'Value',4)
                            f_EventChangeType(st_Event.EvType)
                        otherwise
                            set(st_Event.EvType,'Value',1)
                            f_EventChangeType(st_Event.EvType)
                    end
                case 3
                    
                    s_EvType = st_ElecData.st_HFOInfo.v_EvType(...                 
                                st_EvControl.v_EvCurrent);
                            
                    if s_EvType == 6
                        f_SelectionRemoveEvent()
                    end
            end    
        end
        
        set(st_Scan.Button,'cData',st_Icons.ButtomRigh)
        
        
    end

%% [Functions] Figure
% In this section are indicated the nested functions figure related 
%::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    function f_FigureTools(h_Object,~)
        
        if strcmpi('on',get(h_Object,'State'))
            set(st_hFigure.Analysis,'MenuBar','figure')
        else
            set(st_hFigure.Analysis,'MenuBar','none')
        end
        
    end

end